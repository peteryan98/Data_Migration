/*================================================================================*/
/* DDL SCRIPT                                                                     */
/*================================================================================*/
/*  Title    : eGOS                                                               */
/*  FileName : NEOS.ecm                                                           */
/*  Platform : SQL Server 2014                                                    */
/*  Version  : Concept                                                            */
/*  Date     : Thursday, March 30, 2017                                           */
/*================================================================================*/
/*================================================================================*/
/* CREATE TABLES                                                                  */
/*================================================================================*/

CREATE TABLE [dbo].[ACCOUNT_AUTHORIZATION] (
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_ACCOUNT_AUTHORIZATION] PRIMARY KEY ([CONTRACT_IDF])
)
GO

CREATE TABLE [dbo].[ACCOUNT_STATEMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'ACNS_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [BEGIN_BALANCE] MONEY NOT NULL,
  [END_BALANCE] MONEY NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  [ACCOUNT_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_ACCOUNT_IDF__4BED01A2] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ACCOUNT_TRANSACTIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ACNT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [MODIFICATION_IDF] VARCHAR(64),
  [AMOUNT] MONEY NOT NULL,
  [PAYMENT_STATUS] VARCHAR(16),
  [PAYMENT_TYPE] VARCHAR(64),
  [TRANSACTION_TIME] DATETIME NOT NULL,
  [TRANSACTION_TYPE] VARCHAR(64) NOT NULL,
  [DATE_PAYMENT_RECEIVED] DATETIME,
  [PFM_CREDIT_DATE] DATETIME,
  [NITAAC_APPROVED_IDR] BIT,
  [PAYMENT_DATE] DATETIME,
  [STATEMENT_IDF] VARCHAR(64),
  [ORDER_IDF] VARCHAR(64),
  [ORDER_TASK_IDF] VARCHAR(64),
  [INVOICE_IDF] VARCHAR(64),
  [SUPPORT_DOC_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SYM_ACCOUNT_TRAN__50B1B6BF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ADDRESSES] (
  [IDF] VARCHAR(64) DEFAULT 'ADR__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DIRECTION] VARCHAR(128),
  [STREET_ONE] VARCHAR(256),
  [STREET_TWO] VARCHAR(256),
  [STREET_THREE] VARCHAR(128),
  [CITY] VARCHAR(128),
  [STATE_CODE] VARCHAR(16),
  [STATE_PROVINCE] VARCHAR(128),
  [COUNTY] VARCHAR(128),
  [COUNTRY_CODE] VARCHAR(16),
  [COUNTRY] VARCHAR(128),
  [ZIP_POSTAL_CODE] VARCHAR(16),
  [ZIP_EXTENSION_CODE] VARCHAR(16),
  [INTERNATIONAL_CODE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_ADDRESSES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ANNOUNCEMENT] (
  [IDF] VARCHAR(64) DEFAULT 'ANNO_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [LINK_URL] VARCHAR(256),
  [PURGE_TIME] DATETIME,
  [ACTION_TIME] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [MESSAGE_IDF] VARCHAR(64) NOT NULL,
  [NOTIFICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_ANNOUNCEMENT__5C23696B] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[APPLICATION_CONTENTS] (
  [IDF] VARCHAR(64) DEFAULT 'APPC_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PRIMARY_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [DOMAIN_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_APPLICATION_CONTENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[APPLICATION_DOMAINS] (
  [IDF] VARCHAR(64) DEFAULT 'APPD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  CONSTRAINT [PK_APPLICATION_DOMAINS] PRIMARY KEY ([IDF], [APPLICATION_IDF])
)
GO

CREATE TABLE [dbo].[APPLICATION_RELEASES] (
  [IDF] VARCHAR(64) DEFAULT 'APPR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [PLAN_DATE] DATETIME,
  [RELEASED_DATE] DATETIME,
  [RELEASED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_APPLICATION_RELEASES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[APPLICATION_ROLES] (
  [ROLE_IDF] VARCHAR(64) DEFAULT 'ROLE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) DEFAULT 'ROLE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME DEFAULT GetDate(),
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  CONSTRAINT [PK_APPLICATION_ROLES] PRIMARY KEY ([ROLE_IDF], [APPLICATION_IDF])
)
GO

CREATE TABLE [dbo].[APPLICATION_USERS] (
  [USER_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [ACCESS_MAP_IDR] BIT DEFAULT 1,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  CONSTRAINT [PK_APPLICATION_USERS] PRIMARY KEY ([USER_IDF], [APPLICATION_IDF])
)
GO

CREATE TABLE [dbo].[APX_USER_EXT] (
  [ID] NUMERIC(19) NOT NULL,
  [CREATED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [CREATED_WHEN] DATETIME NOT NULL,
  [MODIFIED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [MODIFIED_WHEN] DATETIME NOT NULL,
  [VERSION] INT NOT NULL,
  [BAD_PASSWORD_COUNT] INT,
  [DESCRIPTION] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [HASH] VARCHAR(255),
  [LAST_ACCESS] DATETIME,
  [PASSWORD] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [PASSWORD_EXPIRATION] DATETIME,
  [RESET] INT NOT NULL,
  [SECRET_ANSWER] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [SECRET_QUESTION] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [STATUS] INT NOT NULL,
  [TYPE] INT,
  [USERNAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [SESSION_ID] VARCHAR(75) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [IP_ADDRESS] VARCHAR(20),
  [USER_AGENT] VARCHAR(1024) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [DAILY_LOGIN_COUNT] INT NOT NULL,
  [LAST_SUCCESSFUL_LOGIN] DATETIME,
  [ROB_ACK] DATETIME,
  [ROB_EXPIRATION] DATETIME,
  [IDX] INT,
  [IDF] VARCHAR(64),
  [ID_EMAIL] VARCHAR(255),
  PRIMARY KEY ([ID])
)
GO

CREATE TABLE [dbo].[AUDIT_LOGS] (
  [IDF] VARCHAR(64) DEFAULT 'AUDL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TITLE] VARCHAR(256),
  [SUBJECT] VARCHAR(256),
  [MESSAGE] VARCHAR(2048),
  [NOTIFICATIiON_IDR] BIT,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [MESSAGE_IDF] VARCHAR(64),
  CONSTRAINT [PK_AUDIT_LOGS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARD_DELIVERABLES] (
  [IDF] VARCHAR(64) DEFAULT 'ADLV_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PAID_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [NOTIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [DUE_DATE] DATETIME,
  [SUBMITTED_DATE] DATETIME,
  [SUBMITTED_BY] VARCHAR(128),
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [REJECTED_DATE] DATETIME,
  [REJECTED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [AWARD_PERIOD_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [COTR_IDF] VARCHAR(64) NOT NULL,
  [COTR_ALT_IDF] VARCHAR(64),
  [NOTIFICATION_IDF] VARCHAR(64),
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_AWARD_DELIVERABLES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARD_DELIVERIES] (
  [IDF] VARCHAR(64) DEFAULT 'ADLV_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [ADDRESS_IDF] VARCHAR(64),
  [TELECOM_ADDRESS_IDF] VARCHAR(64),
  [POC_IDF] VARCHAR(64),
  [POC_NAME_CODE] VARCHAR(128),
  [SHIPPING_HANDING] MONEY,
  [TAX_AMOUNT] MONEY DEFAULT 0,
  [TAX_IDR] BIT DEFAULT 0,
  [EXTENDED_PRICE] MONEY,
  [EXTENDED_TAX] MONEY,
  [EXTENDED_DELIVERY] VARCHAR(128),
  [SUPPORT_NOTE_TEXT] VARCHAR(MAX),
  [REVISION_IDR] BIT,
  [CERTIFIED_IDR] BIT DEFAULT 1,
  [SUBMITTED_IDR] BIT,
  [DIRECTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DELIVERY_DAYS_AFTER] INT,
  [DELIVERY_START_DATE] DATETIME,
  [DELIVERY_END_DATE] DATETIME,
  [LAST_DELIVERY_IDR] BIT DEFAULT 1,
  [EXPEDITE_IDR] BIT,
  [DOCUMENT_IDR] BIT DEFAULT 0,
  [DOCUMENT_IDF] VARCHAR(64),
  [POSITION_ORDER] INT DEFAULT 1,
  [DELIVERY_ITEM_COUNT] INT DEFAULT 1 NOT NULL,
  [FULL_DELIVERY_IDR] BIT DEFAULT 1,
  [PERCENT_TO_DELIVERY] FLOAT,
  [TOTAL_DELIVERY_NUMBER] INT DEFAULT 1,
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PROVIDER_NAME_CODE] VARCHAR(256),
  [PROVIDER_IDF] VARCHAR(64),
  [ALT_PROVIDER_NAME_CODE] VARCHAR(256),
  [ALT_PROVIDER_IDF] VARCHAR(64),
  [WEIGHT] FLOAT,
  [WEIGHT_UOM] VARCHAR(16) DEFAULT 'POUND',
  [WEIGHT_DESCRIPTION] VARCHAR(256),
  [SIZE_HEIGHT] FLOAT,
  [SIZE_WIDTH] FLOAT,
  [SIZE_LENGTH] FLOAT,
  [SIZE_UOM] VARCHAR(16) DEFAULT 'INCH',
  [SIZE_DESCRIPTION] VARCHAR(256),
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [SUBMITTER_IDF] VARCHAR(64),
  [SUBMITTER_NAME_CODE] VARCHAR(128),
  CONSTRAINT [PK_AWARD_DELIVERIES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARD_FINANCES] (
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [AWARD_AMOUNT] MONEY DEFAULT 0.0,
  [AWARD_UOM] VARCHAR(16) DEFAULT 'K',
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERIFICATION_IDR] BIT,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [AWARD_PERIOD_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [FEE_TYPE_CODE] VARCHAR(16),
  [FEE_RATE] FLOAT,
  [FEE_CALCULATED] MONEY,
  [FEE] MONEY,
  [FEE_OVERRIDE_IDR] BIT DEFAULT 0,
  [FEE_OVERRIDE_REASON] VARCHAR(256),
  CONSTRAINT [PK_AWARD_FINANCES] PRIMARY KEY ([AWARD_IDF], [ORDER_IDF], [PROPOSAL_IDF])
)
GO

CREATE TABLE [dbo].[AWARD_GSS_CLIN_OPTIONS] (
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [OS_CODE] VARCHAR(64),
  [RAM_CODE] VARCHAR(64),
  [HARD_DRIVE_CODE] VARCHAR(64),
  [DISPLAY_CODE] VARCHAR(64),
  [DOCKING_STATION_CODE] VARCHAR(64),
  [BLUETOOTH_CODE] VARCHAR(64),
  [PLATFORM_INTEGRITY_CODE] VARCHAR(64),
  [WEIGHT_CODE] VARCHAR(64),
  [SIZE_CODE] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  CONSTRAINT [PK_AWARD_GSS_CLIN_OPTIONS] PRIMARY KEY ([CLIN_IDF], [AWARD_IDF], [PROPOSAL_IDF])
)
GO

CREATE TABLE [dbo].[AWARD_MODIFICATION_APPLIED] (
  [IDF] VARCHAR(64) DEFAULT 'AWDM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [ORDER_MODIFCATION_IDF] VARCHAR(64),
  [POP_CEILING_AMOUNT] MONEY,
  [CURRENTLY_FUNDED] MONEY,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744 NOT NULL,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [IX_AWARD_MODIFICATION_APPLIED1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARD_MODIFICATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ORDM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  [PO_NUMBER] VARCHAR(256) NOT NULL,
  [MOD_NUMBER] INT NOT NULL,
  [CHANGES_AWARD_DETAILS_IDR] BIT,
  [CHANGES_FUNDING_AMOUNT_IDR] BIT,
  [EXERCISES_OPTION_PERIOD_IDR] BIT,
  [FUNDING_AMOUNT_WITH_FEE] MONEY NOT NULL,
  [CURRENT_FUNDED_AMOUNT] MONEY NOT NULL,
  [MODIFICATION_DATE] DATETIME,
  [MODIFICATION_TYPE] VARCHAR(64) NOT NULL,
  [AWARDED_IDR] BIT DEFAULT 0,
  [RECEIVED_DATE] DATETIME,
  [RECEIVED_BY] VARCHAR(128),
  [SHOPPING_REPORTED_IDR] BIT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [INVOICE_GENERATED_IRD] BIT,
  [NEW_FUNDING_AMOUNT_WITH_FEE] MONEY,
  [REJECT_REASON] VARCHAR(255),
  [REJECT_NOTE_TEXT] VARCHAR(2048),
  [REJECTED_DATE] DATETIME,
  [REJECTED_BY] VARCHAR(128),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [ORDER_IDF] VARCHAR(64),
  [PROPOSAL_IDF] VARCHAR(64),
  [AWARD_PERIOD_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64),
  CONSTRAINT [PK_MODIFICATION__3C75B3E8] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARD_PAYMENTS] (
  [PAYMENT_IDF] VARCHAR(64) NOT NULL,
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [AMOUNT_APPLIED] MONEY,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLIED_DATE] DATETIME,
  [APPLIED_BY] VARCHAR(128),
  [INVOICE_IDF] VARCHAR(64) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64),
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_AWARD_PAYMENTS] PRIMARY KEY ([PAYMENT_IDF], [AWARD_IDF])
)
GO

CREATE TABLE [dbo].[AWARD_PERIODS] (
  [IDF] VARCHAR(64) DEFAULT 'AWDP_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [AMOUNT] MONEY,
  [POP_CEILING_AMOUNT] MONEY,
  [AMOUNT_WITH_FEE] MONEY NOT NULL,
  [IMPOSED_FEE] MONEY,
  [ORDINAL] INT NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_AWARD_PERIOD__702A6218] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[AWARDED_CLINS] (
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [QUOTE_TYPE] VARCHAR(16),
  [QUOTE_PRICE] MONEY,
  [DISCOUNT] NUMERIC(5,2),
  [DISCOUNT_PRICE] MONEY,
  [QUANTITY] INT,
  [TOTAL_AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(64),
  [CSR_APPROVED_PRICE_IDR] BIT DEFAULT 1,
  [PRODUCT_DESCRIPTION] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_AWARDED_CLINS] PRIMARY KEY ([AWARD_IDF], [PROPOSAL_IDF], [CLIN_IDF])
)
GO

CREATE TABLE [dbo].[AWARDED_PROPOSALS] (
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_NOTE_TEXT] VARCHAR(2048),
  [AUTH_NUMBER] VARCHAR(64),
  [AUTH_NUMBER_AWARD] VARCHAR(128),
  [AMOUNT_UOM] VARCHAR(8) DEFAULT 'USD',
  [TOTAL_AMOUNT] MONEY,
  [TOTAL_AWARD_CEILING] MONEY,
  [DELVERY_TYPE] VARCHAR(16),
  [DELVERY_DATE] DATETIME,
  [DELVERY_DAYS] SMALLINT,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [AWARDER_IDF] VARCHAR(64) NOT NULL,
  [AWARD_SUBMITTER_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [AWARD_JUSTIFICATION] VARCHAR(256),
  [AWARD_JUSTIFICATION_FILE] VARCHAR(512),
  [BRAND_NAME] INT,
  [FO_EXCEPTION] INT,
  [FEE] MONEY,
  [FEE_CALCULATED] MONEY,
  [FEE_OVERRIDE] INT NOT NULL,
  [FEE_TYPE] INT NOT NULL,
  [FO] INT,
  [FO_REASON] VARCHAR(1024),
  [NOTE_TEXT] VARCHAR(2048),
  [LAST_ACTIVE_STATUS] INT NOT NULL,
  [LOTS] INT,
  [PBC] INT,
  [PBC_JUSTIFICATION] VARCHAR(256),
  [PO_NUMBER] VARCHAR(128),
  [SOURCE_EXCLUDED_IDR] BIT DEFAULT 0,
  [SOURCE_EXCLUDED_CERTIFIED_IDR] BIT DEFAULT 0,
  [VERIFY_TM_FLAG] INT,
  [ASSISTED_ORG_IDF] VARCHAR(64),
  [SOLE_IDF] VARCHAR(64),
  CONSTRAINT [PK_AWARDED_PROPOSALS] PRIMARY KEY ([AWARD_IDF], [PROPOSAL_IDF])
)
GO

CREATE TABLE [dbo].[AWARDS] (
  [IDF] VARCHAR(64) DEFAULT 'AWDX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [AWARDER_IDF] VARCHAR(64) NOT NULL,
  [AWARD_APPROVER_IDF] VARCHAR(64) NOT NULL,
  [AWARD_SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  [ASSISTED_ORG_IDF] VARCHAR(64),
  [CUSTOMER_NOTE_TEXT] VARCHAR(2048),
  [CANCEL_TYPE] VARCHAR(16),
  [CANCEL_REASON] VARCHAR(2048),
  [AUTH_NUMBER] VARCHAR(64),
  [AUTH_NUMBER_AWARD] VARCHAR(128),
  [AMOUNT_UOM] VARCHAR(8) DEFAULT 'USD',
  [TOTAL_AMOUNT] MONEY,
  [TOTAL_AWARD_CEILING] MONEY,
  [DELVERY_TYPE] VARCHAR(16),
  [DELVERY_DATE] DATETIME,
  [DELVERY_DAYS] SMALLINT,
  [VALUE_CODE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BRAND_NAME] INT,
  [FO_EXCEPTION] INT,
  [FEE] MONEY,
  [FEE_CALCULATED] MONEY,
  [FEE_OVERRIDE] INT NOT NULL,
  [FEE_TYPE] INT NOT NULL,
  [FO] INT,
  [FO_REASON] VARCHAR(1024),
  [NOTE_TEXT] VARCHAR(2048),
  [LAST_ACTIVE_STATUS] INT NOT NULL,
  [LOT_ARAE] VARCHAR(64),
  [PO_NUMBER] VARCHAR(128),
  [SOURCE_EXCLUDED_IDR] BIT DEFAULT 0,
  [SOURCE_EXCLUDED_CERTIFIED_IDR] BIT DEFAULT 0,
  [VERIFY_TM_IDR] BIT,
  [SOLE_IDR] BIT DEFAULT 0,
  [AWARD_TYPE] VARCHAR(16),
  [AWARD_JUSTIFICATION] VARCHAR(1024),
  [AWARD_JUSTIFICATION_FILE] VARCHAR(512),
  [AWARD_NOTE_TEXT] VARCHAR(MAX),
  [NOTIFIED_IDR] INT,
  [EVALUATION_CRITERIA_TYPE] VARCHAR(64),
  [PBC] INT,
  [PBC_JUSTIFICATION] VARCHAR(1024),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_AWARDS_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CLIN_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'CLND_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [URL] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CLIN_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_ACTIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ACTN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [FROM_STATUS] INT,
  [TO_STATUS] INT,
  [SUBJECT_TEMPLATE] VARCHAR(256),
  [NOTIFICATION_TYPE] VARCHAR(64),
  [TEXT_TEMPLATE] VARCHAR(256),
  [COMPLETED_FROM_STATUS] INT,
  [COMPLETED_TO_STATUS] INT,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SYM_ACTION_ITEM__55766BDC] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_ACTIVITIES] (
  [IDF] VARCHAR(64) DEFAULT 'ACTY_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_ACTIVITIES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_APPLICATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'APPX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [URL] VARCHAR(256),
  [ADMIN_URL] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(16),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  CONSTRAINT [PK_CODE_APPLICATIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_CATEGORY_TYPES] (
  [IDF] VARCHAR(64) DEFAULT 'CATY_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [MASK_VALUE] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_CATEGORY_TYPES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_ERRORS] (
  [IDF] VARCHAR(64) DEFAULT 'ERR__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [SEVERITY_CODE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_ERRORS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_EVENTS] (
  [IDF] VARCHAR(64) DEFAULT 'EVNT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_EVENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_GROUPS] (
  [IDF] VARCHAR(64) DEFAULT 'GRP__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [VALUE_CODE] VARCHAR(16),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [POSITION_ORDER] INT,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_GROUPS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_HOLIDAYS] (
  [IDF] VARCHAR(64) DEFAULT 'HLDY_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [COUNTRY_IDF] VARCHAR(64) NOT NULL,
  [STATE_PROVINCE_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [FIXED_IDR] BIT DEFAULT 0,
  [OFFSET_DAY] INT DEFAULT 0,
  [VALUE_CODE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CODE_HOLIDAYS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_MESSAGES] (
  [IDF] VARCHAR(64) DEFAULT 'MSGX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [DELIVERY_CODE] VARCHAR(16) DEFAULT 'EMAIL',
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL',
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [NOTIFICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_MESSAGES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_NOTIFICATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'NOTN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [DELIVERY_CODE] VARCHAR(16) DEFAULT 'EMAIL',
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL',
  [NAME_CODE] VARCHAR(128),
  [NOTE_TEXT] VARCHAR(2048),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [FROM_STATE] VARCHAR(16),
  [TO_STATE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [DOCUMENT_IDR] BIT DEFAULT 0,
  CONSTRAINT [PK_CODE_NOTIFICATIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_ORDERS] (
  [IDF] VARCHAR(64) DEFAULT 'ORDR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_CODE_ORDERS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_REGISTRATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'REGX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CLASS_CODE] VARCHAR(16),
  [DB_ID] BIGINT,
  [DB_PARENT_ID] BIGINT,
  [AUDIT_IDR] BIT DEFAULT 1,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CODE_REGISTRATIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_REPORTS] (
  [IDF] VARCHAR(64) DEFAULT 'RPTX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [TEMPLATE_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_REPORTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_REQUESTS] (
  [IDF] VARCHAR(64) DEFAULT 'RQST_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_REQUESTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_ROLES] (
  [IDF] VARCHAR(64) DEFAULT 'ROLE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [ACCESS_DISCRETION_CODE] VARCHAR(16),
  [ACCESS_MAP_IDR] BIT DEFAULT 1,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_ROLES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_SCHEDULERS] (
  [IDF] VARCHAR(64) DEFAULT 'SCHR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [REQUIRED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_SCHEDULERS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_TASKS] (
  [IDF] VARCHAR(64) DEFAULT 'TASK_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_TASKS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_TEMPLATES] (
  [IDF] VARCHAR(64) DEFAULT 'TMPL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_TEMPLATES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_VALUESETS] (
  [IDF] VARCHAR(64) DEFAULT 'VST__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [VALUE_STRING] VARCHAR(256),
  [VALUE_NUMBER] NUMERIC,
  [VALUE_INTEGER] INT,
  [VALUE_MONEY] MONEY,
  [VALUE_NOTE] VARCHAR(MAX),
  [VALUE_IMAGE] IMAGE,
  [VALUE_UOM] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [REQUIRED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CODE_VALUESETS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CODE_WOKRFLOWS] (
  [IDF] VARCHAR(64) DEFAULT 'WKFX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_CODE_WOKRFLOWS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CONTACT_ADDRESSES] (
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  [ADDRESS_IDF] VARCHAR(64) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [USAGE_CODE] VARCHAR(16),
  [DIRECTION] VARCHAR(256),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [PREFERRED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CONTACT_ADDRESSES] PRIMARY KEY ([CONTACT_IDF], [ADDRESS_IDF])
)
GO

CREATE TABLE [dbo].[CONTACT_TELECOM_ADDRESSES] (
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  [TELECOM_ADDRESS_IDF] VARCHAR(64) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [USAGE_CODE] VARCHAR(16),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [PREFERRED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CONTACT_TELECOM_ADDRESSES] PRIMARY KEY ([CONTACT_IDF], [TELECOM_ADDRESS_IDF])
)
GO

CREATE TABLE [dbo].[CONTACTS] (
  [IDF] VARCHAR(64) DEFAULT 'CNTA_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [USAGE_CODE] VARCHAR(16),
  [OWNR_INFO] VARCHAR(256),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [PREFERRED_IDR] BIT DEFAULT 0,
  [DEFAULT_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [OWNER_TYPE] VARCHAR(16),
  CONSTRAINT [PK_CONTACTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CONTRACT_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'CRTD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [COMPANY] VARCHAR(256) NOT NULL,
  [TRP_PREFIX] VARCHAR(32) NOT NULL,
  [LAST_TRP_NO] SMALLINT,
  [URL] VARCHAR(256),
  [URL_DOMAIN] VARCHAR(128),
  [BUSINESS_SIZE] VARCHAR(8),
  [EMPLOYEE_NO] INT,
  [PHONE] VARCHAR(16),
  [FAX] VARCHAR(16),
  [EMAIL] VARCHAR(256),
  [PMO_IDF] VARCHAR(64),
  [PMO_TITLE] VARCHAR(256),
  [SIC] VARCHAR(16),
  [SDB_IDR] BIT,
  [EGTa_IDR] BIT,
  [SM_IDR] BIT,
  [WO_IDR] BIT,
  [L_IDR] BIT,
  [OT_IDR] BIT,
  [HubZone_IDR] BIT,
  [SWaM_IDR] BIT,
  [STATUS_DATE] DATETIME,
  [PIID_SUBSTITUTE] VARCHAR(64),
  [PIID] VARCHAR(64),
  [VO_IDR] BIT,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ACRONYM_NAME] VARCHAR(8),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  CONSTRAINT [PK_CONTRACT_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CONTRACT_QUALIFIED_AERAS] (
  [IDF] VARCHAR(64) DEFAULT 'QUAL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [MASK_VALUE] INT DEFAULT 0,
  [SOURCE] VARCHAR(256),
  [SOURCE_CODE] VARCHAR(16),
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_CONTRACT_QUALIFIED_AERAS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[CONTRACTOR_ACCOUNTS] (
  [IDF] VARCHAR(64) DEFAULT 'CRTA_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [CURRENT_BALANCE] MONEY DEFAULT 0.0,
  [LATE_PAYMENT_IDR] BIT,
  [AUTO_PAYMENT_IDR] BIT,
  [NOTIFICATION_COUNT] INT,
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_CONTRACTOR_ACCOUNTS] PRIMARY KEY ([IDF], [CONTRACTOR_IDF])
)
GO

CREATE TABLE [dbo].[CONTRACTS] (
  [IDF] VARCHAR(64) DEFAULT 'CTRC_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [PMO_IDF] VARCHAR(64),
  [CAO_IDF] VARCHAR(64),
  [CMO_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [CONTRACT_EXTENSION_IDF] NCHAR(64),
  [CONTRACT_NO] VARCHAR(64) NOT NULL,
  [CONTRACT_URL] VARCHAR(256),
  [OTHER_CONTRACT_NO] VARCHAR(64),
  [EMAIL_ADDRESS] VARCHAR(256),
  [MAX_ORDER_END_DATE] DATETIME,
  [QUALIFIED_AREA_MASKED_IDR] BIGINT NOT NULL,
  [SBA_MASKED_IDR] BIGINT,
  [OEM_IDR] BIT DEFAULT 0,
  [VALUE_CODE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128) NOT NULL,
  [ACRONYM_NAME] VARCHAR(8),
  [DESCRIPTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [EXTENSION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_NUMBER] INT DEFAULT 1,
  [NEXT_PROPOSAL_NUMBER] INT DEFAULT 1,
  [LAST_PROPOSAL_NUMBER] INT DEFAULT 1,
  [BUSINESS_SIZE] VARCHAR(128),
  [SET_ASIDE_TYPE] VARCHAR(16),
  [FCL_LEVEL] VARCHAR(128),
  [TEAM] VARCHAR(2048),
  [CERTIFIED_DATE] DATETIME DEFAULT 128,
  [CERTIFIED_BY] VARCHAR(128),
  [CERTIFIED_PERIOD] VARCHAR(16),
  [LOCKED_DATE] DATETIME,
  [LOCK_EXPIRED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  CONSTRAINT [PK_CONTRACT_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[DOCUMENT_LOCATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'DOCL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(256),
  [FILE_LOCATION] VARCHAR(1024),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__TRP_UPLO__3214EC2716F3ED88] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[DOCUMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'DOCX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TITLE] VARCHAR(256),
  [REQUIRED_IDR] BIT,
  [HIDDEN_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [FORMAT] VARCHAR(16),
  [CONTENT_TYPE_CODE] VARCHAR(16),
  [BODY_TEXT] VARCHAR(MAX),
  [NOTE_TEXT] VARCHAR(2048),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPLOADED_DATE] DATETIME,
  [SUBMITTED_DATE] DATETIME,
  [SUBMITTED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [SUBMITTER_TYPE_CODE] VARCHAR(16),
  [SPONSOR_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [OWNER_CODE] VARCHAR(16) NOT NULL,
  CONSTRAINT [PK__DOCUMENT] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[FEDERAL_ORGANIZATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ORGFC'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CLASS] INT,
  [VALUE_CODE] VARCHAR(32),
  [NAME_CODE] VARCHAR(256),
  [ASSOCIATED_NAME] VARCHAR(256),
  [ACRONYM_NAME] VARCHAR(16),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [INTERNET_DOMAIN] VARCHAR(256),
  [DESCRIPTION] VARCHAR(256),
  [LEVEL_DEPTH] INT,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDATE(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT getdate(),
  [CREATED_BY] VARCHAR(128) DEFAULT suser_name(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [LEVEL_I_NAME] VARCHAR(255),
  [LEVEL_II_NAME] VARCHAR(255),
  [LEVEL_III_NAME] VARCHAR(1024),
  [LEVEL_IV_NAME] VARCHAR(512),
  [LEVEL_I_IDF] VARCHAR(64),
  [LEVEL_II_IDF] VARCHAR(64),
  [LEVEL_III_IDF] VARCHAR(64),
  [LEVEL_IV_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [NOTE_TEXT] VARCHAR(2048),
  CONSTRAINT [PK_FEDERAL_ORGANIZATIONS_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[FINAL_CHECKLISTS] (
  [IDF] VARCHAR(64) DEFAULT 'CLST_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [FAR_4804_4] INT NOT NULL,
  [FAR_4804_5] INT NOT NULL,
  [IN_DCIS] INT NOT NULL,
  [PAST_PERF_COMPLETE] INT NOT NULL,
  [POP_ENDED] INT NOT NULL,
  [RECONCILED_FEE] INT NOT NULL,
  [RX_CHECK_COPY] INT NOT NULL,
  [RX_FEE_PAYMENT] INT NOT NULL,
  [RX_FINAL_INV_CONT] INT NOT NULL,
  [RX_FINAL_INV_CUST] INT NOT NULL,
  [RX_FUNDING_DOC] INT NOT NULL,
  [RX_SALES_REPORTS] INT NOT NULL,
  [ORDER_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PERFORMER_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_FINAL_CHECKL__1EE55101] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[GROUP_ACTIONS] (
  [ACTION_IDF] VARCHAR(64) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_ACTIONS] PRIMARY KEY ([ACTION_IDF], [GROUP_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_ACTIVITIES] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [ACTIVITY_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_ACTIVITIES] PRIMARY KEY ([ACTIVITY_IDF], [GROUP_IDF])
)
GO

CREATE TABLE [dbo].[GROUP_CONTRACTS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_GROUP_CONTRACTS] PRIMARY KEY ([GROUP_IDF], [CONTRACT_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_DOCUMENTS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_DOCUMENTS] PRIMARY KEY ([GROUP_IDF], [DOCUMENT_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_EVENTS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [EVENT_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_EVENTS] PRIMARY KEY ([GROUP_IDF], [EVENT_IDF])
)
GO

CREATE TABLE [dbo].[GROUP_ITEMS] (
  [ITEM_IDF] VARCHAR(64) DEFAULT 'ITEX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ITEM_CODE] VARCHAR(16) NOT NULL,
  [PREVIOUS_ITEM_IDF] VARCHAR(64),
  [NEXT_ITEM_IDF] VARCHAR(64),
  CONSTRAINT [PK_GROUP_ITEMS] PRIMARY KEY ([ITEM_IDF], [GROUP_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_LOOKUP_ITEMS] (
  [IDF] VARCHAR(64) NOT NULL,
  [LOOKUP_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [EXT_ID] NUMERIC(19),
  [GROUP_VALUE] VARCHAR(126) NOT NULL,
  [USED_FOR] VARCHAR(64),
  [APPLICATION] VARCHAR(128),
  [FLAG] SMALLINT NOT NULL,
  [OWNER_IDF] VARCHAR(64),
  [SOURCE] VARCHAR(128),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_GROUP_LOOKUP_ITEMS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[GROUP_MEMBERS] (
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [MEMBER_VALUE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(64),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [SOURCE] VARCHAR(128),
  [DEFAULT_VALUE] VARCHAR(128),
  [INT_VALUE] SMALLINT,
  [VALUE_CODE] VARCHAR(32),
  CONSTRAINT [PK_GROUP_MEMBERS] PRIMARY KEY ([OWNER_IDF], [GROUP_IDF])
)
GO

CREATE TABLE [dbo].[GROUP_MESSAGES] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [MESSAGE_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(32),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_MESSAGES] PRIMARY KEY ([GROUP_IDF], [MESSAGE_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_NODES] (
  [NODE_IDF] VARCHAR(64) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [FIRST_NODE_IDF] VARCHAR(64),
  [LAST_NODE_IDF] VARCHAR(64),
  CONSTRAINT [PK_GROUP_NODES] PRIMARY KEY ([GROUP_IDF], [NODE_IDF])
)
GO

CREATE TABLE [dbo].[GROUP_NOTIFICATIONS] (
  [NOTIFICATION_IDF] VARCHAR(64) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [IX_GROUP_NOTIFICATIONS1] PRIMARY KEY ([NOTIFICATION_IDF], [GROUP_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_ORGANIZATIONS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [ORGANIZATION_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [REFERENCE_ID] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] INT DEFAULT 744,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [POSITION_ORDER] INT,
  CONSTRAINT [PK_GROUP_ORGANIZATIONS] PRIMARY KEY ([GROUP_IDF], [ORGANIZATION_IDF], [CATEGORY_CODE], [TYPE_CODE], [REFERENCE_ID])
)
GO

CREATE TABLE [dbo].[GROUP_PERSONS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [PERSON_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [REFERENCE_ID] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_PERSONS] PRIMARY KEY ([GROUP_IDF], [PERSON_IDF], [CATEGORY_CODE], [TYPE_CODE], [REFERENCE_ID])
)
GO

CREATE TABLE [dbo].[GROUP_REPORTS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [REPORT_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_REPORTS] PRIMARY KEY ([GROUP_IDF], [REPORT_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_ROLES] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [ROLE_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_ROLES] PRIMARY KEY ([GROUP_IDF], [ROLE_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_TASKS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_TASKS] PRIMARY KEY ([GROUP_IDF], [TASK_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_TELECOM_ADDRESSES] (
  [TELECOM_IDF] VARCHAR(64) NOT NULL,
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME DEFAULT GetDate(),
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_TELECOM_ADDRESSES] PRIMARY KEY ([TELECOM_IDF], [GROUP_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_USERS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_USERS] PRIMARY KEY ([GROUP_IDF], [USER_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_VALUESETS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [VALUE_IDF] VARCHAR(64) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16) NOT NULL,
  [TYPE_CODE] VARCHAR(16) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_VALUESETS] PRIMARY KEY ([GROUP_IDF], [VALUE_IDF], [CATEGORY_CODE], [TYPE_CODE])
)
GO

CREATE TABLE [dbo].[GROUP_WORKFLOWS] (
  [GROUP_IDF] VARCHAR(64) NOT NULL,
  [WORKFLOW_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_GROUP_WORKFLOWS] PRIMARY KEY ([GROUP_IDF], [WORKFLOW_IDF])
)
GO

CREATE TABLE [dbo].[GSS_SOLUTION_CLINS] (
  [IDF] VARCHAR(64) DEFAULT 'CLIN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OEM_MFR_NAME] VARCHAR(256),
  [OEM_PART_NUM] VARCHAR(128),
  [ITEM_SPECS] VARCHAR(MAX),
  [OS_SPECS] VARCHAR(256),
  [RAM_SPECS] VARCHAR(256),
  [HARD_DRIVE_SPECS] VARCHAR(256),
  [GRAPHIC_SPECS] VARCHAR(256),
  [DISPLAY_SIZE] VARCHAR(256),
  [DISPLAY_RESOLUTION] VARCHAR(256),
  [SOUND_SPECS] VARCHAR(256),
  [SPEAKER_SPECS] VARCHAR(256),
  [OPTICAL_DRIVE_SPECS] VARCHAR(MAX),
  [KEYBOARD_SPECS] VARCHAR(512),
  [MOUSE_SPECS] VARCHAR(64),
  [WEBCAM_SPECS] VARCHAR(256),
  [MICROPHONE_SPECS] VARCHAR(256),
  [BLUETOOTH_SPECS] VARCHAR(256),
  [SMART_CARD_READER_SPECS] VARCHAR(256),
  [NETWORK_INTERFACE_SPECS] VARCHAR(512),
  [PORT_SPECS] VARCHAR(512),
  [EXPANSION_SLOTS] VARCHAR(512),
  [DELIVERY_TIME] DATETIME,
  [WEIGHT] VARCHAR(128),
  [PLATFORM_INTEGRITY_SPECS] VARCHAR(512),
  [EPEAT_COMPLIANT_IDR] BIT DEFAULT 0,
  [ENERGY_STAR_COMPLIANT_IDR] BIT DEFAULT 0,
  [TAA_COMPLIANT_IDR] BIT DEFAULT 0,
  [ACT_508_COMPLIANT_IDR] BIT DEFAULT 0,
  [WARRANTY] VARCHAR(256),
  [OEM_SPECIFICATION_LINK] VARCHAR(256),
  [PICTURE_FILENAME] VARCHAR(256),
  [NITAAC_PARENT_CLIN] VARCHAR(64),
  [YEAR1_GOVERNMENT_QUANTITY] INT,
  [CATALOG_UNIT_PRICE] MONEY,
  [DISCOUNT_PERCENTAGE] NUMERIC(15),
  [DISCOUNT_RATE] NUMERIC(15),
  [DISCOUNTED_UNIT_PRICE] MONEY,
  [DISCOUNTED_EXTENDED_PRICE] MONEY,
  [CONFIGURATION_TYPE_CODE] VARCHAR(16),
  [CONFIGURATION_SUBTYPE_CODE] VARCHAR(64),
  [ACTIVE_IDR] BIT DEFAULT 1,
  [NAME_CODE] VARCHAR(128) NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [IX_GSS_SOLUTION_CLINS1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[HOLIDAYS] (
  [IDF] VARCHAR(64) DEFAULT 'OHLY_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [HOLIDAY_YEAR] INT,
  [HOLIDAY_MONTH] INT,
  [HOLIDAY_DAY] INT,
  [HOLIDAY_DATE] DATETIME,
  [FIXED_IDR] BIT DEFAULT 0,
  [OFFSET_DAY] INT DEFAULT 0,
  [ACRONYM_NAME] VARCHAR(8),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_HOLIDAYS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[INVOICES] (
  [IDF] VARCHAR(64) DEFAULT 'INVX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [SUPPORT_DOC_IDF] VARCHAR(64),
  [BALANCE_DUE_AMOUNT] MONEY,
  [DUE_DATE] DATETIME,
  [PAID_IDR] BIT DEFAULT 0,
  [PAID_DATE] DATETIME,
  [SENT_DATE] DATETIME,
  [PAID_AMOUNT] MONEY,
  [LATE_NOTICE_DATE] DATETIME,
  [LATE_NOTICE_COUNT] INT,
  [NITAAC_APPROVED_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [AWARD_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_INVOICE__2E279491] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[KNOWLEDGE_BASE] (
  [IDF] VARCHAR(64) DEFAULT 'KBBX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_KNOWLEDGE_BASE] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[KNOWLEDGE_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'DTLK_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [KNOWLEDGE_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_KNOWLEDGE_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[KNOWLEDGES] (
  [IDF] VARCHAR(64) DEFAULT 'KBCX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [RENEWAL_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [SUBMITTED_DATE] DATETIME,
  [SUBMITTED__BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_KNOWLEDGES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[MASTER_PAYMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'PAYM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ACCOUNT_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CHECK_NUMBER] VARCHAR(64),
  [AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(16) DEFAULT 'USD',
  [AMOUNT_APPLIED] MONEY,
  [AMOUNT_BALANCE] MONEY,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_MASTER_PAYMENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[MESSAGE_DOCUMENTS] (
  [DOCUMENT_IDF] VARCHAR(64) NOT NULL,
  [MESSAGE_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [NOTIFICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_MESSAGE_DOCUMENTS] PRIMARY KEY ([DOCUMENT_IDF], [MESSAGE_IDF])
)
GO

CREATE TABLE [dbo].[METADATA_DEFINITION] (
  [IDF] VARCHAR(64) DEFAULT 'MTDD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_IDF] VARCHAR(64),
  [OWNER_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(128),
  [REFERENCE_NAME] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(1024),
  [KEY_WORDS] VARCHAR(1024) DEFAULT ';;',
  [LOCATION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_METADATA_DEFINITION] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[METADATA_VALUE] (
  [IDF] VARCHAR(64) DEFAULT 'MTDV_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [METADATA_IDF] VARCHAR(64) NOT NULL,
  [VALUE_CODE] VARCHAR(32),
  [VALUE] VARCHAR(256),
  [INT_VALUE] INT,
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(1024),
  [NOTE_CODE] VARCHAR(16),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [POSITION_ORDER] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_METADATA_VALUE] PRIMARY KEY ([IDF], [METADATA_IDF])
)
GO

CREATE TABLE [dbo].[MODIFICATION_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'DTLM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [MODIFICATION_IDF] VARCHAR(64) NOT NULL,
  [AWARD_PERIOD_IDF] VARCHAR(64) NOT NULL,
  [AWARD_AMOUNT] MONEY,
  [NEW_FUNDING] MONEY,
  [EXERCISE_OPTION_IDR] BIT,
  [REVISED_POP_IDR] BIT,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[MONTHLY_INVOICES] (
  [IDF] VARCHAR(64) DEFAULT 'INVC_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [AWARDEE_IDF] VARCHAR(64) NOT NULL,
  [INVOICE_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [pk_id] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[NODE_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'DTLNX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NODE_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_NODE_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[NODE_TASKS] (
  [NODE_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PREVIOUS_IDF] VARCHAR(64),
  CONSTRAINT [PK_NODE_TASKS] PRIMARY KEY ([NODE_IDF], [TASK_IDF])
)
GO

CREATE TABLE [dbo].[NOTE_COMMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'NOTE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [OWNER_CODE] VARCHAR(16) NOT NULL,
  [OWNER_STATUS_CODE] VARCHAR(8),
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [WRITER_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK__NOTE_COMMENTS_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[NOTIFICATION_MESSAGES] (
  [MESSAGE_IDF] VARCHAR(64) NOT NULL,
  [NOTIFICATION_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [SElNT_IDR] BIT DEFAULT 0,
  [ORDER_IDR] BIT DEFAULT 0,
  [ANNOUNCEMENT_IDR] BIT DEFAULT 0,
  [BODY_TEXT] VARCHAR(MAX),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [SUBJECT] VARCHAR(512),
  [MESSAGE_TYPE] VARCHAR(16) DEFAULT 'C_EMAIL' NOT NULL,
  [SENDER] VARCHAR(128),
  [ATTACHMENT_IDR] BIT DEFAULT 0,
  [SEND_TO] VARCHAR(2048) NOT NULL,
  [BLIND_COPY_TO] VARCHAR(2048),
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL' NOT NULL,
  [SCHEDULE_TYPE] VARCHAR(16),
  [SCHEDULE_DATE] VARCHAR(4),
  [SCHEDULE_TIME] VARCHAR(4),
  [FORMAT_CODE] VARCHAR(16),
  [ACTION_START] DATETIME,
  [ACTION_END] DATETIME,
  [ACTION_TIME] DATETIME,
  [ACTION_STATUS] VARCHAR(16) NOT NULL,
  CONSTRAINT [IX_NOTIFICATION_MESSAGES1] PRIMARY KEY ([MESSAGE_IDF], [NOTIFICATION_IDF])
)
GO

CREATE TABLE [dbo].[ORDER_APPROVALS] (
  [IDF] VARCHAR(64) DEFAULT 'APRX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [APPROVER_IDF] VARCHAR(64),
  [ACTION_TIME] DATETIME,
  [APPROVAL_IDR] BIT DEFAULT 0 NOT NULL,
  [APPROVAL_BODY_TEXT] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__APPROVAL__60E81E88] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_CLINS] (
  [ITEM_IDF] VARCHAR(64) DEFAULT 'ITEM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64),
  [CLIN_IDF] VARCHAR(64),
  [PARENT_CLIN_ID] VARCHAR(128),
  [PARENT_CODE] VARCHAR(16),
  [OPTION_IDR] BIT DEFAULT 0,
  [WARRANTY_IDR] BIT DEFAULT 0,
  [BRAND_NAME_JUSTIFICATION_IDR] BIT DEFAULT 0,
  [TAA_IDR] BIT DEFAULT 0,
  [QUANTITY] INT,
  [UNIT_PRICE] MONEY,
  [SUBTOTAL] MONEY,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [IX_ORDER_CLINS_PK] PRIMARY KEY ([ITEM_IDF])
)
GO

CREATE TABLE [dbo].[ORDER_COMPLIANCES] (
  [IDF] VARCHAR(64) DEFAULT 'SCHL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64),
  [IMMEDIATE_RELEASE_IDR] BIT,
  [RELEASE_DATE] DATETIME,
  [RELEASE_STATUS_CODE] VARCHAR(16),
  [RELEASE_STATUS_DATE] DATETIME,
  [RELEASE_NOTE_TEXT] VARCHAR(512),
  [PROPOSAL_START_DATE] DATETIME,
  [PROPOSAL_DEADLINE] DATETIME,
  [PROPOSAL_STATUS_CODE] VARCHAR(8),
  [PROPOSAL_STATUS_DATE] DATETIME,
  [PROPOSAL_NOTE_TEXT] VARCHAR(512),
  [QA_IDR] BIT,
  [QA_START_DATE] DATETIME,
  [QA_DEADLINE] DATETIME,
  [QA_STATUS_CODE] VARCHAR(8),
  [QA_STATUS_DATE] DATETIME,
  [QA_NOTE_TEXT] VARCHAR(512),
  [REVIEWER_ASSIGNED_DATE] DATETIME,
  [ASSIGNMENT_STATUS_CODE] VARCHAR(8),
  [ASSIGNMENT_NOTE_TEXT] VARCHAR(512),
  [REVIEW_START_DATE] DATETIME,
  [REVIEW_DEADLINE] DATETIME,
  [REVIEW_STATUS_CODE] VARCHAR(8),
  [REVIEW_STATUS_DATE] DATETIME,
  [REVIEW_NOTE_TEXT] VARCHAR(512),
  [SELECTION_START_DATE] DATETIME,
  [SELECTION_DEADLINE] DATETIME,
  [SELECTION_STATUS_CODE] VARCHAR(8),
  [SELECTION_STATUS_DATE] DATETIME,
  [SELECTION_NOTE_TEXT] VARCHAR(512),
  [AWARD_START_DATE] DATETIME,
  [AWARD_DEADLINE] DATETIME,
  [AWARD_STATUS_CODE] VARCHAR(8),
  [AWARD_STATUS_DATE] DATETIME,
  [AWARD_NOTE_TEXT] VARCHAR(512),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [AMENDMENT_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [MICROPURCHASE_IDR] BIT DEFAULT 0,
  [INCLUDE_VAR_IDR] BIT DEFAULT 0,
  [INCLUDE_OEM_IDR] BIT DEFAULT 0,
  [TAA_IDR] BIT DEFAULT 0,
  [AUTH_RESELLER_ONLY_IDR] BIT DEFAULT 0,
  [BRAND_NAME_JUSTIFICATION_IDR] BIT,
  [EVALUATION_CRITERIA_TYPE_CODE] VARCHAR(64),
  [EVALUATION_METHOD_CODE] VARCHAR(16),
  [CANCEL_REASON_CODE] VARCHAR(16),
  [CANCEL_REASON] VARCHAR(2048),
  [CONTRACT_TYPE_CODE] VARCHAR(16),
  [OTHER_CONTRACT_DESCRIPTION] VARCHAR(256),
  [INCUMBENT] VARCHAR(128),
  [PROPOSAL_DELIVERY_METHOD_CODE] VARCHAR(16),
  [PROPOSAL_INSTRUCTIONS] VARCHAR(1024),
  [OTHER_INSTRUCTIONS] VARCHAR(1024),
  [REJECTION_MESSAGE] VARCHAR(256),
  [CUSTOMER_COTR_COST_PROPOSALS_VISIBLE_IDR] BIT,
  [EXCLUDE_OTHER_THAN_SMALL_BUSINESS_IDR] BIT,
  [PRE_REVIEWED_IDR] BIT,
  [HEALTH_IT_RELATED_IDR] BIT,
  [OSSO_IDR] BIT,
  [AUTHORIZED_IDR] BIT,
  [AMEND_DESCRIPTION] VARCHAR(2048),
  [AMEND_SUMMARY] VARCHAR(MAX),
  CONSTRAINT [PK__ORDER_SCH__0AA94E2A] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_DELIVERIES] (
  [IDF] VARCHAR(64) DEFAULT 'ORDD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [REVISION_IDR] BIT DEFAULT 0,
  [INSTRUCTIONS] VARCHAR(2048),
  [SHOPPING_CART_IDR] BIT DEFAULT 0,
  [POC_IDF] VARCHAR(64),
  [POC_NAME_CODE] VARCHAR(128),
  [DOCUMENT_IDF] VARCHAR(64),
  [DOCUMENT_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [DELIVERY_DAYS_AFTER] INT,
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(64),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EXPEDITE_IDR] BIT,
  [ADDRESS_IDF] VARCHAR(64),
  [TELECOM_ADDRESS_IDF] VARCHAR(64),
  [CUSTOMER_IDF] VARCHAR(64),
  [CERTIFIED_IDR] BIT DEFAULT 1,
  [SUBMITTED_IDR] BIT,
  [DELIVERY_START_DATE] DATETIME,
  [DELIVERY_END_DATE] DATETIME,
  [LAST_DELIVERY_IDR] BIT DEFAULT 1,
  [DELIVERY_ITEM_COUNT] INT DEFAULT 1 NOT NULL,
  [FULL_DELIVERY_IDR] BIT DEFAULT 1,
  [PERCENT_TO_DELIVERY] FLOAT,
  [TOTAL_DELIVERY_NUMBER] INT DEFAULT 1,
  [PROVIDER_NAME_CODE] VARCHAR(256),
  [PROVIDER_IDF] VARCHAR(64),
  [ALT_PROVIDER_NAME_CODE] VARCHAR(256),
  [ALT_PROVIDER_IDF] VARCHAR(64),
  [SUBMITTER_IDF] VARCHAR(64),
  [SUBMITTER_NAME_CODE] VARCHAR(128),
  CONSTRAINT [IX_ORDER_DELIVERIES1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'PDTL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [NOTE_CODE] VARCHAR(16),
  [MESSAGE] VARCHAR(512),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(64),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK__PROPOSAL_32EC49AE] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_DOCUMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'DOCX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64),
  [ATTACHMENT_FILE] VARCHAR(512) NOT NULL,
  [DIRECTORY_PATH] VARCHAR(256),
  [RELEASED_DATETIME] DATETIME,
  [TITLE] VARCHAR(1024) NOT NULL,
  [TO_DELETE_AMEND_ID] VARCHAR(256),
  [show_prop_attach_to_subcontractor] BIT,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [MESSAGE_IDF] VARCHAR(64),
  [NOTIFICATION_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64) NOT NULL,
  [TASK_MODIFICATION_IDF] VARCHAR(64),
  [ORDER_MODIFICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK__SYM_ATTACHMENT__65ACD3A5] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_FINANCE_LOES] (
  [IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [TASK_NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [TOTAL_HOURS] INT DEFAULT 0,
  [TOTAL_FTES] DECIMAL,
  [RATE_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [ESTIMATED_RATE] MONEY,
  [NITTAC_RATE] MONEY,
  [CALCULATED_AMOUNT] MONEY,
  [TOTAL_AMOUNT] MONEY,
  [OVERRIDE_IDR] BIT DEFAULT 0,
  [OVERRIDE_REASON] VARCHAR(256),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [START_DATE] DATETIME,
  [END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [TASK_IDF] VARCHAR(64),
  [ORDER_FIANCE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_ORDER_FINANCE_LOES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_FINANCES] (
  [IDF] VARCHAR(64) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [AMENDMENT_IDR] BIT DEFAULT 0,
  [LOE_FILLED_IDR] BIT DEFAULT 0,
  [TOTAL_FTES] DECIMAL,
  [TOTAL_HOURS] INT DEFAULT 0,
  [AMOUNT_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [IGCE_CODE] VARCHAR(16) DEFAULT 'C_MANUAL',
  [IGCE_AMOUNT] MONEY,
  [AWARD_CEILING_AMOUNT] MONEY,
  [ESTIMATED_AMOUNT] MONEY,
  [BUDGETED_AMOUNT] MONEY,
  [REVISION_IDR] BIT DEFAULT 0,
  [REVISED_AMOUNT] MONEY,
  [REVISION_NOTE_TEXT] VARCHAR(2048),
  [FEE_TYPE_CODE] VARCHAR(16),
  [FEE_RATE] FLOAT,
  [FEE_CALCULATED] MONEY,
  [FEE] MONEY,
  [FEE_OVERRIDE_IDR] BIT DEFAULT 0,
  [FEE_OVERRIDE_REASON] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [MODIFICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_ORDER_FINANCES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_GSS_CLIN_OPTIONS] (
  [ITEM_IDF] VARCHAR(64) NOT NULL,
  [OS_CODE] VARCHAR(64),
  [RAM_CODE] VARCHAR(64),
  [HARD_DRIVE_CODE] VARCHAR(64),
  [DISPLAY_CODE] VARCHAR(64),
  [DOCKING_STATION_CODE] VARCHAR(64),
  [BLUETOOTH_CODE] VARCHAR(64),
  [PLATFORM_INTEGRITY_CODE] VARCHAR(64),
  [WEIGHT_CODE] VARCHAR(64),
  [SIZE_CODE] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  CONSTRAINT [PK_ORDER_GSS_CLIN_OPTIONS] PRIMARY KEY ([ITEM_IDF])
)
GO

CREATE TABLE [dbo].[ORDER_MESSAGES] (
  [IDF] VARCHAR(64) DEFAULT 'ODRM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [MESSAGE_IDF] VARCHAR(64),
  [PROPOSAL_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64),
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [RECEIVER_IDF] VARCHAR(64),
  [SENDER_IDF] VARCHAR(64),
  [REVISION_IDR] BIT DEFAULT 1,
  [REVISION_DEADLINE] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_TO_MSG_3214EC2711DC94B5] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_QUESTIONS] (
  [IDF] VARCHAR(64) DEFAULT 'QUSX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [QUESTION_NUMBER] INT NOT NULL,
  [NOTE_TEXT] VARCHAR(MAX),
  [RESPONSED_IDR] BIT DEFAULT 0,
  [RESPONSE_READY_IDR] BIT DEFAULT 0,
  [RELEASE_READY_IDR] BIT DEFAULT 0,
  [REVISION_IDR] BIT DEFAULT 0,
  [ORDER_STAGE_CODE] VARCHAR(32) DEFAULT 'C_QA',
  [TASK_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16) DEFAULT 'C_CONTRACTOR',
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK__SYM_TASK_ORDER_Q__779679B6] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_RATING_FACTORS] (
  [IDF] VARCHAR(64) DEFAULT 'RATE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [RATING_WEIGHT_FACTOR] FLOAT,
  [RATING_SCORE] FLOAT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_ORDER_RATING_FACTORS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_RESPONSES] (
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [PROPOSAL_IDF] VARCHAR(64),
  [SUBMITTER_IDF] VARCHAR(64),
  [POC_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [NO_BID_IDR] BIT,
  [REASON_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(MAX),
  [REVISION_IDR] BIT DEFAULT 0,
  [REVISION_MESSAGE] VARCHAR(2048),
  [REVISION_DATE] DATETIME,
  CONSTRAINT [PK_ORDER_RESPONSES] PRIMARY KEY ([ORDER_IDF], [CONTRACTOR_IDF])
)
GO

CREATE TABLE [dbo].[ORDER_REVIEW_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'DTLX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NOTE_TEXT] VARCHAR(2048),
  [REVIEW_QUESTION_IDF] VARCHAR(64) NOT NULL,
  [REVIEW_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_TO_REVIEW__666BEDB4] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_REVIEWS] (
  [IDF] VARCHAR(64) DEFAULT 'RVWX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [REVIEWER_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64),
  [APPROVED_IDR] BIT,
  [ACTIVE_IDR] BIT,
  [DETAIL_IDR] BIT DEFAULT 0,
  [REVIEW_START_DATE] DATETIME,
  [REVIEW_DEADLINE] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [SCORE_GRADE_CODE] VARCHAR(16),
  [SCOPE_GRADE] FLOAT,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SYM_TASK_ORDER_R__7C5B2ED3] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_TASK_FINANCES] (
  [IDF] VARCHAR(64) DEFAULT 'TOFN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [ORDER_FINANCE_IDF] VARCHAR(64) NOT NULL,
  [OVERRIDE_IDR] BIT DEFAULT 0,
  [OVERRIDE_REASON] VARCHAR(256),
  [CALCULATED_AMOUNT] MONEY,
  [ESTIMAtED_AMOUNT] MONEY,
  [ESTIMAtED_HOURS] INT DEFAULT 0,
  [ESTIMAtED_FTES] DECIMAL DEFAULT 0.0,
  CONSTRAINT [PK_ORDER_TASK_FINANCES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_TASKS] (
  [IDF] VARCHAR(64) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [PRIMARY_POC_IDF] VARCHAR(64),
  [TITLE] VARCHAR(512),
  [TASK_SECTION] VARCHAR(512),
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [NOTE_CODE] VARCHAR(16),
  [BODY_TEXT] VARCHAR(MAX),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [FINANCE_IDR] BIT DEFAULT 0,
  [DELIVERABLE_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [REVIEWER_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK__ORDER_TASK__IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDER_TASKS_DELIVERABLES] (
  [DELIVERABLE_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [REJECTED_DATE] DATETIME,
  [REJECTED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PAYMENT_IDF] VARCHAR(64),
  [AWARD_IDF] VARCHAR(64),
  [PAID_IDR] BIT DEFAULT 0,
  [DUE_DATE] DATETIME,
  [SUBMITTED_DATE] DATETIME,
  [SUBMITTED_BY] VARCHAR(128),
  CONSTRAINT [PK_ORDER_TASKS_DELIVERABLES] PRIMARY KEY ([DELIVERABLE_IDF], [TASK_IDF])
)
GO

CREATE TABLE [dbo].[ORDER_TO_DO_LISTS] (
  [IDF] VARCHAR(64) DEFAULT 'DLST_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [ACTION_IDF] VARCHAR(64),
  [ACTION_COMPLETED_IDR] BIT DEFAULT 0,
  [ACTION_TIME] DATETIME,
  [BODY] VARCHAR(MAX),
  [RECIPIENT_IDF] VARCHAR(64),
  [TO_EMAIL_ADDRESS] VARCHAR(256),
  [NAME_CODE] VARCHAR(255),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SYM_TODO__011FE3F0] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORDERS] (
  [IDF] VARCHAR(64) DEFAULT 'ORD__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [APPROVER_IDF] VARCHAR(64),
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [ASSISTED_CUSTOMER_IDF] VARCHAR(64),
  [ASSISTED_ORDER_IDR] BIT DEFAULT 0,
  [SUBMITTER_NAME_CODE] VARCHAR(128),
  [AUTH_NUMBER] VARCHAR(64),
  [CUSTOMER_NOTE_TEXT] VARCHAR(1024),
  [EMAIL_NOTIFICATIONS] INT,
  [NOTE_TEXT] VARCHAR(1024),
  [FO_EXCEPTION_CODE] VARCHAR(16),
  [FO_IDR] BIT,
  [FO_REASON] VARCHAR(1024),
  [LAST_ACTIVE_STATUS] VARCHAR(8) NOT NULL,
  [AREA_LOT] VARCHAR(64),
  [AREA_LOT_MASK] BIGINT,
  [PBC_IDR] BIT,
  [PBC_JUSTIFICATION] VARCHAR(1024),
  [SOLE_IDR] BIT DEFAULT 0,
  [SOLE_CONTRACTOR_IDF] VARCHAR(64),
  [SOURCE_EXCLUDED_IDR] BIT,
  [SOURCE_EXCLUDED_CERTIFIED_IDR] BIT,
  [VERIFY_TM_IDR] BIT,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [CONTRACT_TYPE_CODE] VARCHAR(16),
  [SB_DESIGNATION_CODE] VARCHAR(1024),
  [SB_DESIGNATION_MASK] BIGINT,
  [TITLE] VARCHAR(512),
  [DETAIL_IDR] BIT,
  [CO_IDF] VARCHAR(64),
  [CO_NAME_CODE] VARCHAR(128),
  [CO_ALT_IDF] VARCHAR(64),
  [CO_ALT_NAME_CODE] VARCHAR(128),
  [CS_IDF] VARCHAR(64),
  [CS_NAME_CODE] VARCHAR(128),
  [CS_ALT_IDF] VARCHAR(64),
  [CS_ALT_NAME_CODE] VARCHAR(128),
  [COTR_IDF] VARCHAR(64),
  [COTR_NAME_CODE] VARCHAR(128),
  [COTR_ALT_IDF] VARCHAR(64),
  [COTR_ALT_NAME_CODE] VARCHAR(128),
  [AMO_IDF] VARCHAR(64),
  [AMO_NAME_CODE] VARCHAR(128),
  [AMO_ALT_IDF] VARCHAR(64),
  [AMO_ALT_NAME_CODE] VARCHAR(128),
  [REVIEWER_IDF] VARCHAR(64),
  [REVIEWER_NAME_CODE] VARCHAR(128),
  [ISSO_IDF] VARCHAR(64),
  [ISSO_NAME_CODE] VARCHAR(128),
  [ISSO_ALT_IDF] VARCHAR(64),
  [ISSO_ALT_NAME_CODE] VARCHAR(128),
  [POC_IDF] VARCHAR(64),
  [POC_NAME_CODE] VARCHAR(128),
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [AUTHORIZED_IDR] BIT,
  [LINK_COMPLIANCE_IDF] VARCHAR(64),
  [LINK_DELIVERY_IDF] VARCHAR(64),
  [LINK_FINANCE_IDF] VARCHAR(64),
  [LINK_TASK_IDF] VARCHAR(64),
  CONSTRAINT [FK_ORDERS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[ORGANIZATION_ROLES] (
  [ROLE_IDF] VARCHAR(64) NOT NULL,
  [ORGANIZATION_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 1,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_ORGANIZATION_ROLES] PRIMARY KEY ([ROLE_IDF], [ORGANIZATION_IDF])
)
GO

CREATE TABLE [dbo].[ORGANIZATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ORGX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(256) NOT NULL,
  [ASSOCIATED_NAME] VARCHAR(256),
  [ACRONYM_NAME] VARCHAR(16),
  [VALUE_CODE] VARCHAR(32),
  [INTERNET_DOMAIN] VARCHAR(256),
  [FEDERAL_IDR] BIT DEFAULT 0,
  [SBA_MASKED_IDR] BIGINT,
  [CAGE] VARCHAR(32),
  [DUNS] VARCHAR(32),
  [EIN] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [NOTE_TEXT] VARCHAR(2048),
  CONSTRAINT [PK_ORGANIZATIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_ACTIVITIES] (
  [IDF] VARCHAR(64) DEFAULT 'OACT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [PARENT_IDF] VARCHAR(64),
  [TASK_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_OWN_ACTIVITIES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_ERRORS] (
  [IDF] VARCHAR(64) DEFAULT 'ERRO_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [SEVERITY_CODE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(512),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_OWN_ERRORS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_EVENTS] (
  [IDF] VARCHAR(64) DEFAULT 'OEVT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [PARENT_IDF] VARCHAR(64),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  CONSTRAINT [PK_OWN_EVENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_MESSAGES] (
  [IDF] VARCHAR(64) DEFAULT 'OMSG_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [DELIVERY_CODE] VARCHAR(16) DEFAULT 'EMAIL',
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL',
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTACT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_OWN_MESSAGES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_NOTIFICATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'ONOT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [SUBJECT] VARCHAR(512) NOT NULL,
  [NOTE_TEXT] VARCHAR(2048),
  [FROM_ADDRESS] VARCHAR(128) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [DOCUMENT_IDR] BIT DEFAULT 0,
  [ONLY_PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTACT_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_NOTI__3214EC27291A5D5F] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_REQUESTS] (
  [IDF] VARCHAR(64) DEFAULT 'OQUS_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REQUEST_NUMBER] INT NOT NULL,
  [BODY_TEXT] VARBINARY(MAX),
  [NOTE_TEXT] VARCHAR(2048),
  [RESPONSED_IDR] BIT DEFAULT 0,
  [REVISION_IDR] BIT DEFAULT 0,
  [NOTIFICATION_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16) DEFAULT 'C_CONTRACTOR',
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [EXTENDED_NOTE_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [REQUESTER_IDF] VARCHAR(64) NOT NULL,
  [NOTIFICATION_IDF] VARCHAR(64),
  CONSTRAINT [IX_OWN_REQUESTS1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_TASKS] (
  [IDF] VARCHAR(64) DEFAULT 'OTSK_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_OWN_TASKS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_TEMPLATES] (
  [IDF] VARCHAR(64) DEFAULT 'OTMP_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [DOCUMENT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_OWN_TEMPLATES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_VALUESETS] (
  [IDF] VARCHAR(64) DEFAULT 'OVAL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [VALUE_STRING] VARCHAR(256),
  [VALUE_NUMBER] NUMERIC,
  [VALUE_MAX_NUMBER] NUMERIC,
  [VALUE_MIN_NUMBER] NUMERIC,
  [VALUE_INTEGER] INT,
  [VALUE_MONEY] MONEY,
  [VALUE_MAX_MONEY] MONEY,
  [VALUE_MIN_MONEY] MONEY,
  [VALUE_NOTE] VARCHAR(MAX),
  [VALUE_IMAGE] IMAGE,
  [VALUE_UOM] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [REQUIRED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_OWN_VALUESETS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWN_VERIFY_PROCESSES] (
  [IDF] VARCHAR(64) DEFAULT 'OPRS_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [NOTIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [RETRY_IDR] BIT DEFAULT 1,
  [RETRY_COUNT] INT DEFAULT 0,
  [RETRY_MAX] INT DEFAULT 3,
  [REMIND_DATE] DATETIME,
  [DEADLINE_DATE] DATETIME,
  [SUBMITTED_DATE] DATETIME,
  [SUBMITTED_BY] VARCHAR(128),
  [LOCKED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [NOTIFICATION_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_OWN_VERIFY_PROCESSES] PRIMARY KEY ([IDF], [OWNER_IDF])
)
GO

CREATE TABLE [dbo].[OWN_WORKFLOWS] (
  [IDF] VARCHAR(64) DEFAULT 'OWKF_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_OWN_WORKFLOWS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[OWNER_ITEMS] (
  [IDF] VARCHAR(64) DEFAULT 'OITM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_IDF] VARCHAR(64) DEFAULT 'OMSG_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [DELIVERY_CODE] VARCHAR(16) DEFAULT 'EMAIL',
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL',
  [NAME_CODE] VARCHAR(128),
  [NOTE_TEXT] VARCHAR(2048),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTACT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_OWNER_ITEMS] PRIMARY KEY ([IDF], [OWNER_IDF])
)
GO

CREATE TABLE [dbo].[PAYMENT_REPORT] (
  [IDF] VARCHAR(64) DEFAULT 'PRPT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64),
  [CERTIFIED_BY_IDF] VARCHAR(64),
  [IS_CERTIFIED_IDR] BIT,
  [ESTIMATED_PAYMENT_DATE] DATETIME,
  [NOTE_TEXT] VARCHAR(2048),
  [REPORT_CERTIFIED_DATE] DATETIME,
  [CERTIFIED_BY_USER_NAME] VARCHAR(256),
  [REPORT_PERIOD] VARCHAR(256),
  [REPORT_PERIOD_START_DATE] DATETIME NOT NULL,
  [REPORT_PERIOD_END_DATE] DATETIME NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__PAYMENT_REPORT__7B320070] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PAYMENT_REPORT_ITEMS] (
  [REPORT_IDF] VARCHAR(64) NOT NULL,
  [INVOICE_IDF] VARCHAR(64) NOT NULL,
  [MODIFICATION_IDF] VARCHAR(64),
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [INVOICE_DATE] DATETIME NOT NULL,
  [PAYMENT_TYPE] VARCHAR(16),
  [AMOUNT_PAID] MONEY NOT NULL,
  [FEE_AMOUNT] MONEY NOT NULL,
  [TRACK_ID] VARCHAR(256) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__PAYMENT_REPORT_I__01DEFDFF] PRIMARY KEY ([INVOICE_IDF], [REPORT_IDF])
)
GO

CREATE TABLE [dbo].[PERSON_ROLES] (
  [ROLE_IDF] VARCHAR(64) NOT NULL,
  [PERSON_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_PERSON_ROLES] PRIMARY KEY ([ROLE_IDF], [PERSON_IDF])
)
GO

CREATE TABLE [dbo].[PERSONS] (
  [IDF] VARCHAR(64) DEFAULT 'PERX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PREFIX] VARCHAR(16),
  [TITLE] VARCHAR(128),
  [FIRST_NAME] VARCHAR(128),
  [MIDDLE_NAME] VARCHAR(64),
  [LAST_NAME] VARCHAR(128),
  [SUFFIX] VARCHAR(16),
  [ESIGN_ACK] DATETIME,
  [ESIGN_EXPIRATION] DATETIME,
  [PHONE] VARCHAR(32),
  [EMAIL] VARCHAR(256),
  [FAX] VARCHAR(32),
  [JOB] VARCHAR(128),
  [ADDRESS_IDF] VARCHAR(64),
  [PHONE_EXTENSION] VARCHAR(16),
  [SHIPPING_ADDRESS_IDF] VARCHAR(64),
  [OVERLAY_SHOW_IDR] BIT,
  [PREFERRED_NAME] VARCHAR(255),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [FEDERAL_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ORGANIZATION_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_PERSON_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROCESS_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'PRSD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [KNOWLEDGE_IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROCESS_IDF] VARCHAR(64) NOT NULL,
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_PROCESS_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_DELIVERIES] (
  [IDF] VARCHAR(64) DEFAULT 'PDEL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [ADDRESS_IDF] VARCHAR(64),
  [TELECOM_ADDRESS_IDF] VARCHAR(64),
  [POC_IDF] VARCHAR(64),
  [POC_NAME_CODE] VARCHAR(128),
  [SHIPPING_HANDING] MONEY,
  [TAX_AMOUNT] MONEY DEFAULT 0,
  [TAX_IDR] BIT DEFAULT 0,
  [EXTENDED_PRICE] MONEY,
  [EXTENDED_TAX] MONEY,
  [EXTENDED_DELIVERY] VARCHAR(128),
  [SUPPORT_NOTE_TEXT] VARCHAR(MAX),
  [REVISION_IDR] BIT,
  [CERTIFIED_IDR] BIT DEFAULT 1,
  [SUBMITTED_IDR] BIT,
  [DIRECTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DELIVERY_DAYS_AFTER] INT,
  [DELIVERY_START_DATE] DATETIME,
  [DELIVERY_END_DATE] DATETIME,
  [LAST_DELIVERY_IDR] BIT DEFAULT 1,
  [EXPEDITE_IDR] BIT,
  [DOCUMENT_IDR] BIT DEFAULT 0,
  [DOCUMENT_IDF] VARCHAR(64),
  [POSITION_ORDER] INT DEFAULT 1,
  [DELIVERY_ITEM_COUNT] INT DEFAULT 1 NOT NULL,
  [FULL_DELIVERY_IDR] BIT DEFAULT 1,
  [PERCENT_TO_DELIVERY] FLOAT,
  [TOTAL_DELIVERY_NUMBER] INT DEFAULT 1,
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PROVIDER_NAME_CODE] VARCHAR(256),
  [PROVIDER_IDF] VARCHAR(64),
  [ALT_PROVIDER_NAME_CODE] VARCHAR(256),
  [ALT_PROVIDER_IDF] VARCHAR(64),
  [WEIGHT] FLOAT,
  [WEIGHT_UOM] VARCHAR(16) DEFAULT 'POUND',
  [WEIGHT_DESCRIPTION] VARCHAR(256),
  [SIZE_HEIGHT] FLOAT,
  [SIZE_WIDTH] FLOAT,
  [SIZE_LENGTH] FLOAT,
  [SIZE_UOM] VARCHAR(16) DEFAULT 'INCH',
  [SIZE_DESCRIPTION] VARCHAR(256),
  [SUBMITTER_IDF] VARCHAR(64),
  [SUBMITTER_NAME_CODE] VARCHAR(128),
  CONSTRAINT [PK_PROPOSAL_DELIVERY] PRIMARY KEY ([IDF], [PROPOSAL_IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'PDTL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_CLIN_ID] VARCHAR(128),
  [QUANTITY] INT DEFAULT 1,
  [EXTENDED_PRICE] MONEY,
  [EXTENDED_TAX] MONEY,
  [EXTENDED_DELIVERY] VARCHAR(128),
  [DESTINATION] VARCHAR(256),
  [UNIT_PRICE] MONEY,
  [UOM] VARCHAR(16) DEFAULT 'C_USD',
  [VALUE_ADD_DESC] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_PROPOSAL_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_FINANCE_LOES] (
  [IDF] VARCHAR(64) DEFAULT 'LOEX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [TASK_NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [PROPOSED_HOURS] INT DEFAULT 0,
  [PROPOSED_FTES] DECIMAL,
  [RATE_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [PROPOSED_RATE] MONEY,
  [CONTRACTOR_RATE] MONEY,
  [NITTAC_RATE] MONEY,
  [CALCULATED_AMOUNT] MONEY,
  [TOTAL_AMOUNT] MONEY,
  [DISCOUNT_RATE_IDR] BIT DEFAULT 0,
  [GSA_RATE_IDR] BIT DEFAULT 0,
  [OVERRIDE_IDR] BIT DEFAULT 0,
  [OVERRIDE_REASON] VARCHAR(256),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [START_DATE] DATETIME,
  [END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_FINANCE_IDF] VARCHAR(64) NOT NULL,
  [PROPOSED_TASK_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_PROPOSAL_FINANCE_LOES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_FINANCES] (
  [IDF] VARCHAR(64) DEFAULT 'TRPR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [LOE_FILLED_IDR] BIT DEFAULT 0,
  [TOTAL_FTES] DECIMAL,
  [TOTAL_HOURS] INT,
  [OVERRIDE_IDR] BIT DEFAULT 0,
  [OVERRIDE_REASON] VARCHAR(256),
  [CALCULATED_AMOUNT] MONEY,
  [PROPOSED_AMOUNT] MONEY,
  [SHIPPING_AMOUNT] MONEY DEFAULT 0,
  [TAX_AMOUNT] MONEY DEFAULT 0,
  [TAX_IDR] BIT DEFAULT 0,
  [TOTAL_AMOUNT] MONEY,
  [OTHER_COST] MONEY DEFAULT 0,
  [OTHER_REASON] VARCHAR(256),
  [REVISED_TOTAL_AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [MODIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [FEE_TYPE_CODE] VARCHAR(16),
  [FEE_RATE] FLOAT,
  [FEE_CALCULATED] MONEY,
  [FEE] MONEY,
  [FEE_OVERRIDE_IDR] BIT DEFAULT 0,
  [FEE_OVERRIDE_REASON] VARCHAR(256),
  [FEE_CERT_IDR] BIT DEFAULT 0,
  [REVISED_FEE_CERT_IDR] BIT DEFAULT 0,
  [QUOTE_EXPIRED_DATE] DATETIME,
  CONSTRAINT [PK_PROPOSAL_FINANCES] PRIMARY KEY ([IDF], [PROPOSAL_IDF], [CONTRACTOR_IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_RATINGS] (
  [REVIEW_IDF] VARCHAR(64) NOT NULL,
  [RATE_FACTOR_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [WEIGHT_SCORE_GRADE] FLOAT,
  [SCORE_GRADE] FLOAT,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_PROPOSAL_RATINGS] PRIMARY KEY ([REVIEW_IDF], [RATE_FACTOR_IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_REVIEWS] (
  [IDF] VARCHAR(64) DEFAULT 'RVWX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [REVISION_IDF] VARCHAR(64) NOT NULL,
  [REVIEWER_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64),
  [APPROVED_IDR] BIT,
  [ACTIVE_IDR] BIT,
  [DETAIL_IDR] BIT DEFAULT 0,
  [REVIEW_START_DATE] DATETIME,
  [REVIEW_DEADLINE] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [SCORE_GRADE_CODE] VARCHAR(16),
  [SCORE_GRADE] FLOAT,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__PROPOSAL_REVIEW_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSAL_REVISIONS] (
  [IDF] VARCHAR(64) DEFAULT 'TORV_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REVISION_REQUEST_DATE] DATETIME,
  [REVISION_MESSAGE] VARCHAR(2048),
  [REVISION_DEADLINE] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [IX_PROPOSAL_REVISIONS1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSALS] (
  [IDF] VARCHAR(64) DEFAULT 'BNP__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [ASSISTING_ORGANIZATION_IDF] VARCHAR(64),
  [REVISION_IDR] BIT DEFAULT 0,
  [REVISION_DOCUMENT_COUNT] INT,
  [EVALUATION_NOTE_TEXT] VARCHAR(2048),
  [FINANCE_IDR] BIT DEFAULT 1,
  [REVIEW_IDR] BIT DEFAULT 0,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [POC_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [SUBMISSION_DATE] DATETIME,
  [CONTENT_COUNT] INT DEFAULT 1,
  [DOCUMENT_COUNT] INT,
  [DOCUMENT_IDR] BIT DEFAULT 1,
  [DOCUMENT_NOTE_TEXT] VARCHAR(MAX),
  [INCLUDE_OEM_IDR] BIT DEFAULT 1,
  [INCLUDE_VAR_IDR] BIT DEFAULT 1,
  [VALUE_CODE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EXPIRED_DATE] DATETIME,
  CONSTRAINT [PK_PROPOSAL__IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSED_CLINS] (
  [ITEM_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64),
  [TRP_IDF] VARCHAR(64),
  [ORDER_ITEM_IDF] VARCHAR(64),
  [CONTRACT_IDF] VARCHAR(64),
  [CONTRACTOR_CLIN_ID] VARCHAR(128),
  [APPROVER_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(128),
  [QUOTE_TYPE] VARCHAR(16),
  [QUOTE_PRICE] MONEY,
  [DISCOUNT] NUMERIC(5,2),
  [QUANTITY] INT,
  [PRODUCT_DESCRIPTION] VARCHAR(MAX),
  [PRICE] MONEY,
  [CSR_APPROVED_PRICE_IDR] BIT DEFAULT 1,
  [SUBMITTED_IDR] BIT DEFAULT 1,
  [PRICE_JUSTIFICATION] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__PROPOSAL_CLINS] PRIMARY KEY ([ITEM_IDF], [PROPOSAL_IDF])
)
GO

CREATE TABLE [dbo].[PROPOSED_TASK_FINANCES] (
  [IDF] VARCHAR(64) DEFAULT 'TOFN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [OVERRIDE_IDR] BIT DEFAULT 0,
  [OVERRIDE_REASON] VARCHAR(256),
  [CALCULATED_AMOUNT] MONEY,
  [PROPOSED_AMOUNT] MONEY,
  [PROPOSED_HOURS] INT DEFAULT 0,
  [PROPOSED_FTES] DECIMAL DEFAULT 0.0,
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_FINANCE_IDF] VARCHAR(64) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [PROPOSED_TASK_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_PROPOSED_TASK_FINANCES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[PROPOSED_TASKS] (
  [IDF] VARCHAR(64) DEFAULT 'PTSK_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PROPOSAL_IDF] VARCHAR(64) NOT NULL,
  [ORDER_TASK_IDF] VARCHAR(64) NOT NULL,
  [ATTACHMENT_NOTE_TEXT] VARCHAR(MAX),
  [ATTACHMENT_IDR] BIT DEFAULT 1,
  [REVISED_FEE_CERT_IDR] BIT DEFAULT 0,
  [REVISED_FILE_COUNT] INT,
  [REVISED_TOTAL_AMOUNT] MONEY,
  [FEE_CERT_IDR] BIT DEFAULT 0,
  [EVALUATION_NOTE_TEXT] VARCHAR(2048),
  [FILE_COUNT] INT,
  [TOTAL_AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(8) DEFAULT 'USD',
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_PROPOSED_TASKS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[QUESTION_ANSWERS] (
  [IDF] VARCHAR(64) DEFAULT 'QNAX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [QUESTION_IDF] VARCHAR(64) DEFAULT 'QNAX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REVISION_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [ANSWER_NUMBER] INT DEFAULT 1,
  [NOTE_TEXT] VARCHAR(MAX),
  [CATEGORY_CODE] VARCHAR(16) DEFAULT 'C_CONTRACTOR',
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTACT_IDF] VARCHAR(64),
  [CUSTOMER_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64),
  [OWNER_IDF] VARCHAR(64) NOT NULL,
  [DOCUMENT_IDF] VARCHAR(64),
  [RELEASE_READY_IDR] BIT DEFAULT 0,
  CONSTRAINT [PK_QUESTION_ANSWERS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_CONTRACTOR_TRP_CLINS] (
  [IDF] VARCHAR(64) DEFAULT 'ITEM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [TRP_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [CONTRACTOR_PARENT_CLIN_ID] VARCHAR(128),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [APPROVAL_SEQUENCE_KEY] VARCHAR(256),
  [APPROVAL_SEQUENCE_NUMBER] NUMERIC(19),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [REQUEST_UPDATE_IDR] BIT DEFAULT 0,
  [DOCUMENT_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ACTION_CODE] VARCHAR(16),
  [CATEGORY_IDF] VARCHAR(64) NOT NULL,
  [COMMODITY_IDF] VARCHAR(64) NOT NULL,
  [OEM_PART_NUM] VARCHAR(128),
  [OEM_MFR_NAME] VARCHAR(256),
  [OEM_PRICE] MONEY,
  [CATALOG_PRICE] MONEY,
  [CONTRACT_PRICE] MONEY,
  [GSA_SCHED_PRICE] MONEY,
  [GSA_SCHED_CONTRACT_NUM] VARCHAR(128),
  [SPECIAL_PRICE] MONEY,
  [QUANTITY] SMALLINT,
  [UOM] VARCHAR(64),
  [TIS_SPECIFICATION] VARCHAR(MAX),
  [WEIGHT] VARCHAR(128),
  [WEIGHT_UOM] VARCHAR(16),
  [SIZE] VARCHAR(128),
  [SIZE_UOM] VARCHAR(16),
  [NUM_ASSOC_ELA] VARCHAR(16),
  [ENERGY_STAR_COMPLIANCE_IDR] BIT,
  [EPEAT_COMPLIANCE_IDR] BIT,
  [TAA_COMPLIANCE_IDR] BIT,
  [ACT_508_COMPLIANCE_IDR] BIT DEFAULT 0,
  [OMB_COMPLIANCE_IDR] BIT,
  [AUTHORIZED_TO_SALE_IDR] BIT,
  [COUNTRY_OF_ORIGIN] VARCHAR(128),
  [SHELF_LIFE] DATETIME,
  [WARRANTY_IDR] BIT DEFAULT 0,
  [WARRANTY] VARCHAR(256),
  [INITIAL_PERIOD] VARCHAR(32),
  [INITIAL_GOVERNMENT_QUANTITY] INT,
  [DELIVERY_PERIOD] VARCHAR(64),
  [CLIN_COMPONENT_CODE] VARCHAR(16),
  [CLIN_ACTION] VARCHAR(16),
  [ACTION_DATE] DATETIME,
  [CONTRACTOR_NOTE_TEXT] VARCHAR(2048),
  [CONTRACTOR_JUSTIFICATiON] VARCHAR(MAX),
  [NITAAC_DECISION_REASON] VARCHAR(1048),
  [NITAAC_NOTE_TEXT] VARCHAR(2048),
  [NITAAC_VALIDATION_STATEMENT] VARCHAR(MAX),
  [PACKAGE_ONLY_CLIN_IDR] BIT DEFAULT 0,
  CONSTRAINT [PK__CONTRACT_CLIN_ID] PRIMARY KEY ([IDF], [CONTRACTOR_IDF])
)
GO

CREATE TABLE [dbo].[REF_CONTRACTOR_TRP_GSS_CLINS] (
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [PARENT_CLIN_IDF] VARCHAR(64),
  [SPECIFICATIONS] VARCHAR(MAX),
  [PRICE] MONEY NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [OS_CLIN_IDF] VARCHAR(64),
  [OS_SPECS] VARCHAR(256),
  [OS_CODE] VARCHAR(64),
  [OS_NOTE_TEXT] VARCHAR(2048),
  [PROCESSOR_IDF] VARCHAR(64),
  [PROCESSOR_CODE] VARCHAR(64),
  [PROCESSOR_NOTE_TEXT] VARCHAR(2048),
  [RAM_CLIN_IDF] VARCHAR(64),
  [RAM_SPECS] VARCHAR(256),
  [RAM_CODE] VARCHAR(64),
  [RAM_UPGRADE] VARCHAR(256),
  [RAM_NOTE_TEXT] VARCHAR(2048),
  [HARD_DRIVE_CLIN_IDF] VARCHAR(64),
  [HARD_DRIVE_SPECS] VARCHAR(256),
  [HARD_DRIVE_CODE] VARCHAR(64),
  [HARD_DRIVE_NOTE_TEXT] VARCHAR(2048),
  [GRAPHIC_CLIN_IDF] VARCHAR(64),
  [GRAPHIC_SPECS] VARCHAR(256),
  [GRAPHIC_UPGRADE_SPECS] VARCHAR(256),
  [GRAPHIC_NOTE_TEXT] VARCHAR(2048),
  [DISPLAY_SIZE] VARCHAR(256),
  [DISPLAY_CLIN_IDF] VARCHAR(64),
  [DISPLAY_RESOLUTION] VARCHAR(256),
  [DISPLAY_CODE] VARCHAR(64),
  [DISPLAY_NOTE_TEXT] VARCHAR(2048),
  [DOCKING_STATION_CLIN_IDF] VARCHAR(64),
  [DOCKING_STATION_SPECS] VARCHAR(256),
  [DOCKING_STATION_CODE] VARCHAR(64),
  [DOCKING_STATION_NOTE_TEXT] VARCHAR(2048),
  [SOUND_CLIN_IDF] VARCHAR(64),
  [SOUND_SPECS] VARCHAR(256),
  [SPEAKER_SPECS] VARCHAR(256),
  [SPEAK_CLIN_IDF] VARCHAR(64),
  [OPTICAL_DRIVE_CLIN_IDF] VARCHAR(64),
  [OPTICAL_DRIVE_SPECS] VARCHAR(MAX),
  [KEYBOARD_CLIN_IDF] VARCHAR(512),
  [KEYBOARD_SPECS] VARCHAR(512),
  [MOUSE_CLIN_IDF] VARCHAR(64),
  [MOUSE_SPECS] VARCHAR(64),
  [WEBCAM_CLIN_IDF] VARCHAR(64),
  [WEBCAM_SPECS] VARCHAR(256),
  [MICROPHONE_CLIN_IDF] VARCHAR(64),
  [MICROPHONE_SPECS] VARCHAR(256),
  [BLUETOOTH_IDF] VARCHAR(64),
  [BLUETOOTH_SPECS] VARCHAR(256),
  [BLUETOOTH_CODE] VARCHAR(64),
  [TRACKPAD_IDF] VARCHAR(64),
  [TRACKPAD_SPECS] VARCHAR(256),
  [SMART_CARD_READER_CLIN_IDF] VARCHAR(64),
  [SMART_CARD_READER_SPECS] VARCHAR(256),
  [NETWORK_INTERFACE_CLIN_IDF] VARCHAR(64),
  [NETWORK_INTERFACE_SPECS] VARCHAR(512),
  [PORT_SPECS] VARCHAR(512),
  [EXPANSION_SLOTS] VARCHAR(512),
  [PLATFORM_INTEGRITY_CLIN_IDF] VARCHAR(64),
  [PLATFORM_INTEGRITY_SPECS] VARCHAR(512),
  [PLATFORM_INTEGRITY_CODE] VARCHAR(64),
  [PLATFORM_INTEGRITY_NOTE_TEXT] VARCHAR(2048),
  [WEIGHT_CODE] VARCHAR(64),
  [WEIGHT_NOTE_TEXT] VARCHAR(2048),
  [SIZE_CODE] VARCHAR(64),
  [SIZE_NOTE_TEXT] VARCHAR(2048),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL
)
GO

CREATE TABLE [dbo].[REF_CONTRACTOR_TRPS] (
  [IDF] VARCHAR(64) DEFAULT 'CTRP_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [SUBMIT_DATE] DATETIME NOT NULL,
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [POC_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [ACTION_DATE] DATETIME,
  [REASON_CODE] VARCHAR(16),
  [CLIN_COUNT] INT NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [CONTRACTOR_NOTE_TEXT] VARCHAR(2048),
  [NITAAC_NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [DOCUMENT_IDR] BIT DEFAULT 1,
  [OEM_IDR] BIT DEFAULT 1,
  [REQUEST_UPDATE_IDR] BIT DEFAULT 0,
  [WITHDRAWN_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK__CLIN_SUB__3214EC2708F93D3E] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_LOOKUP_ITEMS] (
  [IDF] VARCHAR(64) DEFAULT 'LKIT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ITEM_VALUE] VARCHAR(128),
  [MODULES] VARCHAR(128),
  [MODULE_TYPE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_Lookup_ID] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CATEGORY_COMMODITY] (
  [IDF] VARCHAR(64) DEFAULT 'CATG_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [LEVELS] INT,
  [DISCOUNT_RATE] NUMERIC(15),
  [QUANTITY] VARCHAR(64),
  [UOM] VARCHAR(16),
  [SEARCH_BY_WORDS] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_REF_NITAAC_CATEGORY_COMMODITY] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] (
  [IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [IS_LAPTOP] BIT DEFAULT 0,
  [IS_DESKTOP] BIT DEFAULT 0,
  [IS_OPTION_FOR_LAPTOP] BIT DEFAULT 0 NOT NULL,
  [IS_OPTION_FOR_DESKTOP] BIT DEFAULT 0 NOT NULL,
  [IS_WARRANTY] BIT DEFAULT 0 NOT NULL,
  [IS_ACCESSORY] BIT DEFAULT 0 NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__FSSI_OFF__3214EC274EE0DEEB] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CLINS] (
  [IDF] VARCHAR(64) DEFAULT 'CLIN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CATEGORY_IDF] VARCHAR(64),
  [COMMODITY_IDF] VARCHAR(64),
  [OEM_PART_NAME] VARCHAR(256),
  [OEM_PART_NUM] VARCHAR(128) NOT NULL,
  [OEM_MFR_NAME] VARCHAR(256) NOT NULL,
  [OEM_MODEL_NUM] VARCHAR(128),
  [OEM_PART_URL] VARCHAR(256),
  [OEM_PRICE] MONEY,
  [PRICE] MONEY NOT NULL,
  [OEM_MFR_IDF] VARCHAR(64),
  [UPC_CODE] VARCHAR(32),
  [UPC_IDF] VARCHAR(64),
  [SPECIFICATION] VARCHAR(MAX),
  [UOM] VARCHAR(64),
  [QUANTITY] SMALLINT,
  [SALES_TYPE_IDR] BIT,
  [SEARCH_BY_WORDS] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ACCESS_LEVEL] INT DEFAULT 744,
  [OWNER_COUNT] INT DEFAULT 0,
  [PARENT_CODE] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_REF_NITAAC_CLINS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS] (
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [CONTRACTOR_PARENT_CLIN_ID] VARCHAR(128),
  [CATEGORY_IDF] VARCHAR(64) NOT NULL,
  [COMMODITY_IDF] VARCHAR(64) NOT NULL,
  [OEM_PART_NUM] VARCHAR(128),
  [OEM_MFR_NAME] VARCHAR(256),
  [CONTRACT_NO] VARCHAR(32),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_NAME] VARCHAR(128),
  [CONTRACTOR_CLIN_URL] VARCHAR(256),
  [CONTRACTOR_CLIN_SPECIFICATION] VARCHAR(MAX),
  [CONTRACTOR_NOTE_TEXT] VARCHAR(2048),
  [IMAGE_URL] VARCHAR(256),
  [SBA_MASK_IDR] BIGINT,
  [TRP_IDF] VARCHAR(64),
  [TRP_CODE] VARCHAR(16),
  [SUBMIT_DATE] DATETIME,
  [CATALOG_PRICE] MONEY,
  [ANNUAL_PRICE] MONEY,
  [ANNUAL_CEILING_PRICE] MONEY,
  [ANNUAL_DATE] DATETIME,
  [PRICE] MONEY,
  [DISCOUNT_RATE] FLOAT,
  [DISCOUNTED_PRICE] MONEY,
  [DISCOUNT_PERCENTAGE] FLOAT,
  [DISCOUNTED_EXTENDED_PRICE] MONEY,
  [QUANTITY] SMALLINT,
  [UOM] VARCHAR(64),
  [GSA_SCHED_CONTRACT_NUM] VARCHAR(128),
  [GSA_SCHED_PRICE] MONEY,
  [TIS_SPECIFICATION] VARCHAR(MAX),
  [WEIGHT] VARCHAR(256),
  [WEIGHT_UOM] VARCHAR(16),
  [SIZE] VARCHAR(256),
  [SIZE_UOM] VARCHAR(16),
  [NUM_ASSOC_ELA] VARCHAR(16),
  [ENERGY_STAR_COMPLIANCE_IDR] BIT,
  [EPEAT_COMPLIANCE_IDR] BIT,
  [TAA_COMPLIANCE_IDR] BIT,
  [ACT_508_COMPLIANCE_IDR] BIT DEFAULT 0,
  [OMB_COMPLIANCE_IDR] BIT,
  [AUTHORIZED_TO_SALE_IDR] BIT,
  [COUNTRY_OF_ORIGIN] VARCHAR(128),
  [SHELF_LIFE] DATETIME,
  [WARRANTY_IDR] BIT DEFAULT 0,
  [WARRANTY_CODE] VARCHAR(16),
  [WARRANTY] VARCHAR(256),
  [INITIAL_PERIOD] VARCHAR(32),
  [INITIAL_GOVERNMENT_QUANTITY] INT,
  [DELIVERY_PERIOD] VARCHAR(64),
  [CLIN_COMPONENT_CODE] VARCHAR(16),
  [CLIN_ACTION] VARCHAR(16),
  [ACTION_DATE] DATETIME,
  [NITAAC_DECISION_REASON] VARCHAR(1048),
  [NITAAC_COMMENTS] VARCHAR(1048),
  [NITAAC_NOTE_TEXT] VARCHAR(2048),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PACKAGE_ONLY_CLIN_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [DOCUMENT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_REF_NITAAC_CONTRACTOR_CLINS] PRIMARY KEY ([CLIN_IDF], [CONTRACT_IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] (
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [PARENT_CLIN_IDF] VARCHAR(64),
  [OFFER_TYPE_IDF] VARCHAR(64),
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [SPECIFICATIONS] VARCHAR(MAX),
  [PRICE] MONEY NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [OS_SPECS] VARCHAR(256),
  [OS_CODE] VARCHAR(64),
  [PROCESSOR_CODE] VARCHAR(64),
  [OS_CLIN_IDF] VARCHAR(64),
  [RAM_SPECS] VARCHAR(256),
  [RAM_CODE] VARCHAR(64),
  [RAM_UPGRADE] VARCHAR(256),
  [RAM_CLIN_IDF] VARCHAR(64),
  [HARD_DRIVE_SPECS] VARCHAR(256),
  [HARD_DRIVE_CLIN_IDF] VARCHAR(64),
  [HARD_DRIVE_CODE] VARCHAR(64),
  [GRAPHIC_SPECS] VARCHAR(256),
  [GRAPHIC_UPGRADE_SPECS] VARCHAR(256),
  [GRAPHIC_CLIN_IDF] VARCHAR(64),
  [DISPLAY_SIZE] VARCHAR(256),
  [DISPLAY_CLIN_IDF] VARCHAR(64),
  [DISPLAY_RESOLUTION] VARCHAR(256),
  [DISPLAY_CODE] VARCHAR(64),
  [DOCKING_STATION_SPECS] VARCHAR(256),
  [DOCKING_STATION_CLIN_IDF] VARCHAR(64),
  [DOCKING_STATION_CODE] VARCHAR(64),
  [SOUND_SPECS] VARCHAR(256),
  [SOUND_CLIN_IDF] VARCHAR(64),
  [SPEAKER_SPECS] VARCHAR(256),
  [SPEAK_CLIN_IDF] VARCHAR(64),
  [OPTICAL_DRIVE_SPECS] VARCHAR(MAX),
  [OPTICAL_DRIVE_CLIN_IDF] VARCHAR(64),
  [KEYBOARD_SPECS] VARCHAR(512),
  [KEYBOARD_CLIN_IDF] VARCHAR(512),
  [MOUSE_SPECS] VARCHAR(64),
  [MOUSE_CLIN_IDF] VARCHAR(64),
  [WEBCAM_SPECS] VARCHAR(256),
  [WEBCAM_CLIN_IDF] VARCHAR(64),
  [MICROPHONE_SPECS] VARCHAR(256),
  [MICROPHONE_CLIN_IDF] VARCHAR(64),
  [BLUETOOTH_SPECS] VARCHAR(256),
  [BLUETOOTH_CODE] VARCHAR(64),
  [TRACKPAD_SPECS] VARCHAR(256),
  [TRACKPAD_IDF] VARCHAR(64),
  [SMART_CARD_READER_SPECS] VARCHAR(256),
  [SMART_CARD_READER_CLIN_IDF] VARCHAR(64),
  [NETWORK_INTERFACE_SPECS] VARCHAR(512),
  [NETWORK_INTERFACE_CLIN_IDF] VARCHAR(64),
  [PORT_SPECS] VARCHAR(512),
  [EXPANSION_SLOTS] VARCHAR(512),
  [PLATFORM_INTEGRITY_SPECS] VARCHAR(512),
  [PLATFORM_INTEGRITY_CLIN_IDF] VARCHAR(64),
  [PLATFORM_INTEGRITY_CODE] VARCHAR(64),
  [WEIGHT_CODE] VARCHAR(64),
  [SIZE_CODE] VARCHAR(64),
  CONSTRAINT [PK__FSSI_LIN__3214EC2752B16FCF] PRIMARY KEY ([CLIN_IDF], [CONTRACT_IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_CONTRACTOR_RATES] (
  [IDF] VARCHAR(64) DEFAULT 'RATE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [LABOR_CATEGORY_IDF] VARCHAR(64),
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [GOV_YR_1] MONEY,
  [GOV_YR_2] MONEY,
  [GOV_YR_3] MONEY,
  [GOV_YR_4] MONEY,
  [GOV_YR_5] MONEY,
  [GOV_YR_6] MONEY,
  [GOV_YR_7] MONEY,
  [GOV_YR_8] MONEY,
  [GOV_YR_9] MONEY,
  [GOV_YR_10] MONEY,
  [CON_YR_1] MONEY,
  [CON_YR_2] MONEY,
  [CON_YR_3] MONEY,
  [CON_YR_4] MONEY,
  [CON_YR_5] MONEY,
  [CON_YR_6] MONEY,
  [CON_YR_7] MONEY,
  [CON_YR_8] MONEY,
  [CON_YR_9] MONEY,
  [CON_YR_10] MONEY,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [RATE_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [RATE] MONEY,
  [AVERAGE_RATE] MONEY,
  [MIN_RATE] MONEY,
  [MAX_RATE] MONEY,
  CONSTRAINT [IX_REF_NITAAC_CONTRACTOR_RATES1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_DEFINITIONS] (
  [IDF] VARCHAR(64) DEFAULT 'DEFN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [MASK_VALUE] INT DEFAULT 0,
  [SOURCE] VARCHAR(256),
  [SOURCE_CODE] VARCHAR(16),
  [PARENT_CODE] VARCHAR(16),
  [PARENT_IDF] VARCHAR(64),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_REF_NITAAC_DEFINITIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_FEE_RATES] (
  [IDF] VARCHAR(64) DEFAULT 'FEEX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [RATE] FLOAT,
  [FROM_AMOUNT] MONEY,
  [TO_AMOUNT] MONEY,
  [AMOUNT_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [ENFORCED_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_REF_NITAAC_FEE_RATES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_IDS] (
  [IDF] VARCHAR(64) DEFAULT 'IDS__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ID_NUMBER] INT,
  [NEXT_ID_NUMBER] INT,
  [ORGANIZATION_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64),
  [VALUE_CODE] VARCHAR(16),
  [PREFIX] VARCHAR(16),
  [SUFFIX] VARCHAR(16),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [NAME_CODE] VARCHAR(128),
  [DESCRIPTION] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(19),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [LOCKED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  [LOCK_EXPIRED_DATE] DATETIME,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  CONSTRAINT [PK_REF_NITAAC_IDS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_LABOR_CATEGORIES] (
  [IDF] VARCHAR(64) DEFAULT 'LCAT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_REF_NITAAC_LABOR_CATEGORIES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_LABOR_RATES] (
  [IDF] VARCHAR(64) DEFAULT 'CRTR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [FISCAL_YEAR] INT DEFAULT 2016 NOT NULL,
  [LABOR_CATEGORY_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [CONTRACT_YEAR_NO] INT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DISCOUNT_AVAILABLE_IDR] BIT DEFAULT 0,
  [RATE_UOM] VARCHAR(16) DEFAULT 'C_USD',
  [RATE] MONEY,
  [MIN_RATE] MONEY,
  [MAX_RATE] MONEY,
  [GSA_RATE] MONEY,
  [MIN_RATE_CONTRACT_NO] VARCHAR(24),
  [MAX_RATE_CONTRACT_NO] VARCHAR(24),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_REF_NITAAC_LABOR_RATES] PRIMARY KEY ([IDF], [FISCAL_YEAR])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_OEM_MFR] (
  [IDF] VARCHAR(64) DEFAULT 'OEMX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ADDRESS_IDF] VARCHAR(64),
  [URL] VARCHAR(40),
  [SEARCH_BY_WORDS] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_REF_NITAAC_OEM_MFR] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_REVIEW_SCOPES] (
  [IDF] VARCHAR(64) DEFAULT 'RVSP_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [RFP_IDR] BIT DEFAULT 0,
  [COMMENT_REQUIRED_IDR] BIT NOT NULL,
  [SORT_ORDER] INT NOT NULL,
  [TEMPLATE_SECTION] VARCHAR(256) NOT NULL,
  [TEMPLATE_TITLE] VARCHAR(256) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [GOAL_NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SYM_REVIEW_QUEST__6B30A2D1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_NITAAC_UPC_INFO] (
  [IDF] VARCHAR(64) DEFAULT 'UPCX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ADDRESS_IDF] VARCHAR(64) NOT NULL,
  [UPC] VARCHAR(16) NOT NULL,
  [URL] VARCHAR(256),
  [SOURCE] VARCHAR(256),
  [SEARCH_BY_WORDS] VARCHAR(MAX),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_REF_NITAAC_UPC_INFO] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_REOURCE_SHARING] (
  [IDF] VARCHAR(64) DEFAULT 'UPOC_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [ORGANIZATION_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME DEFAULT GetDate(),
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ORGANIZATION_LEVEL_DEPTH] INT,
  [ORGANIZATION_LEVEL_NAME] VARCHAR(255),
  CONSTRAINT [PK_REF_REOURCE_SHARING] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REF_STATE_COUNTRIES] (
  [IDF] VARCHAR(64) DEFAULT 'CNTY_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [VERSION] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [TIME_ZONE] VARCHAR(16),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  CONSTRAINT [IX_REF_COUNTRIES1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[RELEASE_CONTENTS] (
  [IDF] VARCHAR(64) DEFAULT 'RCNT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [RELEASE_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [NEW_IDR] BIT DEFAULT 0,
  [IMPROVEMENT_IDR] BIT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [PLAN_DATE] DATETIME,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [APPLICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_RELEASE_CONTENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[RELEASE_ENVIRONMENTS] (
  [IDF] VARCHAR(64) DEFAULT 'RENV_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [PLAN_DATE] DATETIME,
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [APPLICATION_IDF] VARCHAR(64),
  [RELEASE_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_RELEASE_ENVIRONMENTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REPORT_DETAILS] (
  [IDF] NCHAR(64) DEFAULT 'RPTD_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REPORT_IDF] VARCHAR(64) NOT NULL,
  [USER_GROUP_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  CONSTRAINT [PK_REPORT_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REPORTS] (
  [IDF] VARCHAR(64) DEFAULT 'RPTX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 744,
  [ACCESS_LIST] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CRITERIA_PANEL_NAME] VARCHAR(256) NOT NULL,
  [FILE_NAME] VARCHAR(256) NOT NULL,
  [NOTE_TEXT] VARCHAR(2048) NOT NULL,
  [BASE_IDF] VARCHAR(64) NOT NULL,
  [PARENT_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_REPORTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[REQUEST_RESPONSES] (
  [IDF] VARCHAR(64) DEFAULT 'RSPS_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REVISION_IDR] BIT DEFAULT 0,
  [NOTIFICATION_IDR] BIT DEFAULT 0,
  [NAME_CODE] VARCHAR(128),
  [ANSWE_NUMBER] INT DEFAULT 1,
  [ANSWE_BODY_TEXT] VARCHAR(MAX),
  [CATEGORY_CODE] VARCHAR(16) DEFAULT 'C_CONTRACTOR',
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [EXTENDED_NOTE_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [REQUEST_IDF] VARCHAR(64) NOT NULL,
  [RESPONSOR_IDF] VARCHAR(64) NOT NULL,
  [NOTIFICAITON_IDF] VARCHAR(64),
  CONSTRAINT [PK_REQUEST_RESPONSES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[SALES_REPORT] (
  [IDF] VARCHAR(64) DEFAULT 'SRPT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PERSON_IDF] VARCHAR(64),
  [CONTRACT_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [REPORT_PERIOD] VARCHAR(256),
  [REPORT_PERIOD_START_DATE1] DATETIME,
  [REPORT_PERIOD_END_DATE1] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [CERTIFIED_IDR] BIT DEFAULT 0,
  [CERTIFIED_DATE] DATETIME,
  [CERTIFIED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK__SALES_REPORT__34157811] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[SALES_REPORT_ITEM] (
  [IDF] VARCHAR(64) DEFAULT 'SITM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TOTAL_AMOUNT] MONEY NOT NULL,
  [ACCESS_FEE] MONEY NOT NULL,
  [AWARD_CEILING] MONEY NOT NULL,
  [CHANGED_AMOUNT] MONEY,
  [FUNDED_VALUE] MONEY NOT NULL,
  [ORDER_TYPE] VARCHAR(16) NOT NULL,
  [POP_END_DATE] DATETIME NOT NULL,
  [POP_START_DATE] DATETIME NOT NULL,
  [TRACK_ID] VARCHAR(128) NOT NULL,
  [ORDERING_AGENCY_ORG_IDF] VARCHAR(64) NOT NULL,
  [MOD_NUMBER] INT,
  [MOD_CREATED] DATETIME,
  [ORDER_IDF] VARCHAR(64) NOT NULL,
  [SALES_REPORT_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SALES_REPORT_ITE__38DA2D2E] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[SCHEDULE_JOBS] (
  [IDF] VARCHAR(64) DEFAULT 'SJOB_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_ID] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [PROCEDURE_NAME] VARCHAR(128),
  [PROCEDURE_CODE] VARCHAR(64),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL',
  [REPEAT_IDR] BIT DEFAULT 0,
  [RETRY_IDR] BIT DEFAULT 0,
  [RETRY_COUNT] INT DEFAULT 0,
  [RETRY_MAX_COUNT] INT DEFAULT 3,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ONLY_BUSINESS_DAY_IDR] BIT DEFAULT 0,
  [NOTIFICATION_IDR] BIT DEFAULT 1,
  [NOTIFICATION_IDF] VARCHAR(64),
  [SCHEDULER_IDF] VARCHAR(64) NOT NULL,
  [OWNER_CODE] VARCHAR(16) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_SCHEDULE_JOBS] PRIMARY KEY ([IDF], [OWNER_ID])
)
GO

CREATE TABLE [dbo].[SHOP_CART_ITEMS] (
  [SHOP_CART_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CLIN_PARENT_IDF] VARCHAR(64),
  [CONTRACTOR_CLIN_ID] VARCHAR(128),
  [CONTRACTOR_PARENT_CLIN_ID] VARCHAR(128),
  [CATEGORY_IDF] VARCHAR(64),
  [COMMODITY_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DELIVERY_DATE] DATETIME,
  [UOM] VARCHAR(64),
  [UNIT_PRICE] MONEY,
  [DISCOUNT_RATE] DECIMAL DEFAULT 0.0,
  [QUANTITY] INT,
  [TAX] MONEY,
  [SUBTOTAL_AMOUNT] MONEY,
  CONSTRAINT [PK_SHOP_CART_ITEMS] PRIMARY KEY ([SHOP_CART_IDF], [CONTRACTOR_IDF], [CLIN_IDF])
)
GO

CREATE TABLE [dbo].[SHOP_CARTS] (
  [IDF] VARCHAR(64) DEFAULT 'CART_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CUSTOMER_IDF] VARCHAR(64) NOT NULL,
  [REMINDER] VARCHAR(256),
  [REMINDERP_IDR] BIT DEFAULT 1,
  [NOTIFICATION_EMAIL] VARCHAR(128),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DELIVERY_DATE] DATETIME,
  [TOTAL_DELIVERY] NUMERIC(12),
  [QUANTITY] INT DEFAULT 0 NOT NULL,
  [TOTAL_COST] MONEY,
  [DISCOUNT_AMOUNT] MONEY DEFAULT 0.0,
  [TOTAL_TAX] MONEY,
  [TOTALL_AMOUNT] MONEY,
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_SHOP_CARTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[SIMPLE_WORKFLOW_ACTIVITIES] (
  [WORKFLOW_IDF] VARCHAR(64) NOT NULL,
  [ACTIVITY_IDF] VARCHAR(64) NOT NULL,
  [PREVIOUS_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_SIMPLE_WORKFLOW_ACTIVITIES] PRIMARY KEY ([WORKFLOW_IDF], [ACTIVITY_IDF])
)
GO

CREATE TABLE [dbo].[SIMPLE_WORKFLOW_TASKS] (
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [WORKFLOW_IDF] VARCHAR(64) NOT NULL,
  [PREVIOUS_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_SIMPLE_WORKFLOW_TASKS] PRIMARY KEY ([TASK_IDF], [WORKFLOW_IDF])
)
GO

CREATE TABLE [dbo].[SP_ORDER_TASKS] (
  [IDF] VARCHAR(64) DEFAULT 'SPTO_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [ORDER_TASK_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_SP_TO_2C745649] PRIMARY KEY ([ORDER_TASK_IDF], [IDF])
)
GO

CREATE TABLE [dbo].[SYM_ORGANIZATION_EXT] (
  [ORG_TYPE] VARCHAR(31) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [ID] NUMERIC(19) NOT NULL,
  [CREATED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [CREATED_WHEN] DATETIME NOT NULL,
  [MODIFIED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [MODIFIED_WHEN] DATETIME NOT NULL,
  [VERSION] INT NOT NULL,
  [INTERNET_DOMAIN] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [LEVEL_I_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [LEVEL_II_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [LEVEL_II_PARENT_ID] NUMERIC(19),
  [LEVEL_III_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [LEVEL_III_PARENT_ID] NUMERIC(19),
  [LEVEL_IV_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [NICKNAME] VARCHAR(50) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [PARENT_ID] NUMERIC(19) NOT NULL,
  [SUB_TYPE_ID] INT NOT NULL,
  [CAGE] VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [DUNS] VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [EIN] VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [SBA_DESIGNATION] INT,
  [IDX] INT,
  [LEVEL_DEPTH] INT,
  [IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [LEVEL_I_IDF] VARCHAR(64),
  [LEVEL_II_IDF] VARCHAR(64),
  [LEVEL_III_IDF] VARCHAR(64),
  [LEVEL_IV_IDF] VARCHAR(64),
  [LEVEL_V_IDF] VARCHAR(64),
  [LEVEL_V_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [NOTE_TEXT] VARCHAR(1024),
  PRIMARY KEY ([ORG_TYPE], [ID])
)
GO

CREATE TABLE [dbo].[SYM_PERSON_EXT] (
  [ID] NUMERIC(19) NOT NULL,
  [CREATED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [CREATED_WHEN] DATETIME NOT NULL,
  [MODIFIED_BY] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [MODIFIED_WHEN] DATETIME NOT NULL,
  [VERSION] INT NOT NULL,
  [EMAIL] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [ESIGN_ACK] DATETIME,
  [ESIGN_EXPIRATION] DATETIME,
  [FAX] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [FIRST_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [HRID] VARCHAR(30) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [IS_ACTIVE] INT,
  [IS_CIO2_CUSTOMER] CHAR(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
  [JOB] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [LAST_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [MIDDLE_NAME] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [PHONE] VARCHAR(255) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [PREVIOUS_ID] INT,
  [ROB_ACK] DATETIME,
  [ROB_EXPIRATION] DATETIME,
  [SUFFIX] VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [TITLE] VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [ADDRESS_ID] NUMERIC(19),
  [USER_ID] NUMERIC(19),
  [ORG_ID] NUMERIC(19),
  [PHONE_EXTENSION] VARCHAR(10) COLLATE SQL_Latin1_General_CP1_CI_AS,
  [SHIPPING_ADDRESS_ID] NUMERIC(19),
  [OVERLAY_SHOW_FLAG] BIT,
  [IDX] INT,
  [IDF] VARCHAR(64),
  [ADDRESS_IDF] VARCHAR(64),
  [SHIPPING_ADDRESS_IDF] VARCHAR(64),
  [ORGANIZATION_IDF] VARCHAR(64),
  [USER_IDF] VARCHAR(64),
  [ID_EMAIL] VARCHAR(255),
  [ID_PHONE] VARCHAR(128),
  PRIMARY KEY ([ID])
)
GO

CREATE TABLE [dbo].[SYSTEM_CONFIGURATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'CFGX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_SYSTEM_CONFIGURATIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[SYSTEM_MAINTENANCES] (
  [IDF] VARCHAR(64) DEFAULT 'SMNT_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64),
  [POC_IDF] VARCHAR(64),
  [ACTION_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [REPORT_IDF] VARCHAR(64),
  [NOTE_TEXT] VARCHAR(2048),
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL' NOT NULL,
  [REPORT_DATE] DATETIME,
  [ACTION_TYPE] VARCHAR(16),
  [ACTION_DATE] DATETIME,
  [ALERT_TIMES] SMALLINT,
  [ALERT_TIME_STAMP] DATETIME,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [MESSAGE_IDF] VARCHAR(64),
  [NOTIFICATION_IDF] VARCHAR(64),
  CONSTRAINT [PK_Mainteance_ID] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TASK_ACTIVITIES] (
  [ACTIVITY_IDF] VARCHAR(64) NOT NULL,
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PREVIOUS_IDF] VARCHAR(64),
  CONSTRAINT [PK_TASK_ACTIVITIES] PRIMARY KEY ([ACTIVITY_IDF], [TASK_IDF])
)
GO

CREATE TABLE [dbo].[TASK_DELIVERABLE_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'DDTL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [DELIVERABLE_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_TASK_DELIVERABLE_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TASK_EVENTS] (
  [TASK_IDF] VARCHAR(64) NOT NULL,
  [EVENT_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PREVIOUS_IDF] VARCHAR(64),
  CONSTRAINT [PK_TASK_EVENTS] PRIMARY KEY ([TASK_IDF], [EVENT_IDF])
)
GO

CREATE TABLE [dbo].[TASK_MODIFICATIONS] (
  [IDF] VARCHAR(64) DEFAULT 'TSKM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [MODIFICATION_IDF] VARCHAR(64) DEFAULT 'TSKM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [AWARD_TIME] DATETIME,
  [BODY_TEXT] VARCHAR(MAX),
  [PO_TIME] DATETIME,
  [PROPOSAL_TIME] DATETIME,
  [QUESTION_TIME] DATETIME,
  [REJECTION_MESSAGE] VARCHAR(2048),
  [RELEASE_TIME] DATETIME,
  [SELECTION_TIME] DATETIME,
  [SEQUENCE_NUMBER] INT NOT NULL,
  [AMENDMENT_TYPE] VARCHAR(16),
  [CO_IDF] VARCHAR(64),
  [CO_ALT_IDF] VARCHAR(64),
  [COTR_IDF] VARCHAR(64),
  [COTR_ALT_IDF] VARCHAR(64),
  [CS_IDF] VARCHAR(64),
  [CS_ALT_IDF] VARCHAR(64),
  [APPROVER_IDF] VARCHAR(64),
  [ORDER_TASK_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [SUMMARY_NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [CHANGE_COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK__SYM_TO_AMENDMENT__05E4990D] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TELECOM_ADDRESSES] (
  [IDF] VARCHAR(64) DEFAULT 'TADR_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [PHONE] VARCHAR(64),
  [MOBILE] VARCHAR(64),
  [FAX] VARCHAR(64),
  [EMAIL] VARCHAR(128),
  [URL] VARCHAR(256),
  [INTERNATIONAL_CODE] VARCHAR(16),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [USAGE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  CONSTRAINT [PK_TELECOM_ADDRESSES] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TICKET_DETAILS] (
  [IDF] VARCHAR(64) DEFAULT 'TDTL_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TICKET_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [DOCUMENT_IDF] VARCHAR(64),
  CONSTRAINT [PK_TICKET_DETAILS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TICKET_RESOLUTIONS] (
  [IDF] VARCHAR(64) DEFAULT 'SLNX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [ASSIGNED_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [LOCKED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  [LOCK_EXPIRED_DATE] DATETIME,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLICATIOIN_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  [SUBMITTER_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [TICKET_IDF] VARCHAR(64) NOT NULL,
  CONSTRAINT [PK_TICKET_RESOLUTIONS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TICKETS] (
  [IDF] VARCHAR(64) DEFAULT 'TKTX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [ASSIGNED_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [LOCKED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  [LOCK_EXPIRED_DATE] DATETIME,
  [POSITION_ORDER] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [APPLICATIOIN_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64) NOT NULL,
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [ASSIGNED_DATE] DATETIME,
  [ASSIGNED_TO] VARCHAR(128),
  [WOKRED_DATE] DATETIME,
  [WORKED_BY] VARCHAR(128),
  CONSTRAINT [PK_TICKETS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TRP_CLIN_REVIEW_ERRORS] (
  [IDF] VARCHAR(64) DEFAULT 'ERR__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [REVIEW_CLIN_IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TRP_IDF] VARCHAR(64) DEFAULT 'XXXX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ERROR_CODE] VARCHAR(32),
  [NOTE_TEXT] VARCHAR(2048),
  [CONTRACTOR_NOTE_TEXT] VARCHAR(2048),
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [EFFECTIVE_START_DATE] DATETIME DEFAULT GetDate(),
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  CONSTRAINT [PK_TRP_CLIN_REVIEW_ERRORS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TRP_CLIN_REVIEWS] (
  [IDF] VARCHAR(64) DEFAULT 'CLIN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TRP_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) DEFAULT 'CLIN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0),
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [CONTRACTOR_CLIN_ID_STATUS_CODE] VARCHAR(128) NOT NULL,
  [CONTRACTOR_CLIN_ID_NOTE_TEXT] VARCHAR(128) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [NEOS_APPROVAL_IDR] BIT DEFAULT 0,
  [PACKAGE_ONLY_CLIN_IDR] BIT DEFAULT 0,
  [REQUEST_UPDATE_IDR] BIT DEFAULT 0,
  [REVISION_IDR] BIT DEFAULT 0,
  [CLIN_ACTION] VARCHAR(16),
  [CLIN_ACTION_STATUS_CODE] VARCHAR(16),
  [CLIN_ACTION_NOTE_TEXT] VARCHAR(2048),
  [OEM_PART_NUM] VARCHAR(128),
  [OEM_PART_MUM_STATUS_CODE] VARCHAR(16),
  [OEM_MFR_NAME] VARCHAR(128),
  [OEM_MFR_STATUS_CODE] VARCHAR(16),
  [OEM_PARTNO_MRF_NOTE_TEXT] VARCHAR(2048),
  [OEM_PRICE] MONEY,
  [OEM_PRICE_STATUS_CODE] VARCHAR(16),
  [OEM_PRICE_NOTE_TEXT] VARCHAR(2048),
  [CATALOG_PRICE] MONEY,
  [CATALOG_PRICE_STATUS_CODE] VARCHAR(16),
  [DISCOUNT_RATE_NOTE_TEXT] VARCHAR(2048),
  [PRICE] MONEY,
  [PRICE_STATUS_CODE] VARCHAR(16),
  [PRICE_NOTE_TEXT] VARCHAR(2048),
  [DISCOUNT_RATE] FLOAT,
  [DISCOUNT_RATE_STATUS_CODE] VARCHAR(16),
  [CATALOG_PRICE_NOTE_TEXT] VARCHAR(2048),
  [DISCOUNT_PERCENTAGE] FLOAT,
  [DISCOUNT_PERCENTAGE_STATUS_CODE] VARCHAR(16),
  [DISCOUNT_PERCENTAGE_NOTE_TEXT] VARCHAR(2048),
  [CONTRACT_CODE] VARCHAR(16),
  [CONTRACT_NOTE_TEXT] VARCHAR(2048),
  [CATEGORY_IDF] VARCHAR(64),
  [CATEGORY_STATUS_CODE] VARCHAR(16),
  [CATEGORY_NOTE_TEXT] VARCHAR(2048),
  [COMMODITY_IDF] VARCHAR(64),
  [COMMODITY_STATUS_CODE] VARCHAR(16),
  [COMMODITY_NOTE_TEXT] VARCHAR(2048),
  [WEIGHT] VARCHAR(256),
  [WEIGHT_CODE] VARCHAR(16),
  [WEIGHT_STATUS_CODE] VARCHAR(256),
  [WEIGHT_NOTE_TEXT] VARCHAR(2048),
  [WEIGHT_UOM] VARCHAR(16) DEFAULT 'C_POUND',
  [WARRANTY] VARCHAR(256),
  [WARRANTY_CODE] VARCHAR(16),
  [WARRANTY_STATUS_CODE] VARCHAR(16),
  [WARRANTY_NOTE_TEXT] VARCHAR(2048),
  [TAA_COMPLIANCE_IDR] BIT,
  [TAA_COMPLIANCE_STATUS_CODE] VARCHAR(16),
  [TAA_COMPLIANCE_NOTE_TEXT] VARCHAR(2048),
  [ACT_508_COMPLIANCE_IDR] BIT DEFAULT 0,
  [ACT_508_STATUS_CODE] VARCHAR(16),
  [ACT_508_NOTE_TEXT] VARCHAR(2048),
  [ENERGY_STAR_COMPLIANCE_IDR] BIT,
  [ENERGY_STAR_COMPLIANCE_STATUS_CODE] VARCHAR(16),
  [ENERGY_STAR_COMPLIANCE_NOTE_TEXT] VARCHAR(2048),
  [EPEAT_COMPLIANCE_IDR] BIT,
  [EPEAT_COMPLIANCE_STATUS_CODE] VARCHAR(16),
  [EPEAT_COMPLIANCE_NOTE_TEXT] VARCHAR(2048),
  [INITIAL_GOVERNMENT_QUANTITY] INT,
  [INITIAL_GOVERNMENT_QUANTITY_STATUS_CODE] VARCHAR(16),
  [INITIAL_GOVERNMENT_QUANTITY_NOTE_TEXT] VARCHAR(2048),
  [DELIVERY_PERIOD] VARCHAR(64),
  [DELIVERY_PERIOD_STATUS_CODE] VARCHAR(64),
  [DELIVERY_PERIOD_NOTE_TEXT] VARCHAR(2048),
  [DELIVERY_PERIOD_UOM] VARCHAR(16),
  [IMAGE_URL] VARCHAR(256),
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [NOTE_TEXT] VARCHAR(2048),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [OEM_PART_NAME] VARCHAR(256),
  [OEM_MODEL_NUM] VARCHAR(128),
  [OEM_PART_URL] VARCHAR(256),
  [UPC_CODE] VARCHAR(32),
  [QUANTITY] SMALLINT,
  [SALES_TYPE_IDR] BIT,
  [CONTRACTOR_CLIN_URL] VARCHAR(256),
  [CONTRACTOR_CLIN_SPECIFICATION] VARCHAR(MAX),
  [SUBMIT_DATE] DATETIME,
  [GSA_SCHED_CONTRACT_NUM] VARCHAR(128),
  [GSA_SCHED_PRICE] MONEY,
  [TIS_SPECIFICATION] VARCHAR(MAX),
  [SIZE] VARCHAR(256),
  [SIZE_CODE] VARCHAR(64),
  [SIZE_UOM] VARCHAR(16),
  [NUM_ASSOC_ELA] VARCHAR(16),
  [OMB_COMPLIANCE_IDR] BIT,
  [AUTHORIZED_TO_SALE_IDR] BIT,
  [COUNTRY_OF_ORIGIN] VARCHAR(128),
  [SHELF_LIFE] DATETIME,
  [CONTRACTOR_PARENT_CLIN_ID] VARCHAR(128),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_TRP_CLIN_REVIEWS__IDF] PRIMARY KEY ([IDF], [TRP_IDF])
)
GO

CREATE TABLE [dbo].[TRP_GSS_CLIN_REVIEWS] (
  [IDF] VARCHAR(64) DEFAULT 'CLIN_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [TRP_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [HARD_DRIVE_SPECS] VARCHAR(256),
  [OS_SPECS] VARCHAR(256),
  [OS_CODE] VARCHAR(64),
  [OS_STATUS_CODE] VARCHAR(16),
  [OS_NOTE_TEXT] VARCHAR(2048),
  [OS_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [PROCESSOR_CODE] VARCHAR(64),
  [PROCESSOR_STATUS_CODE] VARCHAR(16),
  [PROCESSOR_NOTE_TEXT] VARCHAR(2048),
  [RAM_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [RAM_SPECS] VARCHAR(256),
  [RAM_CODE] VARCHAR(64),
  [RAM_STATUS_CODE] VARCHAR(16),
  [RAM_NOTE_TEXT] VARCHAR(2048),
  [RAM_UPGRADE] VARCHAR(256),
  [RAM_CONTRACTPOR_CLIN_ID] VARCHAR(128),
  [HARD_DRIVE_CODE] VARCHAR(64),
  [HARD_DRIVE_STATUS_CODE] VARCHAR(16),
  [HARD_DRIVE_NOTE_TEXT] VARCHAR(2048),
  [HARD_DRIVE_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [GRAPHIC_SPECS] VARCHAR(256),
  [GRAPHIC_UPGRADE_SPECS] VARCHAR(256),
  [GRAPHIC_CONTRACTOR_CLIN_ID] VARCHAR(64),
  [DISPLAY_SIZE] VARCHAR(256),
  [DISPLAY_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [DISPLAY_RESOLUTION] VARCHAR(256),
  [DISPLAY_CODE] VARCHAR(64),
  [DISPLAY_STATUS_CODE] VARCHAR(16),
  [DISPLAY_NOTE_TEXT] VARCHAR(2048),
  [DOCKING_STATION_SPECS] VARCHAR(256),
  [DOCKING_STATION_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [DOCKING_STATION_CODE] VARCHAR(64),
  [DOCKING_STATUS_NOTE_TEXT] VARCHAR(2048),
  [SOUND_SPECS] VARCHAR(256),
  [SOUND_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [SPEAKER_SPECS] VARCHAR(256),
  [SPEAKER_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [OPTICAL_DRIVE_SPECS] VARCHAR(MAX),
  [OPTICAL_DRIVE_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [KEYBOARD_SPECS] VARCHAR(512),
  [KEYBOARD_CONTRACTOR_CLIN_ID] VARCHAR(512),
  [MOUSE_SPECS] VARCHAR(64),
  [MOUSE_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [WEBCAM_SPECS] VARCHAR(256),
  [WEBCAM_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [MICROPHONE_SPECS] VARCHAR(256),
  [MICROPHONE_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [BLUETOOTH_SPECS] VARCHAR(256),
  [BLUETOOTH_CODE] VARCHAR(64),
  [BLUETOOTH_STATUS_CODE] VARCHAR(16),
  [BLUETOOTH_NOTE_TEXT] VARCHAR(2048),
  [TRACKPAD_SPECS] VARCHAR(256),
  [TRACKPAD_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [SMART_CARD_READER_SPECS] VARCHAR(256),
  [SMART_CARD_READER_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [NETWORK_INTERFACE_SPECS] VARCHAR(512),
  [NETWORK_INTERFACE_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [PORT_SPECS] VARCHAR(512),
  [EXPANSION_SLOTS] VARCHAR(512),
  [PLATFORM_INTEGRITY_SPECS] VARCHAR(512),
  [PLATFORM_INTEGRITY_CONTRACTOR_CLIN_ID] VARCHAR(128),
  [PLATFORM_INTEGRITY_CODE] VARCHAR(64),
  CONSTRAINT [PK_TRP_GSS_CLIN_REVIEWS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[TRP_UPLOADS] (
  [IDF] VARCHAR(64) DEFAULT 'TRP__'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [CONTRACT_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [POC_IDF] VARCHAR(64),
  [SUBMITTER_IDF] VARCHAR(64) NOT NULL,
  [SUBMIT_DATE] DATETIME NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32) NOT NULL,
  [ACTION_CODE] VARCHAR(64),
  [ACTION_DATE] DATETIME,
  [REASON_CODE] VARCHAR(16),
  [CLIN_COUNT] INT NOT NULL,
  [CLIN_FAILED_COUNT] INT DEFAULT -1 NOT NULL,
  [CLIN_REVIEW_COUNT] INT DEFAULT 0 NOT NULL,
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [CONTRACTOR_NOTE_TEXT] VARCHAR(2048),
  [NITAAC_NOTE_TEXT] VARCHAR(2048),
  [BODY_TEXT] VARCHAR(MAX),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [DOCUMENT_IDR] BIT DEFAULT 1,
  [OEM_IDR] BIT DEFAULT 1,
  [REQUEST_UPDATE_IDR] BIT DEFAULT 0,
  [WITHDRAWN_IDR] BIT,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [LOCKED_DATE] DATETIME,
  [LOCKED_BY] VARCHAR(128),
  [LOCK_EXPIRED_DATE] DATETIME,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [PROPOSAL_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  CONSTRAINT [PK_TRP_UPLOADS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[USER_APPLICATION_ROLES] (
  [USER_IDF] VARCHAR(64) NOT NULL,
  [ROLE_IDF] VARCHAR(64) NOT NULL,
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [PERSON_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LIST] BIGINT DEFAULT 744,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_USER_APPLICATION_ROLES] PRIMARY KEY ([ROLE_IDF], [USER_IDF], [APPLICATION_IDF])
)
GO

CREATE TABLE [dbo].[USER_FEEDBACKS] (
  [IDF] VARCHAR(64) DEFAULT 'FDBK_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [MESSAGE_NOTE_TEXT] VARCHAR(2048),
  [ATTACHMENT_IDR] BIT DEFAULT 0,
  [PAGE_LOCATION] VARCHAR(256),
  [NAME_CODE] VARCHAR(255),
  [NOTE_TEXT] VARCHAR(2048),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_USER_FEEDBACKS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[USER_REQUEST] (
  [IDF] VARCHAR(64) DEFAULT 'RQST_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [REQUESTED_ITEM_IDF] VARCHAR(64),
  [REQUESTED_ITEM_TYPE] VARCHAR(16) NOT NULL,
  [PRIORITY_CODE] VARCHAR(16) DEFAULT 'C_NORMAL' NOT NULL,
  [NOTE_TEXT] VARCHAR(2048),
  [ADMIN_NOTE_TEXT] VARCHAR(1024),
  [DECISION_CODE] VARCHAR(16),
  [ATTACHMENT_IDR] BIT DEFAULT 0,
  [NOTIFIED_IDR] BIT DEFAULT 0,
  [PERIOD] SMALLINT NOT NULL,
  [STATUS_OLD_IDR] BIT,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [REQUESTED_DATE] DATETIME,
  [REQUESTED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ACCESS_LEVEL] INT DEFAULT 744,
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_Request_ID] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[USER_SETTINGS] (
  [USER_IDF] VARCHAR(64) NOT NULL,
  [GROUP_REFERENCE_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_USER_SETTINGS] PRIMARY KEY ([GROUP_REFERENCE_IDF], [USER_IDF])
)
GO

CREATE TABLE [dbo].[USERS] (
  [IDF] VARCHAR(64) DEFAULT 'USRX_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [OWNER_IDF] VARCHAR(64),
  [APPLICATION_IDF] VARCHAR(64) NOT NULL,
  [USER_GROUP_IDF] VARCHAR(64),
  [USERNAME] VARCHAR(256) NOT NULL,
  [EMAIL] VARCHAR(256) NOT NULL,
  [EMAIL_IDR] BIT DEFAULT 0 NOT NULL,
  [FULL_NAME] VARCHAR(256) NOT NULL,
  [TOKEN] VARCHAR(256),
  [TOKEN_CODE] VARCHAR(16),
  [HEAR_ABOUT_US] VARCHAR(128),
  [NIH_USER_IDR] BIT DEFAULT 0,
  [ADMIN_APPROVED_IDR] BIT DEFAULT 1 NOT NULL,
  [AFFILIATION] VARCHAR(128),
  [REQUESTED_DATE] DATETIME,
  [REQUESTED_ROLES] VARCHAR(128),
  [ROB_ACCEPT_IDR] BIT DEFAULT 0,
  [ROB_ACCEPTED_DATE] DATETIME,
  [ROB_EXPIRATION] DATETIME,
  [LAST_ROLE_CHANGE] DATETIME,
  [LOGIN_COUNT] SMALLINT DEFAULT 0 NOT NULL,
  [TRACK_IPS] VARCHAR(1024),
  [BAD_PASSWORD_COUNT] INT,
  [HASH] VARCHAR(256),
  [LAST_ACCESS] DATETIME,
  [PASSWORD] VARCHAR(256),
  [PASSWORD_EXPIRATION] DATETIME,
  [RESET] INT DEFAULT 0 NOT NULL,
  [SECRET_ANSWER] VARCHAR(256),
  [SECRET_QUESTION] VARCHAR(256),
  [SESSION_ID] VARCHAR(64),
  [USER_AGENT] VARCHAR(512),
  [LAST_SUCCESSFUL_LOGIN] DATETIME,
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [FEDERAL_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [LOCKED_BY] VARCHAR(128),
  [LOCKED_DATE] DATETIME,
  [LOCK_EXPIRED_DATE] DATETIME,
  [ACCESS_LEVEL] BIGINT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [REVIEWED_DATE] DATETIME,
  [REVIEWED_BY] VARCHAR(128),
  [APPROVED_DATE] DATETIME,
  [APPROVED_BY] VARCHAR(128),
  [ORGANIZATION_IDF] VARCHAR(64),
  [AGENT_IDF] VARCHAR(64),
  [OFFICE_IDF] VARCHAR(64),
  [CONTACT_IDF] VARCHAR(64),
  CONSTRAINT [PK_USER_IDF] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[WHAT_IS_NEW] (
  [IDF] VARCHAR(64) DEFAULT 'NITM_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [RELEASE_IDF] VARCHAR(64) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [GROUP_ROLE_IDF] VARCHAR(64),
  [NOTE_TEXT] VARCHAR(2014),
  [WHAT_IS_NEW_DATE] DATETIME,
  [RELEASE_VERSION] VARCHAR(64),
  [PAGE_LOCATION] VARCHAR(256),
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [IX_CS_WHAT_IS_NEW1] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[WISH_LIST_ITEMS] (
  [IDF] VARCHAR(64) DEFAULT 'LSTI_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [WISH_LIST_IDF] VARCHAR(64) NOT NULL,
  [CLIN_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_IDF] VARCHAR(64) NOT NULL,
  [CONTRACTOR_CLIN_ID] VARCHAR(128) NOT NULL,
  [RFQ_ITEM_IDR] BIT,
  [NAME_CODE] VARCHAR(128),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] BIGINT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [UOM] VARCHAR(64),
  [UNIT_PRICE] MONEY,
  [DISCOUNT_RATE] DECIMAL DEFAULT 0.0,
  [QUANTITY] INT,
  [TAX] MONEY,
  [SUBTOTAL_AMOUNT] MONEY,
  CONSTRAINT [PK_WISH_LIST_ITEMS] PRIMARY KEY ([CONTRACTOR_CLIN_ID], [WISH_LIST_IDF], [IDF])
)
GO

CREATE TABLE [dbo].[WISH_LISTS] (
  [IDF] VARCHAR(64) DEFAULT 'WLST_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [USER_IDF] VARCHAR(64) NOT NULL,
  [CONTACT_IDF] VARCHAR(64),
  [REMINDER] VARCHAR(64),
  [NOTIFICATION_EMAIL] VARCHAR(256),
  [QUANTITY] VARCHAR(64) NOT NULL,
  [TOTAL_PRICE] MONEY NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_WISH_LISTS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[WORKFLOW_NODE_JOBS] (
  [IDF] VARCHAR(64) DEFAULT 'JND_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [NODE_IDF] VARCHAR(64) DEFAULT 'JND_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [PREVIOUS_IDF] VARCHAR(64),
  [NEXT_IDF] VARCHAR(64),
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [OWNER_IDF] VARCHAR(64),
  [OWNER_CODE] VARCHAR(16),
  [NAME_CODE] VARCHAR(128),
  [ACTION_CODE] VARCHAR(64),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [REASON_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [NOTE_TEXT] VARCHAR(2048),
  [EFFECTIVE_START_DATE] DATETIME DEFAULT GetDate(),
  [EFFECTIVE_END_DATE] DATETIME,
  [STATUS_CODE] VARCHAR(8) DEFAULT 'ACTIVE',
  [STATUS_DATE] DATETIME DEFAULT GetDate(),
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [VERIFICATION_IDR] BIT DEFAULT 0,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [MANDATORY_IDR] BIT DEFAULT 0,
  [SHOWSTOP_IDR] BIT DEFAULT 0,
  [ASSIGNED_IDR] BIT DEFAULT 0,
  [NOTIFICATION_IDR] BIT DEFAULT 0,
  [IN_PROCESS_IDR] BIT DEFAULT 0,
  [CREATED_DATE] DATETIME DEFAULT GetDate(),
  [CREATED_BY] VARCHAR(128) DEFAULT sUSER_NAME(),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  CONSTRAINT [PK_WORKFLOW_NODE_JOBS] PRIMARY KEY ([IDF])
)
GO

CREATE TABLE [dbo].[WORKFLOW_NODES] (
  [IDF] VARCHAR(64) DEFAULT 'NODE_'+replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','')+'_'+Convert(varchar(32),replace(newid(),'-',''),0) NOT NULL,
  [WOKRFLOW_IDF] VARCHAR(64) NOT NULL,
  [NAME_CODE] VARCHAR(128),
  [VALUE_CODE] VARCHAR(32),
  [ACTION_CODE] VARCHAR(64),
  [ACRONYM_NAME] VARCHAR(8),
  [CATEGORY_CODE] VARCHAR(16),
  [TYPE_CODE] VARCHAR(16),
  [DESCRIPTION] VARCHAR(256),
  [STATUS_CODE] VARCHAR(8),
  [STATUS_DATE] DATETIME,
  [COMMENTS] VARCHAR(256),
  [REFERENCE_CODE] VARCHAR(16),
  [REFERENCE_ID] VARCHAR(64),
  [REFERENCE_NAME] VARCHAR(256),
  [CREATED_DATE] DATETIME,
  [CREATED_BY] VARCHAR(128),
  [UPDATED_DATE] DATETIME,
  [UPDATED_BY] VARCHAR(128),
  [UPDATED_COUNT] INT DEFAULT 0,
  [POSITION_ORDER] INT DEFAULT 0,
  [VERSION] VARCHAR(64) DEFAULT 'V_1.0:INITIAL',
  [ROOT_IDF] VARCHAR(64) NOT NULL,
  [PARENT_IDF] VARCHAR(64),
  [PARENT_CODE] VARCHAR(16),
  [EFFECTIVE_START_DATE] DATETIME,
  [EFFECTIVE_END_DATE] DATETIME,
  [PRIMARY_IDR] BIT DEFAULT 0,
  [ACCESS_LEVEL] INT DEFAULT 744,
  [NEXT_IDF] VARCHAR(64),
  CONSTRAINT [PK_WORKFLOW_NODES] PRIMARY KEY ([IDF])
)
GO

/*================================================================================*/
/* CREATE INDEXES                                                                 */
/*================================================================================*/

CREATE INDEX [IX_CONTRACT_ID] ON [dbo].[ACCOUNT_AUTHORIZATION] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_MODIFICATION_ID] ON [dbo].[ACCOUNT_TRANSACTIONS] ([MODIFICATION_IDF])
GO

CREATE INDEX [IX_ADDRESSES_REFID] ON [dbo].[ADDRESSES] ([REFERENCE_ID])
GO

CREATE INDEX [IX_FK_APPLICATION_ROLES] ON [dbo].[APPLICATION_ROLES] ([ROLE_IDF])
GO

CREATE INDEX [IX_FK_APPLICATION_ROLES1] ON [dbo].[APPLICATION_ROLES] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_APX_USER_EXT1] ON [dbo].[APX_USER_EXT] ([IDF])
GO

CREATE INDEX [IX_FK_AWARD_DELIVERIES] ON [dbo].[AWARD_DELIVERIES] ([AWARD_IDF], [PROPOSAL_IDF])
GO

CREATE INDEX [IX_FK_AWARD_DELIVERIES1] ON [dbo].[AWARD_DELIVERIES] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_FK_AWARD_DELIVERIES2] ON [dbo].[AWARD_DELIVERIES] ([POC_IDF])
GO

CREATE INDEX [IX_FK_AWARD_DELIVERIES3] ON [dbo].[AWARD_DELIVERIES] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_FK_AWARD_FINANCES] ON [dbo].[AWARD_FINANCES] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_AWARD_GSS_CLIN_OPTIONS] ON [dbo].[AWARD_GSS_CLIN_OPTIONS] ([AWARD_IDF], [PROPOSAL_IDF], [CLIN_IDF])
GO

CREATE INDEX [IX_AWARD_ID] ON [dbo].[AWARD_MODIFICATIONS] ([AWARDED_IDR])
GO

CREATE INDEX [IX_FK_AWARD_MODIFICATIONS] ON [dbo].[AWARD_MODIFICATIONS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_FK_AWARD_MODIFICATIONS1] ON [dbo].[AWARD_MODIFICATIONS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_ORDER_IDF] ON [dbo].[AWARD_MODIFICATIONS] ([ORDER_IDF], [AWARD_IDF], [CONTRACTOR_IDF])
GO

CREATE INDEX [IX_SYM_ATTACHMENT_ID] ON [dbo].[AWARD_MODIFICATIONS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_AWARD_PAYMENTS1] ON [dbo].[AWARD_PAYMENTS] ([ORDER_IDF])
GO

CREATE INDEX [IX_AWARD_PAYMENTS2] ON [dbo].[AWARD_PAYMENTS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_AWARD_PAYMENTS] ON [dbo].[AWARD_PAYMENTS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_AWARD_ID] ON [dbo].[AWARD_PERIODS] ([AWARD_IDF])
GO

CREATE INDEX [IX_AWARDED_CLINS_CLIN_IDF] ON [dbo].[AWARDED_CLINS] ([CLIN_IDF])
GO

CREATE INDEX [IX_FK_AWARDED_CLINS] ON [dbo].[AWARDED_CLINS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

CREATE INDEX [IX_FK_AWARDED_PROPOSALS] ON [dbo].[AWARDED_PROPOSALS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_AWARDS_VALUE_CODE] ON [dbo].[AWARDS] ([VALUE_CODE])
GO

CREATE INDEX [IX_FK_AWARDS_CUSTOMER_IDF] ON [dbo].[AWARDS] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_FK_AWARDS_DOC_IDF] ON [dbo].[AWARDS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_FK_AWARDS_SUBMITTER_IDF] ON [dbo].[AWARDS] ([AWARD_SUBMITTER_IDF])
GO

CREATE INDEX [IX_CODE_CATEGORY_TYPES_CT] ON [dbo].[CODE_CATEGORY_TYPES] ([CATEGORY_CODE], [TYPE_CODE])
GO

CREATE INDEX [IX_CODE_CATEGORY_TYPES1] ON [dbo].[CODE_CATEGORY_TYPES] ([VALUE_CODE])
GO

CREATE INDEX [IX_CODE_ERRORS_ID] ON [dbo].[CODE_ERRORS] ([POSITION_ORDER])
GO

CREATE INDEX [IX_CODE_ERRORS_VC] ON [dbo].[CODE_ERRORS] ([VALUE_CODE])
GO

CREATE INDEX [IX_FK_CODE_GROUPS] ON [dbo].[CODE_GROUPS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_CODE_GROUPS1] ON [dbo].[CODE_GROUPS] ([CONTACT_IDF])
GO

CREATE INDEX [IX_FK_CODE_HOLIDAYS] ON [dbo].[CODE_HOLIDAYS] ([COUNTRY_IDF])
GO

CREATE INDEX [IX_FK_CODE_HOLIDAYS1] ON [dbo].[CODE_HOLIDAYS] ([STATE_PROVINCE_IDF])
GO

CREATE INDEX [IX_FK_CODE_NOTIFICATIONS] ON [dbo].[CODE_NOTIFICATIONS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_FK_CODE_TEMPLATES] ON [dbo].[CODE_TEMPLATES] ([PARENT_IDF])
GO

CREATE INDEX [IX_CODE_VALUESETS_VC] ON [dbo].[CODE_VALUESETS] ([VALUE_CODE])
GO

CREATE INDEX [IX_CODE_VALUESETS_VN] ON [dbo].[CODE_VALUESETS] ([VALUE_NUMBER], [CATEGORY_CODE], [TYPE_CODE])
GO

CREATE INDEX [IX_CODE_VALUESETSS_SI] ON [dbo].[CODE_VALUESETS] ([VALUE_STRING], [VALUE_INTEGER])
GO

CREATE INDEX [IX_FK_CODE_VALUESETS] ON [dbo].[CODE_VALUESETS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_CONTRACT_ID] ON [dbo].[CONTRACT_DETAILS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_CONTRACT_QUALIFIED_AERAS] ON [dbo].[CONTRACT_QUALIFIED_AERAS] ([PARENT_IDF])
GO

CREATE INDEX [IX_FK_CONTRACT_QUALIFIED_AERAS1] ON [dbo].[CONTRACT_QUALIFIED_AERAS] ([APPLICATION_IDF])
GO

CREATE UNIQUE INDEX [UQ_CONTRACT_NO] ON [dbo].[CONTRACTS] ([CONTRACT_NO])
GO

CREATE INDEX [IX_FK_DOCUMENTS] ON [dbo].[DOCUMENTS] ([SPONSOR_IDF])
GO

CREATE INDEX [IX_FK_DOCUMENTS1] ON [dbo].[DOCUMENTS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_FK_FEDERAL_ORGANIZATIONS] ON [dbo].[FEDERAL_ORGANIZATIONS] ([LEVEL_I_IDF])
GO

CREATE INDEX [IX_FK_FEDERAL_ORGANIZATIONS1] ON [dbo].[FEDERAL_ORGANIZATIONS] ([LEVEL_II_IDF])
GO

CREATE INDEX [IX_FK_FEDERAL_ORGANIZATIONS2] ON [dbo].[FEDERAL_ORGANIZATIONS] ([LEVEL_III_IDF])
GO

CREATE INDEX [IX_FK_FEDERAL_ORGANIZATIONS3] ON [dbo].[FEDERAL_ORGANIZATIONS] ([LEVEL_IV_IDF])
GO

CREATE INDEX [IX_FK_FEDERAL_ORGANIZATIONS4] ON [dbo].[FEDERAL_ORGANIZATIONS] ([CONTACT_IDF])
GO

CREATE INDEX [IX_ORG_ID] ON [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

CREATE INDEX [IX_ORDER_DBID] ON [dbo].[FINAL_CHECKLISTS] ([ORDER_IDF])
GO

CREATE UNIQUE INDEX [UQ__SYM_FINAL_CHECKL__1FD9753A] ON [dbo].[FINAL_CHECKLISTS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_GROUP_ACTIONS] ON [dbo].[GROUP_ACTIONS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_ACTIVITIES] ON [dbo].[GROUP_ACTIVITIES] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_CONTRACTS] ON [dbo].[GROUP_CONTRACTS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_DOCUMENTS] ON [dbo].[GROUP_DOCUMENTS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_EVENTS] ON [dbo].[GROUP_EVENTS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_ITEMS] ON [dbo].[GROUP_ITEMS] ([GROUP_IDF])
GO

CREATE INDEX [IX_EXT_ID] ON [dbo].[GROUP_LOOKUP_ITEMS] ([EXT_ID])
GO

CREATE INDEX [IX_LOOKUP_ID] ON [dbo].[GROUP_LOOKUP_ITEMS] ([LOOKUP_IDF])
GO

CREATE INDEX [IX_PARENT_ID] ON [dbo].[GROUP_LOOKUP_ITEMS] ([PARENT_IDF])
GO

CREATE INDEX [IX_REFERENCE_ID] ON [dbo].[GROUP_LOOKUP_ITEMS] ([LOOKUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_MEMBERS] ON [dbo].[GROUP_MEMBERS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_MESSAGES] ON [dbo].[GROUP_MESSAGES] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_NODES] ON [dbo].[GROUP_NODES] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_NOTIFICATIONS] ON [dbo].[GROUP_NOTIFICATIONS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_ORGANIZATIONS] ON [dbo].[GROUP_ORGANIZATIONS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_PERSONS] ON [dbo].[GROUP_PERSONS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_REPORTS] ON [dbo].[GROUP_REPORTS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_ROLES] ON [dbo].[GROUP_ROLES] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_TASKS] ON [dbo].[GROUP_TASKS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_TELECOM_ADDRESSES] ON [dbo].[GROUP_TELECOM_ADDRESSES] ([TELECOM_IDF])
GO

CREATE INDEX [IX_FK_GROUP_TELECOM_ADDRESSES1] ON [dbo].[GROUP_TELECOM_ADDRESSES] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_USERS] ON [dbo].[GROUP_USERS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_VALUESETS] ON [dbo].[GROUP_VALUESETS] ([GROUP_IDF])
GO

CREATE INDEX [IX_FK_GROUP_WORKFLOWS] ON [dbo].[GROUP_WORKFLOWS] ([GROUP_IDF])
GO

CREATE INDEX [UC_CONTRACT] ON [dbo].[GSS_SOLUTION_CLINS] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_FK_INVOICES] ON [dbo].[INVOICES] ([AWARD_IDF], [PROPOSAL_IDF])
GO

CREATE INDEX [IX_FK_INVOICES1] ON [dbo].[INVOICES] ([SUPPORT_DOC_IDF])
GO

CREATE INDEX [IX_TRANSACTION_SUPP_DOC_ID] ON [dbo].[INVOICES] ([SUPPORT_DOC_IDF])
GO

CREATE INDEX [IX_KNOWLEDGE_BASE1] ON [dbo].[KNOWLEDGE_BASE] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_KNOWLEDGE_DETAILS1] ON [dbo].[KNOWLEDGE_DETAILS] ([KNOWLEDGE_IDF])
GO

CREATE INDEX [IX_MASTER_PAYMENTS1] ON [dbo].[MASTER_PAYMENTS] ([ACCOUNT_IDF], [CONTRACTOR_IDF])
GO

CREATE INDEX [IX_MESSAGE_ID] ON [dbo].[MESSAGE_DOCUMENTS] ([MESSAGE_IDF])
GO

CREATE INDEX [IX_FK_METADATA_DEFINITION] ON [dbo].[METADATA_DEFINITION] ([PARENT_IDF])
GO

CREATE INDEX [IX_REFERENCE_ID] ON [dbo].[METADATA_DEFINITION] ([OWNER_IDF])
GO

CREATE INDEX [IX_METADATA_ID] ON [dbo].[METADATA_VALUE] ([METADATA_IDF])
GO

CREATE INDEX [IX_MOD_ID] ON [dbo].[MODIFICATION_DETAILS] ([MODIFICATION_IDF])
GO

CREATE INDEX [IX_MODIFICATION_DETAILS1] ON [dbo].[MODIFICATION_DETAILS] ([MODIFICATION_IDF])
GO

CREATE INDEX [IX_PERIOD_ID] ON [dbo].[MODIFICATION_DETAILS] ([AWARD_PERIOD_IDF])
GO

CREATE INDEX [IX_FK_MONTHLY_INVOICES] ON [dbo].[MONTHLY_INVOICES] ([INVOICE_IDF])
GO

CREATE INDEX [IX_NODE_DETAILS1] ON [dbo].[NODE_DETAILS] ([NODE_IDF])
GO

CREATE INDEX [IX_FK_NOTE_COMMENTS] ON [dbo].[NOTE_COMMENTS] ([WRITER_IDF])
GO

CREATE INDEX [IX_NOTE_COMMENTS_REF_ID] ON [dbo].[NOTE_COMMENTS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_NOTN_MSG] ON [dbo].[NOTIFICATION_MESSAGES] ([NOTIFICATION_IDF])
GO

CREATE INDEX [IX_APPROVER_ID] ON [dbo].[ORDER_APPROVALS] ([APPROVER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_APPROVALS] ON [dbo].[ORDER_APPROVALS] ([APPROVER_IDF])
GO

CREATE INDEX [IX_ORDER_DBID] ON [dbo].[ORDER_APPROVALS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_CLINS] ON [dbo].[ORDER_CLINS] ([CLIN_IDF])
GO

CREATE INDEX [IX_FK_ORDER_CLINS_ORDER_IDF] ON [dbo].[ORDER_CLINS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_COMPLIANCES] ON [dbo].[ORDER_COMPLIANCES] ([ORDER_IDF])
GO

CREATE INDEX [IX_DELIVERY_POC_ID] ON [dbo].[ORDER_DELIVERIES] ([POC_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES] ON [dbo].[ORDER_DELIVERIES] ([ADDRESS_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES1] ON [dbo].[ORDER_DELIVERIES] ([POC_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES2] ON [dbo].[ORDER_DELIVERIES] ([PROVIDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES3] ON [dbo].[ORDER_DELIVERIES] ([TELECOM_ADDRESS_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES4] ON [dbo].[ORDER_DELIVERIES] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DELIVERIES5] ON [dbo].[ORDER_DELIVERIES] ([ALT_PROVIDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DETAILS] ON [dbo].[ORDER_DETAILS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_DETAILS1] ON [dbo].[ORDER_DETAILS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_PROPOSAL_IDF] ON [dbo].[ORDER_DETAILS] ([ORDER_IDF])
GO

CREATE INDEX [IX_AMENDMENT_ID] ON [dbo].[ORDER_DOCUMENTS] ([DOCUMENT_IDF])
GO

CREATE INDEX [IX_MOD_IDF] ON [dbo].[ORDER_DOCUMENTS] ([ORDER_MODIFICATION_IDF])
GO

CREATE INDEX [IX_ORDER_DBID] ON [dbo].[ORDER_DOCUMENTS] ([ORDER_IDF])
GO

CREATE INDEX [IX_PROPOSAL_ID] ON [dbo].[ORDER_DOCUMENTS] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_PROPOSAL_IDF] ON [dbo].[ORDER_DOCUMENTS] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_FK_ORDER_GSS_CLIN_OPTIONS] ON [dbo].[ORDER_GSS_CLIN_OPTIONS] ([ITEM_IDF])
GO

CREATE INDEX [IX_FK_ORDER_MESSAGES1] ON [dbo].[ORDER_MESSAGES] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_ORDER_MESSAGES3] ON [dbo].[ORDER_MESSAGES] ([SENDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_MESSAGES5] ON [dbo].[ORDER_MESSAGES] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_QUESTIONS_CUSTOMER_IDF] ON [dbo].[ORDER_QUESTIONS] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_ORDER_QUESTIONS_REF_ID] ON [dbo].[ORDER_QUESTIONS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_ORGANIZATION_ID] ON [dbo].[ORDER_QUESTIONS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_TASK_ORDER_ID] ON [dbo].[ORDER_QUESTIONS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_RATING_FACTORS] ON [dbo].[ORDER_RATING_FACTORS] ([ORDER_IDF])
GO

CREATE INDEX [IX_FK_ORDER_RESPONSES] ON [dbo].[ORDER_RESPONSES] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_FK_ORDER_RESPONSES1] ON [dbo].[ORDER_RESPONSES] ([POC_IDF])
GO

CREATE INDEX [IX_FK_ORDER_RESPONSES3] ON [dbo].[ORDER_RESPONSES] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_ORDER_RESPONSES_CONTRACTOR_IDF] ON [dbo].[ORDER_RESPONSES] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_ORDER_RESPONSES_ORDER_IDF] ON [dbo].[ORDER_RESPONSES] ([ORDER_IDF])
GO

CREATE INDEX [IX_REVIEW_ID] ON [dbo].[ORDER_REVIEW_DETAILS] ([REVIEW_IDF])
GO

CREATE INDEX [IX_FK_ORDER_REVIEWS] ON [dbo].[ORDER_REVIEWS] ([ORDER_IDF])
GO

CREATE INDEX [IX_REVIEWER_ID] ON [dbo].[ORDER_REVIEWS] ([REVIEWER_IDF])
GO

CREATE INDEX [IX_TASK_ORDER_ID] ON [dbo].[ORDER_REVIEWS] ([TASK_IDF])
GO

CREATE INDEX [IX_FK_ORDER_TASKS_POC_IDF] ON [dbo].[ORDER_TASKS] ([PRIMARY_POC_IDF])
GO

CREATE INDEX [IX_ORDER_IDF] ON [dbo].[ORDER_TASKS] ([ORDER_IDF])
GO

CREATE INDEX [IX_REVIEWER_IDF] ON [dbo].[ORDER_TASKS] ([REVIEWER_IDF])
GO

CREATE INDEX [IX_ORDER_DBID] ON [dbo].[ORDER_TO_DO_LISTS] ([ORDER_IDF])
GO

CREATE INDEX [IX_APPLICATION_ORDERS] ON [dbo].[ORDERS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_ORDERS] ON [dbo].[ORDERS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_ORDERS_REF_IDF] ON [dbo].[ORDERS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_ORDERS_VALUE_CODE] ON [dbo].[ORDERS] ([VALUE_CODE])
GO

CREATE INDEX [IX_ORGANIZATIONS_REFID] ON [dbo].[ORGANIZATIONS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_APPLICAITON_IDF] ON [dbo].[OWN_NOTIFICATIONS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_CERTIFIED_BY_PERSON_ID] ON [dbo].[PAYMENT_REPORT] ([CERTIFIED_BY_IDF])
GO

CREATE INDEX [IX_CONTRACT_ID] ON [dbo].[PAYMENT_REPORT] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_FK_PAYMENT_REPORT] ON [dbo].[PAYMENT_REPORT] ([IDF], [CONTRACTOR_IDF])
GO

CREATE INDEX [IX_MODIFICATION_IDF] ON [dbo].[PAYMENT_REPORT_ITEMS] ([MODIFICATION_IDF])
GO

CREATE INDEX [IX_ORDER_IDF] ON [dbo].[PAYMENT_REPORT_ITEMS] ([ORDER_IDF])
GO

CREATE INDEX [IX_PERSON_ROLES1] ON [dbo].[PERSON_ROLES] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_ADDRESS_ID] ON [dbo].[PERSONS] ([ADDRESS_IDF])
GO

CREATE INDEX [IX_FK_PERSONS] ON [dbo].[PERSONS] ([PARENT_IDF])
GO

CREATE INDEX [IX_ORG_ID] ON [dbo].[PERSONS] ([ORGANIZATION_IDF])
GO

CREATE INDEX [IX_PERSONS_REFID] ON [dbo].[PERSONS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_FK_PROPOSAL_DELIVERIES] ON [dbo].[PROPOSAL_DELIVERIES] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_DELIVERIES1] ON [dbo].[PROPOSAL_DELIVERIES] ([ADDRESS_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_DELIVERIES2] ON [dbo].[PROPOSAL_DELIVERIES] ([PROVIDER_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_DELIVERIES4] ON [dbo].[PROPOSAL_DELIVERIES] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_PROPOSAL_IDF] ON [dbo].[PROPOSAL_DELIVERIES] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_PROPOSAL_FINANCE_LOES1] ON [dbo].[PROPOSAL_FINANCE_LOES] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_PROPOSAL_FINANCE_LOES2] ON [dbo].[PROPOSAL_FINANCE_LOES] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_PROPOSAL_FINANCE_LOES3] ON [dbo].[PROPOSAL_FINANCE_LOES] ([PROPOSED_TASK_IDF], [PROPOSAL_FINANCE_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_RATINGS] ON [dbo].[PROPOSAL_RATINGS] ([REVIEW_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_RATINGS1] ON [dbo].[PROPOSAL_RATINGS] ([RATE_FACTOR_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_REVIEWS] ON [dbo].[PROPOSAL_REVIEWS] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_REVIEWS1] ON [dbo].[PROPOSAL_REVIEWS] ([TASK_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_REVIEWS3] ON [dbo].[PROPOSAL_REVIEWS] ([REVISION_IDF])
GO

CREATE INDEX [IX_FK_PROPOSAL_REVIEWS4] ON [dbo].[PROPOSAL_REVIEWS] ([REVIEWER_IDF])
GO

CREATE INDEX [IX_REVIEWER_IDF] ON [dbo].[PROPOSAL_REVIEWS] ([REVIEWER_IDF])
GO

CREATE INDEX [IX_TASK_ORDER_ID] ON [dbo].[PROPOSAL_REVIEWS] ([TASK_IDF])
GO

CREATE INDEX [IX_FK_PROPOSALS] ON [dbo].[PROPOSALS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_FK_PROPOSALS1] ON [dbo].[PROPOSALS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_PROPOSALS2] ON [dbo].[PROPOSALS] ([POC_IDF])
GO

CREATE INDEX [IX_PROPOSALS_ORDER_IDF] ON [dbo].[PROPOSALS] ([ORDER_IDF])
GO

CREATE INDEX [IX_PROPOSALS_VALUE_CODE] ON [dbo].[PROPOSALS] ([VALUE_CODE])
GO

CREATE INDEX [IX_SUBMITTER_ID] ON [dbo].[PROPOSALS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_CLIN_IDF] ON [dbo].[PROPOSED_CLINS] ([CLIN_IDF])
GO

CREATE INDEX [IX_FK_PROPOSED_CLINS1] ON [dbo].[PROPOSED_CLINS] ([TRP_IDF])
GO

CREATE INDEX [IX_PROPOSED_TASKS1] ON [dbo].[PROPOSED_TASKS] ([PROPOSAL_IDF])
GO

CREATE INDEX [IX_PROPOSED_TASKS2] ON [dbo].[PROPOSED_TASKS] ([ORDER_TASK_IDF])
GO

CREATE INDEX [IX_FK_QUESTION_ANSWERS] ON [dbo].[QUESTION_ANSWERS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_QUESTION_ANSWERS1] ON [dbo].[QUESTION_ANSWERS] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_QUESTION_ANSWERS_Q_IDF] ON [dbo].[QUESTION_ANSWERS] ([QUESTION_IDF])
GO

CREATE INDEX [IX_QUESTION_ANSWERS_REF_ID] ON [dbo].[QUESTION_ANSWERS] ([REFERENCE_ID])
GO

CREATE INDEX [IX_FK_REF_CONTRACTOR_TRP_GSS_CLINS] ON [dbo].[REF_CONTRACTOR_TRP_GSS_CLINS] ([CLIN_IDF], [CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_REF_CONTRACTOR_TRPS] ON [dbo].[REF_CONTRACTOR_TRPS] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_FK_REF_CONTRACTOR_TRPS1] ON [dbo].[REF_CONTRACTOR_TRPS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_REF_CONTRACTOR_TRPS_CONTRACTOR_IDF] ON [dbo].[REF_CONTRACTOR_TRPS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_REF_CONTRACTOR_TRPS_TRP] ON [dbo].[REF_CONTRACTOR_TRPS] ([VALUE_CODE])
GO

CREATE INDEX [IX_FK_REF_NITAAC_CATEGORY_COMMODITY] ON [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([PARENT_IDF])
GO

CREATE UNIQUE INDEX [ui_CATEGORY] ON [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

CREATE INDEX [IX_REF_NITAAC_CLINS_CC] ON [dbo].[REF_NITAAC_CLINS] ([CATEGORY_IDF], [COMMODITY_IDF])
GO

CREATE INDEX [IX_REF_NITAAC_CLINS_CT] ON [dbo].[REF_NITAAC_CLINS] ([CATEGORY_CODE], [TYPE_CODE])
GO

CREATE UNIQUE INDEX [IX_REF_NITAAC_CLINS_PN] ON [dbo].[REF_NITAAC_CLINS] ([OEM_PART_NUM], [OEM_MFR_NAME])
GO

CREATE INDEX [IX_COMMODITY_CLINS_ID] ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] ([COMMODITY_IDF], [CATEGORY_IDF])
GO

CREATE INDEX [IX_CONTRACT_IDF] ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_TRP_IDF] ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] ([TRP_IDF])
GO

CREATE INDEX [IX_FK_REF_NITAAC_CONTRACTOR_GSS_CLINS] ON [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] ([CLIN_IDF], [CONTRACT_IDF])
GO

CREATE INDEX [IX_CONTRACT_ID] ON [dbo].[REF_NITAAC_CONTRACTOR_RATES] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_LABOR_CATEGORY] ON [dbo].[REF_NITAAC_CONTRACTOR_RATES] ([LABOR_CATEGORY_IDF])
GO

CREATE INDEX [IX_FK_REF_NITAAC_DEFINITIONS] ON [dbo].[REF_NITAAC_DEFINITIONS] ([PARENT_IDF])
GO

CREATE INDEX [IX_REF_NITAAC_FEE_RATES1] ON [dbo].[REF_NITAAC_FEE_RATES] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_REF_NITAAC_IDS] ON [dbo].[REF_NITAAC_IDS] ([PARENT_IDF])
GO

CREATE INDEX [IX_REF_NITAAC_IDS_SETTING] ON [dbo].[REF_NITAAC_IDS] ([CATEGORY_CODE], [TYPE_CODE], [STATUS_CODE])
GO

CREATE INDEX [IX_ADDRESS_ID] ON [dbo].[REF_NITAAC_OEM_MFR] ([ADDRESS_IDF])
GO

CREATE INDEX [IX_APPLICATION_ID] ON [dbo].[REF_NITAAC_REVIEW_SCOPES] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_ADDRESS_ID] ON [dbo].[REF_NITAAC_UPC_INFO] ([ADDRESS_IDF])
GO

CREATE UNIQUE INDEX [IX_REF_NITAAC_UPC_INFO1] ON [dbo].[REF_NITAAC_UPC_INFO] ([UPC])
GO

CREATE INDEX [IX_FK_REF_REOURCE_SHARING] ON [dbo].[REF_REOURCE_SHARING] ([USER_IDF])
GO

CREATE INDEX [IX_FK_REF_REOURCE_SHARING1] ON [dbo].[REF_REOURCE_SHARING] ([ORGANIZATION_IDF])
GO

CREATE INDEX [IX_FK_REF_STATE_COUNTRIES] ON [dbo].[REF_STATE_COUNTRIES] ([PARENT_IDF])
GO

CREATE INDEX [IX_FK_RELEASE_CONTENTS] ON [dbo].[RELEASE_CONTENTS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_RELEASE_ENVIRONMENTS] ON [dbo].[RELEASE_ENVIRONMENTS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_REPORT_USER_GROUP] ON [dbo].[REPORT_DETAILS] ([USER_GROUP_IDF])
GO

CREATE INDEX [IX_REPORTS_ID] ON [dbo].[REPORT_DETAILS] ([REPORT_IDF])
GO

CREATE INDEX [IX_CERTIFIED_BY_PERSON_ID] ON [dbo].[SALES_REPORT] ([PERSON_IDF])
GO

CREATE INDEX [IX_CONTRACT_ID] ON [dbo].[SALES_REPORT] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_ORDER_IDF] ON [dbo].[SALES_REPORT_ITEM] ([ORDER_IDF])
GO

CREATE INDEX [IX_ORDERING_AGENCY_ORG_ID] ON [dbo].[SALES_REPORT_ITEM] ([ORDERING_AGENCY_ORG_IDF])
GO

CREATE INDEX [IX_SALES_REPORT_ID] ON [dbo].[SALES_REPORT_ITEM] ([SALES_REPORT_IDF])
GO

CREATE INDEX [IX_CART_ID] ON [dbo].[SHOP_CART_ITEMS] ([SHOP_CART_IDF])
GO

CREATE INDEX [IX_INTERNAL_ID] ON [dbo].[SHOP_CART_ITEMS] ([CLIN_IDF])
GO

CREATE INDEX [IX_VENDOR_CLIN_ID] ON [dbo].[SHOP_CART_ITEMS] ([CONTRACTOR_CLIN_ID])
GO

CREATE INDEX [IX_VENDOR_ID] ON [dbo].[SHOP_CART_ITEMS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_USER_ID] ON [dbo].[SHOP_CARTS] ([CUSTOMER_IDF])
GO

CREATE INDEX [IX_SYM_ORGANIZATION_EXT_NT] ON [dbo].[SYM_ORGANIZATION_EXT] ([NOTE_TEXT])
GO

CREATE INDEX [IX_SYM_ORGANIZATION_EXT1] ON [dbo].[SYM_ORGANIZATION_EXT] ([IDF])
GO

CREATE INDEX [IX_SYM_PERSON_EXT1] ON [dbo].[SYM_PERSON_EXT] ([IDF])
GO

CREATE INDEX [IX_SYSTEM_CONFIGURATIONS1] ON [dbo].[SYSTEM_CONFIGURATIONS] ([APPLICATION_IDF])
GO

CREATE INDEX [IX_CONTACT_ID] ON [dbo].[SYSTEM_MAINTENANCES] ([CONTACT_IDF])
GO

CREATE INDEX [IX_TASK_DELIVERABLE_DETAILS1] ON [dbo].[TASK_DELIVERABLE_DETAILS] ([DELIVERABLE_IDF])
GO

CREATE INDEX [IX_FK_TASK_MODIFICATIONS] ON [dbo].[TASK_MODIFICATIONS] ([MODIFICATION_IDF])
GO

CREATE INDEX [IX_TICKET_DETAILS1] ON [dbo].[TICKET_DETAILS] ([TICKET_IDF])
GO

CREATE INDEX [IX_FK_TICKET_RESOLUTIONS] ON [dbo].[TICKET_RESOLUTIONS] ([APPLICATIOIN_IDF])
GO

CREATE INDEX [IX_FK_TICKET_RESOLUTIONS1] ON [dbo].[TICKET_RESOLUTIONS] ([PARENT_IDF])
GO

CREATE INDEX [IX_FK_TICKET_RESOLUTIONS2] ON [dbo].[TICKET_RESOLUTIONS] ([CONTACT_IDF])
GO

CREATE INDEX [IX_FK_TICKET_RESOLUTIONS3] ON [dbo].[TICKET_RESOLUTIONS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_TICKET_RESOLUTIONS1] ON [dbo].[TICKET_RESOLUTIONS] ([TICKET_IDF])
GO

CREATE INDEX [IX_FK_TRP_CLIN_REVIEW_ERRORS] ON [dbo].[TRP_CLIN_REVIEW_ERRORS] ([REVIEW_CLIN_IDF], [TRP_IDF])
GO

CREATE INDEX [IX_FK_TRP_CLIN_REVIEWS] ON [dbo].[TRP_CLIN_REVIEWS] ([TRP_IDF])
GO

CREATE INDEX [IX_FK_TRP_UPLOADS] ON [dbo].[TRP_UPLOADS] ([CONTRACT_IDF])
GO

CREATE INDEX [IX_FK_TRP_UPLOADS_CONTRACTOR_IDF] ON [dbo].[TRP_UPLOADS] ([CONTRACTOR_IDF])
GO

CREATE INDEX [IX_FK_TRP_UPLOADS_SUBMITTER_IDF] ON [dbo].[TRP_UPLOADS] ([SUBMITTER_IDF])
GO

CREATE INDEX [IX_FK_TRP_UPLOADS1] ON [dbo].[TRP_UPLOADS] ([POC_IDF])
GO

CREATE INDEX [IX_FK_USER_APPLICATION_ROLES] ON [dbo].[USER_APPLICATION_ROLES] ([ROLE_IDF], [APPLICATION_IDF])
GO

CREATE INDEX [IX_FK_USER_APPLICATION_ROLES1] ON [dbo].[USER_APPLICATION_ROLES] ([USER_IDF])
GO

CREATE INDEX [IX_USER_ID] ON [dbo].[USER_FEEDBACKS] ([USER_IDF])
GO

CREATE INDEX [IX_USER_ID] ON [dbo].[USER_REQUEST] ([USER_IDF])
GO

CREATE INDEX [IX_USERS_OWNER_IDF] ON [dbo].[USERS] ([OWNER_IDF])
GO

CREATE INDEX [IX_VENDOR_CLIN_ID] ON [dbo].[WISH_LIST_ITEMS] ([CONTRACTOR_CLIN_ID])
GO

CREATE INDEX [IX_FK_WORKFLOW_NODE_JOBS] ON [dbo].[WORKFLOW_NODE_JOBS] ([NODE_IDF])
GO

/*================================================================================*/
/* CREATE FOREIGN KEYS                                                            */
/*================================================================================*/

ALTER TABLE [dbo].[ACCOUNT_AUTHORIZATION]
  ADD CONSTRAINT [FK_ACCOUNT_AUTHORIZATION_USER]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ACCOUNT_AUTHORIZATION]
  ADD CONSTRAINT [FK_ACCOUNT_AUTHORIZATION_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[ACCOUNT_STATEMENTS]
  ADD CONSTRAINT [FK_STATEMENTS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ACCOUNT_STATEMENTS]
  ADD CONSTRAINT [FK_ACCOUNT_STATEMENTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[ACCOUNT_STATEMENTS]
  ADD CONSTRAINT [FK_ACCOUNT_STATEMENTS_CONTRACTOR_ACCOUNTS]
  FOREIGN KEY ([ACCOUNT_IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[CONTRACTOR_ACCOUNTS] ([IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_TRANSACTION_STATEMENtS]
  FOREIGN KEY ([STATEMENT_IDF]) REFERENCES [dbo].[ACCOUNT_STATEMENTS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_TRANSACTIONS_ORDERTASKS]
  FOREIGN KEY ([ORDER_TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_ACCOUNT_TRANSACTIONS_AWARD_MODIFICATIONS]
  FOREIGN KEY ([MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_TRANSACTION_INVOICES]
  FOREIGN KEY ([INVOICE_IDF]) REFERENCES [dbo].[INVOICES] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_ACCOUNT_TRANSACTIONS_DOCUMENTS]
  FOREIGN KEY ([SUPPORT_DOC_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[ACCOUNT_TRANSACTIONS]
  ADD CONSTRAINT [FK_ACCOUNT_TRANSACTIONS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ANNOUNCEMENT]
  ADD CONSTRAINT [FK_ANNOUNCEMENT_NOTIFICAITON_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF], [NOTIFICATION_IDF]) REFERENCES [dbo].[NOTIFICATION_MESSAGES] ([MESSAGE_IDF], [NOTIFICATION_IDF])
GO

ALTER TABLE [dbo].[APPLICATION_CONTENTS]
  ADD CONSTRAINT [FK_APPLICATION_LOOKUP_CONTENTS_APPLICATION_DOMAINS]
  FOREIGN KEY ([DOMAIN_IDF], [APPLICATION_IDF]) REFERENCES [dbo].[APPLICATION_DOMAINS] ([IDF], [APPLICATION_IDF])
GO

ALTER TABLE [dbo].[APPLICATION_CONTENTS]
  ADD CONSTRAINT [FK_APPLICATION_LOOKUP_CONTENTS_APPLICATION_LOOKUP_CONTENTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[APPLICATION_CONTENTS] ([IDF])
GO

ALTER TABLE [dbo].[APPLICATION_DOMAINS]
  ADD CONSTRAINT [FK_APPLICATION_DOMAINS_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[APPLICATION_RELEASES]
  ADD CONSTRAINT [FK_APPLICATIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[APPLICATION_RELEASES]
  ADD CONSTRAINT [FK_APPLICATION_RELEASES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[APPLICATION_ROLES]
  ADD CONSTRAINT [FK_APPLICATION_ROLES_CODE_ROLES]
  FOREIGN KEY ([ROLE_IDF]) REFERENCES [dbo].[CODE_ROLES] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[APPLICATION_ROLES]
  ADD CONSTRAINT [FK_APPLICATION_ROLES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[APPLICATION_USERS]
  ADD CONSTRAINT [FK_APPLICATION_USERS_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[APPLICATION_USERS]
  ADD CONSTRAINT [FK_APPLICATION_USERS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AUDIT_LOGS]
  ADD CONSTRAINT [FK_AUDIT_LOGS_CODE_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF]) REFERENCES [dbo].[CODE_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_AWARD_PERIODS]
  FOREIGN KEY ([AWARD_PERIOD_IDF]) REFERENCES [dbo].[AWARD_PERIODS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_AWARD_DELIVERABLES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[AWARD_DELIVERABLES] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_PERSONS]
  FOREIGN KEY ([COTR_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_PERSONS2]
  FOREIGN KEY ([COTR_ALT_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERABLES]
  ADD CONSTRAINT [FK_AWARD_DELIVERABLES_OWN_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERIES]
  ADD CONSTRAINT [FK_AWARD_DELIVERIES_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERIES]
  ADD CONSTRAINT [FK_AWARD_DELIVERIES_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERIES]
  ADD CONSTRAINT [FK_AWARD_DELIVERIES_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_DELIVERIES]
  ADD CONSTRAINT [FK_AWARD_DELIVERIES_DOCUMENTS_DOC]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_AWARD_PERIODS]
  FOREIGN KEY ([AWARD_PERIOD_IDF]) REFERENCES [dbo].[AWARD_PERIODS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_FINANCES]
  ADD CONSTRAINT [FK_AWARD_FINANCES_AWARD_PERIODS2]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[AWARD_PERIODS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_GSS_CLIN_OPTIONS]
  ADD CONSTRAINT [FK_AWARD_GSS_CLIN_OPTIONS_AWARDED_CLINS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF], [CLIN_IDF]) REFERENCES [dbo].[AWARDED_CLINS] ([AWARD_IDF], [PROPOSAL_IDF], [CLIN_IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATION_APPLIED]
  ADD CONSTRAINT [FK_AWARD_MODIFICATION_APPLIED_AWARD_MODIFICATIONS]
  FOREIGN KEY ([ORDER_MODIFCATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATION_APPLIED]
  ADD CONSTRAINT [FK_AWARD_MODIFICATION_APPLIED_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATIONS]
  ADD CONSTRAINT [FK_AWARD_MODIFICATIONS_AWARD_PERIODS]
  FOREIGN KEY ([AWARD_PERIOD_IDF]) REFERENCES [dbo].[AWARD_PERIODS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATIONS]
  ADD CONSTRAINT [FK_AWARD_MODIFICATIONS_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATIONS]
  ADD CONSTRAINT [FK_AWARD_MODIFICATIONS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_MODIFICATIONS]
  ADD CONSTRAINT [FK_AWARD_MODIFICATIONS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_PAYMENTS]
  ADD CONSTRAINT [FK_AWARD_PAYMENTS_MASTER_PAYMENTS]
  FOREIGN KEY ([PAYMENT_IDF]) REFERENCES [dbo].[MASTER_PAYMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_PAYMENTS]
  ADD CONSTRAINT [FK_AWARD_PAYMENTS_INVOICES]
  FOREIGN KEY ([INVOICE_IDF]) REFERENCES [dbo].[INVOICES] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_PAYMENTS]
  ADD CONSTRAINT [FK_AWARD_PAYMENTS_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARD_PAYMENTS]
  ADD CONSTRAINT [FK_AWARD_PAYMENTS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARD_PERIODS]
  ADD CONSTRAINT [FK_AWARD_PERIODS_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[AWARDED_CLINS]
  ADD CONSTRAINT [FK_AWARDED_CLINS_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARDED_CLINS]
  ADD CONSTRAINT [FK_AWARDED_CLINS_PROPOSED_CLINS]
  FOREIGN KEY ([CLIN_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSED_CLINS] ([ITEM_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[AWARDED_CLINS]
  ADD CONSTRAINT [FK_AWARDED_CLINS_CONTACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_FEDERAL_ORGANIZATIONS]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_PERSONS]
  FOREIGN KEY ([AWARDER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_PERSONS2]
  FOREIGN KEY ([AWARD_SUBMITTER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_AWARDS]
  FOREIGN KEY ([AWARD_IDF]) REFERENCES [dbo].[AWARDS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDED_PROPOSALS]
  ADD CONSTRAINT [FK_AWARDED_PROPOSALS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_DOCUMENTS_DOC_IDF]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_AWARDER]
  FOREIGN KEY ([AWARDER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_SUMBITTER]
  FOREIGN KEY ([AWARD_SUBMITTER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_CUSTOMER]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_CONTACTS_CONTACT_IDF]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_APPROVER]
  FOREIGN KEY ([AWARD_APPROVER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_ORGANIZATIONS]
  FOREIGN KEY ([ASSISTED_ORG_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[AWARDS]
  ADD CONSTRAINT [FK_AWARDS_AWARDS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[AWARDS] ([IDF])
GO

ALTER TABLE [dbo].[CLIN_DETAILS]
  ADD CONSTRAINT [FK_CLIN_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ACTIONS]
  ADD CONSTRAINT [FK_ACTIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ACTIVITIES]
  ADD CONSTRAINT [FK_CODE_ACTIVITIES_CODE_ACTIVITIES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_APPLICATIONS]
  ADD CONSTRAINT [FK_CODE_APPLICATIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_APPLICATIONS]
  ADD CONSTRAINT [FK_CODE_APPLICATIONS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_APPLICATIONS]
  ADD CONSTRAINT [FK_CODE_APPLICATIONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_CATEGORY_TYPES]
  ADD CONSTRAINT [FK_CODE_CATEGORY_TYPES_CODE_CATEGORY_TYPES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_CATEGORY_TYPES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_CATEGORY_TYPES]
  ADD CONSTRAINT [FK_CODE_CATEGORY_TYPES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ERRORS]
  ADD CONSTRAINT [FK_CODE_ERRORS_CODE_ERRORS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_ERRORS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ERRORS]
  ADD CONSTRAINT [FK_CODE_ERRORS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[CODE_EVENTS]
  ADD CONSTRAINT [FK_CODE_EVENTS_CODE_EVENTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_GROUPS]
  ADD CONSTRAINT [FK_CODE_GROUPS_CODE_GROUPS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_GROUPS]
  ADD CONSTRAINT [FK_CODE_GROUPS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_GROUPS]
  ADD CONSTRAINT [FK_CODE_GROUPS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_HOLIDAYS]
  ADD CONSTRAINT [FK_CODE_HOLIDAYS_REF_STATE_COUNTRIES]
  FOREIGN KEY ([COUNTRY_IDF]) REFERENCES [dbo].[REF_STATE_COUNTRIES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_HOLIDAYS]
  ADD CONSTRAINT [FK_CODE_HOLIDAYS_REF_STATE_COUNTRIES2]
  FOREIGN KEY ([STATE_PROVINCE_IDF]) REFERENCES [dbo].[REF_STATE_COUNTRIES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_MESSAGES]
  ADD CONSTRAINT [FK_CODE_MESSAGES_CODE_MESSAGES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_MESSAGES]
  ADD CONSTRAINT [FK_CODE_MESSAGES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_MESSAGES]
  ADD CONSTRAINT [FK_CODE_MESSAGES_CODE_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[CODE_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_NOTIFICATIONS]
  ADD CONSTRAINT [FK_CODE_NOTIFICATIONS_CODE_NOTIFICATIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_NOTIFICATIONS]
  ADD CONSTRAINT [FK_CODE_NOTIFICATIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_NOTIFICATIONS]
  ADD CONSTRAINT [FK_CODE_NOTIFICATIONS_DOCUMENTS_IDF]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ORDERS]
  ADD CONSTRAINT [FK_CODE_ORDERS_CODE_ORDERS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ORDERS]
  ADD CONSTRAINT [FK_CODE_ORDERS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_REPORTS]
  ADD CONSTRAINT [FK_CODE_REPORTS_CODE_REPORTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_REPORTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_REPORTS]
  ADD CONSTRAINT [FK_CODE_REPORTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_REPORTS]
  ADD CONSTRAINT [FK_CODE_REPORTS_CODE_TEMPLATES]
  FOREIGN KEY ([TEMPLATE_IDF]) REFERENCES [dbo].[CODE_TEMPLATES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_REQUESTS]
  ADD CONSTRAINT [FK_CODE_QUESTIONS_CODE_QUESTIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_REQUESTS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_REQUESTS]
  ADD CONSTRAINT [FK_CODE_REQUESTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ROLES]
  ADD CONSTRAINT [FK_CODE_ROLES_CODE_ROLES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_ROLES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_ROLES]
  ADD CONSTRAINT [FK_CODE_ROLES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_SCHEDULERS]
  ADD CONSTRAINT [FK_CODE_SCHEDULERS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_SCHEDULERS]
  ADD CONSTRAINT [FK_CODE_SCHEDULERS_CODE_SCHEDULERS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_SCHEDULERS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_TASKS]
  ADD CONSTRAINT [FK_CODE_TASKS_CODE_TASKS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_TEMPLATES]
  ADD CONSTRAINT [FK_CODE_TEMPLATES_CODE_TEMPLATES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_TEMPLATES] ([IDF])
GO

ALTER TABLE [dbo].[CODE_VALUESETS]
  ADD CONSTRAINT [FK_CODE_VALUESETS_CODE_VALUESETS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CODE_VALUESETS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_VALUESETS]
  ADD CONSTRAINT [FK_CODE_VALUESETS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CODE_WOKRFLOWS]
  ADD CONSTRAINT [FK_CODE_WOKRFLOWS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CONTACT_ADDRESSES]
  ADD CONSTRAINT [FK_CONTACT_ADDRESSES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CONTACT_ADDRESSES]
  ADD CONSTRAINT [FK_CONTACT_ADDRESSES_ADDRESSES]
  FOREIGN KEY ([ADDRESS_IDF]) REFERENCES [dbo].[ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[CONTACT_TELECOM_ADDRESSES]
  ADD CONSTRAINT [FK_CONTACT_TELECOM_ADDRESSES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CONTACT_TELECOM_ADDRESSES]
  ADD CONSTRAINT [FK_CONTACT_TELECOM_ADDRESSES_TELCOM_ADDRESSES]
  FOREIGN KEY ([TELECOM_ADDRESS_IDF]) REFERENCES [dbo].[TELECOM_ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[CONTACTS]
  ADD CONSTRAINT [FK_CONTACTS_CONTACTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACT_DETAILS]
  ADD CONSTRAINT [FK_CONTRACTDETAILS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[CONTRACT_DETAILS]
  ADD CONSTRAINT [FK_CONTRACT_DETAILS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACT_QUALIFIED_AERAS]
  ADD CONSTRAINT [FK_CONTRACT_QUALIFIED_AERAS_CONTRACT_QUALIFIED_AERAS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[CONTRACT_QUALIFIED_AERAS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACT_QUALIFIED_AERAS]
  ADD CONSTRAINT [FK_CONTRACT_QUALIFIED_AERAS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[CONTRACTOR_ACCOUNTS]
  ADD CONSTRAINT [FK_CONTRACTOR_ACCOUNTS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACTOR_ACCOUNTS]
  ADD CONSTRAINT [FK_CONTRACTOR_ACCOUNTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_CONTACTS_PERSONS_PMO]
  FOREIGN KEY ([PMO_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_CONTRACTS_PERSONS_CA]
  FOREIGN KEY ([CAO_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_CONTRACTS_PERSONS_SYS]
  FOREIGN KEY ([CMO_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_ORGANIZATION_CONTRACTS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_CONTRACTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[CONTRACTS]
  ADD CONSTRAINT [FK_CONTRACTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENT_LOCATIONS]
  ADD CONSTRAINT [FK_DOCUMENT_LOCATIONS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENTS]
  ADD CONSTRAINT [FK_DOCUMENTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENTS]
  ADD CONSTRAINT [FK_DOCUMENTS_DOCUMENTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENTS]
  ADD CONSTRAINT [FK_DOCUMENTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENTS]
  ADD CONSTRAINT [FK_DOCUMENTS_ORGANIZATIONS]
  FOREIGN KEY ([SPONSOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[DOCUMENTS]
  ADD CONSTRAINT [FK_DOCUMENTS_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_FEDORGANIZATIONS_ORGANIZATIONS]
  FOREIGN KEY ([IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_FEDERAL_ORGANIZATIONS_FEDERAL_ORGANIZATIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_LEVEL_I]
  FOREIGN KEY ([LEVEL_I_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_LEVEL_II]
  FOREIGN KEY ([LEVEL_II_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_LEVEL_III]
  FOREIGN KEY ([LEVEL_III_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_LEVEL_IV]
  FOREIGN KEY ([LEVEL_IV_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[FEDERAL_ORGANIZATIONS]
  ADD CONSTRAINT [FK_FEDERAL_ORGANIZATIONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE SET NULL
GO

ALTER TABLE [dbo].[FINAL_CHECKLISTS]
  ADD CONSTRAINT [FK_CHCKLIStS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[FINAL_CHECKLISTS]
  ADD CONSTRAINT [FK_FINAL_CHECKLISTS_PERSONS]
  FOREIGN KEY ([PERFORMER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ACTIONS]
  ADD CONSTRAINT [FK_GROUP_ACTIONS_REF_ACTIONS]
  FOREIGN KEY ([ACTION_IDF]) REFERENCES [dbo].[CODE_ACTIONS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ACTIONS]
  ADD CONSTRAINT [FK_GROUP_ACTIONS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ACTIVITIES]
  ADD CONSTRAINT [FK_GROUP_ACTIVITIES_OWN_ACTIVITIES]
  FOREIGN KEY ([ACTIVITY_IDF]) REFERENCES [dbo].[OWN_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ACTIVITIES]
  ADD CONSTRAINT [FK_GROUP_ACTIVITIES_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_CONTRACTS]
  ADD CONSTRAINT [FK_GROUP_CONTRACTS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_CONTRACTS]
  ADD CONSTRAINT [FK_GROUP_CONTRACTS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_CONTRACTS]
  ADD CONSTRAINT [FK_GROUP_CONTRACTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_CONTRACTS]
  ADD CONSTRAINT [FK_GROUP_CONTRACTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_CONTRACTS]
  ADD CONSTRAINT [FK_GROUP_CONTRACTS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_DOCUMENTS]
  ADD CONSTRAINT [FK_GROUP_DOCUMENTS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_DOCUMENTS]
  ADD CONSTRAINT [FK_GROUP_DOCUMENTS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_EVENTS]
  ADD CONSTRAINT [FK_GROUP_EVENTS_OWN_EVENTS]
  FOREIGN KEY ([EVENT_IDF]) REFERENCES [dbo].[OWN_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_EVENTS]
  ADD CONSTRAINT [FK_GROUP_EVENTS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ITEMS]
  ADD CONSTRAINT [FK_GROUP_ITEMS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_LOOKUP_ITEMS]
  ADD CONSTRAINT [FK_LOOKUPITEMS_LOOKUPITEMS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[GROUP_LOOKUP_ITEMS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[GROUP_LOOKUP_ITEMS]
  ADD CONSTRAINT [FK_LOOKUPIteMS_REF_LOOKUPITEMS]
  FOREIGN KEY ([LOOKUP_IDF]) REFERENCES [dbo].[REF_LOOKUP_ITEMS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[GROUP_LOOKUP_ITEMS]
  ADD CONSTRAINT [FK_LOOKUPITEMS_GROUPS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_MEMBERS]
  ADD CONSTRAINT [FK_GROUP_MEMBERS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_MESSAGES]
  ADD CONSTRAINT [FK_GROUP_MESSAGES_OWN_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF]) REFERENCES [dbo].[OWN_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_MESSAGES]
  ADD CONSTRAINT [FK_GROUP_MESSAGES_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_NODES]
  ADD CONSTRAINT [FK_GROUP_NODES_WORKFLOW_NODES]
  FOREIGN KEY ([NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_NODES]
  ADD CONSTRAINT [FK_GROUPNODES_WORKFLOW_1stNode]
  FOREIGN KEY ([FIRST_NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_NODES]
  ADD CONSTRAINT [FK_GROUP_NODES_WORKFLOW_NODES3]
  FOREIGN KEY ([LAST_NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_NODES]
  ADD CONSTRAINT [FK_GROUP_NODES_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_NOTIFICATIONS]
  ADD CONSTRAINT [FK_GRPNOTIFICATIONS_OWNNOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[GROUP_NOTIFICATIONS]
  ADD CONSTRAINT [FK_GROUP_NOTIFICATIONS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ORGANIZATIONS]
  ADD CONSTRAINT [FK_GROUP_ORGANIZATIONS_ORGANIZATIONS]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ORGANIZATIONS]
  ADD CONSTRAINT [FK_GROUP_ORGANIZATIONS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_PERSONS]
  ADD CONSTRAINT [FK_GROUP_PERSONS_PERSONS]
  FOREIGN KEY ([PERSON_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_PERSONS]
  ADD CONSTRAINT [FK_GROUP_PERSONS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_REPORTS]
  ADD CONSTRAINT [FK_GROUP_REPORTS_REPORTS]
  FOREIGN KEY ([REPORT_IDF]) REFERENCES [dbo].[REPORTS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_REPORTS]
  ADD CONSTRAINT [FK_GROUP_REPORTS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_ROLES]
  ADD CONSTRAINT [FK_GROUP_ROLES_CODE_ROLES]
  FOREIGN KEY ([ROLE_IDF]) REFERENCES [dbo].[CODE_ROLES] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[GROUP_ROLES]
  ADD CONSTRAINT [FK_GROUP_ROLES_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_TASKS]
  ADD CONSTRAINT [FK_GROUP_TASKS_OWN_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_TASKS]
  ADD CONSTRAINT [FK_GROUP_TASKS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_TELECOM_ADDRESSES]
  ADD CONSTRAINT [FK_GROUP_TELECOM_ADDRESSES_TELECOM_ADDRESSES]
  FOREIGN KEY ([TELECOM_IDF]) REFERENCES [dbo].[TELECOM_ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_TELECOM_ADDRESSES]
  ADD CONSTRAINT [FK_GROUP_TELECOM_ADDRESSES_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_USERS]
  ADD CONSTRAINT [FK_NEW_TABLE_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_USERS]
  ADD CONSTRAINT [FK_GROUP_USERS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_VALUESETS]
  ADD CONSTRAINT [FK_GROUP_VALUESETS_CODE_VALUESETS]
  FOREIGN KEY ([VALUE_IDF]) REFERENCES [dbo].[CODE_VALUESETS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_VALUESETS]
  ADD CONSTRAINT [FK_GROUP_VALUESETS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_WORKFLOWS]
  ADD CONSTRAINT [FK_GROUP_WORKFLOWS_OWN_WORKFLOWS]
  FOREIGN KEY ([WORKFLOW_IDF]) REFERENCES [dbo].[OWN_WORKFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[GROUP_WORKFLOWS]
  ADD CONSTRAINT [FK_GROUP_WORKFLOWS_CODE_GROUPS]
  FOREIGN KEY ([GROUP_IDF]) REFERENCES [dbo].[CODE_GROUPS] ([IDF])
GO

ALTER TABLE [dbo].[GSS_SOLUTION_CLINS]
  ADD CONSTRAINT [FK_GSS_SOLUTION_CLINS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[GSS_SOLUTION_CLINS]
  ADD CONSTRAINT [FK_GSS_SOLUTION_CLINS_REF_NITAAC_CLINS]
  FOREIGN KEY ([CLIN_IDF]) REFERENCES [dbo].[REF_NITAAC_CLINS] ([IDF])
GO

ALTER TABLE [dbo].[GSS_SOLUTION_CLINS]
  ADD CONSTRAINT [FK_GSS_SOLUTION_CLINS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[HOLIDAYS]
  ADD CONSTRAINT [FK_Holidays_CODE_HOLIDAYS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_HOLIDAYS] ([IDF])
GO

ALTER TABLE [dbo].[INVOICES]
  ADD CONSTRAINT [FK_INVOICES_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[INVOICES]
  ADD CONSTRAINT [FK_INVOICES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[INVOICES]
  ADD CONSTRAINT [FK_INVOICES_AWARDED_PROPOSALS]
  FOREIGN KEY ([AWARD_IDF], [PROPOSAL_IDF]) REFERENCES [dbo].[AWARDED_PROPOSALS] ([AWARD_IDF], [PROPOSAL_IDF])
GO

ALTER TABLE [dbo].[INVOICES]
  ADD CONSTRAINT [FK_INVOICES_DOCUMENTS]
  FOREIGN KEY ([SUPPORT_DOC_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGE_BASE]
  ADD CONSTRAINT [FK_KNOWLEDGE_BASE_KNOWLEDGE_BASE]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[KNOWLEDGE_BASE] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGE_BASE]
  ADD CONSTRAINT [FK_KNOWLEDGE_BASE_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGE_BASE]
  ADD CONSTRAINT [FK_KNOWLEDGE_BASE_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGE_DETAILS]
  ADD CONSTRAINT [FK_KNOWLEDGE_DETAILS_KNOWLEDGES]
  FOREIGN KEY ([KNOWLEDGE_IDF]) REFERENCES [dbo].[KNOWLEDGES] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGE_DETAILS]
  ADD CONSTRAINT [FK_KNOWLEDGE_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGES]
  ADD CONSTRAINT [FK_KNOWLEDGES_KNOWLEDGE_BASE]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[KNOWLEDGE_BASE] ([IDF])
GO

ALTER TABLE [dbo].[KNOWLEDGES]
  ADD CONSTRAINT [FK_KNOWLEDGES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[MASTER_PAYMENTS]
  ADD CONSTRAINT [FK_MASTER_PAYMENTS_CONTRACTOR_ACCOUNTS]
  FOREIGN KEY ([ACCOUNT_IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[CONTRACTOR_ACCOUNTS] ([IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[MASTER_PAYMENTS]
  ADD CONSTRAINT [FK_MASTER_CHECKS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[MESSAGE_DOCUMENTS]
  ADD CONSTRAINT [FK_MESSAGE_DOCUMENTS_NOTIFICATION_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF], [NOTIFICATION_IDF]) REFERENCES [dbo].[NOTIFICATION_MESSAGES] ([MESSAGE_IDF], [NOTIFICATION_IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[MESSAGE_DOCUMENTS]
  ADD CONSTRAINT [FK_MESSAGE_DOCUMENTS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[METADATA_DEFINITION]
  ADD CONSTRAINT [FK_METADATA_DEFINITION_SYSTEM_CONFIGURATION]
  FOREIGN KEY ([OWNER_IDF]) REFERENCES [dbo].[SYSTEM_CONFIGURATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[METADATA_DEFINITION]
  ADD CONSTRAINT [FK_METADATA_DEFINITION_METADATA_DEFINITION]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[METADATA_DEFINITION] ([IDF])
GO

ALTER TABLE [dbo].[METADATA_VALUE]
  ADD CONSTRAINT [FK_METADATA_VALUE_METADATA_DEFINITION]
  FOREIGN KEY ([METADATA_IDF]) REFERENCES [dbo].[METADATA_DEFINITION] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[MODIFICATION_DETAILS]
  ADD CONSTRAINT [FK_MODIFICATION_DETAILS_AWARD_PERIODS]
  FOREIGN KEY ([AWARD_PERIOD_IDF]) REFERENCES [dbo].[AWARD_PERIODS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[MODIFICATION_DETAILS]
  ADD CONSTRAINT [FK_MODIFICATION_DETAILS_AWARD_MODIFICATIONS]
  FOREIGN KEY ([MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[MONTHLY_INVOICES]
  ADD CONSTRAINT [FK_MONTHLY_INVOICES_ORGANIZATIONS]
  FOREIGN KEY ([AWARDEE_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[MONTHLY_INVOICES]
  ADD CONSTRAINT [FK_MONTHLY_INVOICES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[MONTHLY_INVOICES]
  ADD CONSTRAINT [FK_MONTHLY_INVOICES_INVOICES]
  FOREIGN KEY ([INVOICE_IDF]) REFERENCES [dbo].[INVOICES] ([IDF])
GO

ALTER TABLE [dbo].[NODE_DETAILS]
  ADD CONSTRAINT [FK_NEW_TABLE_WORKFLOW_NODES]
  FOREIGN KEY ([NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[NODE_DETAILS]
  ADD CONSTRAINT [FK_NODE_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[NODE_TASKS]
  ADD CONSTRAINT [FK_OWN_TASKS_WORKFLOW_NODES_WORKFLOW_NODES]
  FOREIGN KEY ([NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[NODE_TASKS]
  ADD CONSTRAINT [FK_OWN_TASKS_WORKFLOW_NODES_OWN_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[NODE_TASKS]
  ADD CONSTRAINT [FK_NODE_TAKSKS_OWN_TASKS]
  FOREIGN KEY ([PREVIOUS_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[NOTE_COMMENTS]
  ADD CONSTRAINT [FK_NOTE_COMMENTS_NOTE_COMMENTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[NOTE_COMMENTS] ([IDF])
GO

ALTER TABLE [dbo].[NOTE_COMMENTS]
  ADD CONSTRAINT [FK_NOTE_COMMENTS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[NOTE_COMMENTS]
  ADD CONSTRAINT [FK_NOTE_COMMENTS_PERSONS]
  FOREIGN KEY ([WRITER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[NOTIFICATION_MESSAGES]
  ADD CONSTRAINT [FK_NOTIFICATION_IDF]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[NOTIFICATION_MESSAGES]
  ADD CONSTRAINT [FK_MESSAGES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[NOTIFICATION_MESSAGES]
  ADD CONSTRAINT [FK_MESSAGES_OWN_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF]) REFERENCES [dbo].[OWN_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_APPROVALS]
  ADD CONSTRAINT [FK_APPROVAL_ORDER]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_APPROVALS]
  ADD CONSTRAINT [FK_ORDER_APPROVALS_USERS]
  FOREIGN KEY ([APPROVER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_CLINS]
  ADD CONSTRAINT [FK_ORDER_CLINS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_CLINS]
  ADD CONSTRAINT [FK_ORDER_CLINS_REF_NITAAC_CLINS]
  FOREIGN KEY ([CLIN_IDF]) REFERENCES [dbo].[REF_NITAAC_CLINS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_CLINS]
  ADD CONSTRAINT [FK_ORDER_CLINS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_COMPLIANCES]
  ADD CONSTRAINT [FK_ORDER_COMPLIANCES_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_COMPLIANCES]
  ADD CONSTRAINT [FK_ORDER_COMPLIANCES_ORDER_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDERDELIVERY_ORDER]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_ADDRESSES]
  FOREIGN KEY ([ADDRESS_IDF]) REFERENCES [dbo].[ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_CUSTOMER_IDF]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_PROVIDER]
  FOREIGN KEY ([PROVIDER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_TELECOM_ADDRESSES]
  FOREIGN KEY ([TELECOM_ADDRESS_IDF]) REFERENCES [dbo].[TELECOM_ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DELIVERIES]
  ADD CONSTRAINT [FK_ORDER_DELIVERIES_ALT_PROVIDER]
  FOREIGN KEY ([ALT_PROVIDER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DETAILS]
  ADD CONSTRAINT [FK_ORDER_DETAILS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DETAILS]
  ADD CONSTRAINT [FK_ORDER_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_TASK_MODIFICATIONS]
  FOREIGN KEY ([TASK_MODIFICATION_IDF]) REFERENCES [dbo].[TASK_MODIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_NOTIFICATION_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF], [NOTIFICATION_IDF]) REFERENCES [dbo].[NOTIFICATION_MESSAGES] ([MESSAGE_IDF], [NOTIFICATION_IDF])
GO

ALTER TABLE [dbo].[ORDER_DOCUMENTS]
  ADD CONSTRAINT [FK_ORDER_DOCUMENTS_AWARD_MODIFICATIONS]
  FOREIGN KEY ([ORDER_MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_FINANCE_LOES]
  ADD CONSTRAINT [FK_ORDER_LOES_ORDER_FINANCES]
  FOREIGN KEY ([ORDER_FIANCE_IDF]) REFERENCES [dbo].[ORDER_FINANCES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_FINANCE_LOES]
  ADD CONSTRAINT [FK_ORDER_LOES_ORDER_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_FINANCES]
  ADD CONSTRAINT [FK_ORDER_FINANCES_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_FINANCES]
  ADD CONSTRAINT [FK_ORDER_FINANCES_ORDER_FINANCES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[ORDER_FINANCES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_FINANCES]
  ADD CONSTRAINT [FK_ORDER_FINANCES_AWARD_MODIFICATIONS]
  FOREIGN KEY ([MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_GSS_CLIN_OPTIONS]
  ADD CONSTRAINT [FK_ORDER_GSS_CLIN_OPTIONS_ORDER_CLINS]
  FOREIGN KEY ([ITEM_IDF]) REFERENCES [dbo].[ORDER_CLINS] ([ITEM_IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_REVISION_MESSAGES_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_REVISION_MESSAGES_OWN_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF]) REFERENCES [dbo].[OWN_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_ORDER_MESSAGES_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_ORDER_MESSAGES_ORGANIZATIONS_CONtRACTOR]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_ORDER_MESSAGES_USERS_SENDER]
  FOREIGN KEY ([SENDER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_ORDER_MESSAGES_USERS_RECIEVER]
  FOREIGN KEY ([RECEIVER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_MESSAGES]
  ADD CONSTRAINT [FK_ORDER_MESSAGES_ORGANIZATIONS_CUSTOMER]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_TASK_ORDER_QUESTION_ANSWER_ORGANIZATION_ID]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_TASK_ORDER_QUESTION_ANSWER_TASK_ORDER_ID]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTION_ANSWER_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTION_ANSWER_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTION_ANSWER_ORDER_QUESTION_ANSWER]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[ORDER_QUESTIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTIONS_PERSONS]
  FOREIGN KEY ([OWNER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTIONS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_QUESTIONS]
  ADD CONSTRAINT [FK_ORDER_QUESTIONS_ORGANIZATIONS]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RATING_FACTORS]
  ADD CONSTRAINT [FK_ORDER_RATING_FACTORS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_RESPONSES]
  ADD CONSTRAINT [FK_ORDER_RESPONSES_CONTRACT_IDF]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_REVIEW_DETAILS]
  ADD CONSTRAINT [FK_REVIEWDTLS_REVIEWS]
  FOREIGN KEY ([REVIEW_IDF]) REFERENCES [dbo].[ORDER_REVIEWS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_REVIEWS]
  ADD CONSTRAINT [FK_REVIEWS_PERSONS_RVWER]
  FOREIGN KEY ([REVIEWER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_REVIEWS]
  ADD CONSTRAINT [FK_REVIEWS_ORDERTASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_REVIEWS]
  ADD CONSTRAINT [FK_ORDER_REVIEWS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASK_FINANCES]
  ADD CONSTRAINT [FK_ORDER_TASK_FINANCES_ORDER_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASK_FINANCES]
  ADD CONSTRAINT [FK_ORDER_TASK_FINANCES_ORDER_FINANCES]
  FOREIGN KEY ([ORDER_FINANCE_IDF]) REFERENCES [dbo].[ORDER_FINANCES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS]
  ADD CONSTRAINT [FK_ORDERTASKS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_TASKS]
  ADD CONSTRAINT [FK_ORDER_TASKS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS]
  ADD CONSTRAINT [FK_ORDER_TASKS_PERSONS]
  FOREIGN KEY ([REVIEWER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS]
  ADD CONSTRAINT [FK_ORDER_TASKS_PARENT_TASK]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS]
  ADD CONSTRAINT [FK_ORDER_TASKS_PERSONS2]
  FOREIGN KEY ([PRIMARY_POC_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS_DELIVERABLES]
  ADD CONSTRAINT [FK_ORDER_TASKS_DELIVERABLES_AWARD_DELIVERABLES]
  FOREIGN KEY ([DELIVERABLE_IDF]) REFERENCES [dbo].[AWARD_DELIVERABLES] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS_DELIVERABLES]
  ADD CONSTRAINT [FK_ORDER_TASKS_DELIVERABLES_ORDER_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[ORDER_TASKS_DELIVERABLES]
  ADD CONSTRAINT [FK_ORDER_TASKS_DELIVERABLES_AWARD_PAYMENTS]
  FOREIGN KEY ([PAYMENT_IDF], [AWARD_IDF]) REFERENCES [dbo].[AWARD_PAYMENTS] ([PAYMENT_IDF], [AWARD_IDF])
GO

ALTER TABLE [dbo].[ORDER_TO_DO_LISTS]
  ADD CONSTRAINT [FK_TODOACTION_ITEMACTION]
  FOREIGN KEY ([ACTION_IDF]) REFERENCES [dbo].[CODE_ACTIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_TO_DO_LISTS]
  ADD CONSTRAINT [FK_TODOLST_ORDER_ID]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDER_TO_DO_LISTS]
  ADD CONSTRAINT [FK_ORDER_TO_DO_LISTS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_OWNER]
  FOREIGN KEY ([OWNER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_ORDERS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_APPLICATION_IDF]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_ASSIST_IDF]
  FOREIGN KEY ([ASSISTED_CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_SOLE_IDF]
  FOREIGN KEY ([SOLE_CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_CUSTOMER_IDF]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_APPROVER]
  FOREIGN KEY ([APPROVER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_CO]
  FOREIGN KEY ([CO_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_CO_ALT]
  FOREIGN KEY ([CO_ALT_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_CS]
  FOREIGN KEY ([CS_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_CS_ALT]
  FOREIGN KEY ([CS_ALT_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_COTR]
  FOREIGN KEY ([COTR_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_COTR_ALT]
  FOREIGN KEY ([COTR_ALT_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_AMO]
  FOREIGN KEY ([AMO_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_AMO_ALT]
  FOREIGN KEY ([AMO_ALT_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_REVIEWER]
  FOREIGN KEY ([REVIEWER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_ISSO]
  FOREIGN KEY ([ISSO_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_ISSO_ALT]
  FOREIGN KEY ([ISSO_ALT_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORDERS]
  ADD CONSTRAINT [FK_ORDERS_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[ORGANIZATION_ROLES]
  ADD CONSTRAINT [FK_ORGANIZATION_ROLES_CODE_ROLES]
  FOREIGN KEY ([ROLE_IDF]) REFERENCES [dbo].[CODE_ROLES] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[ORGANIZATION_ROLES]
  ADD CONSTRAINT [FK_ORGANIZATION_ROLES_ORGANIZATIONS]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORGANIZATIONS]
  ADD CONSTRAINT [FK_ORGANIZATIONS_ORGANIZATIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[ORGANIZATIONS]
  ADD CONSTRAINT [FK_ORGANIZATIONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_CODE_ACTIVITIES]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_OWN_ACTIVITIES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_OWN_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_ERRORS]
  ADD CONSTRAINT [FK_OWN_ERRORS_CODE_ERRORS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_ERRORS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_EVENTS]
  ADD CONSTRAINT [FK_CODE_EVENTS2_CODE_EVENTS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_EVENTS]
  ADD CONSTRAINT [FK_CODE_EVENTS2_CODE_EVENTS2]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_MESSAGES]
  ADD CONSTRAINT [FK_OWNMESSAGES_CODEMESSAGES]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_MESSAGES]
  ADD CONSTRAINT [FK_OWNMESSAGES_OWNMESSAGES_PARENT]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_MESSAGES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_MESSAGES]
  ADD CONSTRAINT [FK_OWN_MESSAGES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_MESSAGES]
  ADD CONSTRAINT [FK_OWN_MESSAGES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_NOTIFICATIONS]
  ADD CONSTRAINT [FK_NOTIFICATIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_NOTIFICATIONS]
  ADD CONSTRAINT [FK_NOTIFICATIONS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_NOTIFICATIONS]
  ADD CONSTRAINT [FK_NOTIFICATIONS_CODE_NOTIFICATIONS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_NOTIFICATIONS]
  ADD CONSTRAINT [FK_OWN_NOTIFICATIONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_REQUESTS]
  ADD CONSTRAINT [FK_OWN_QUESTIONS_OWN_QUESTIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_REQUESTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_REQUESTS]
  ADD CONSTRAINT [FK_OWN_QUESTIONS_CODE_QUESTIONS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_REQUESTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_REQUESTS]
  ADD CONSTRAINT [FK_OWN_REQUESTS_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_REQUESTS]
  ADD CONSTRAINT [FK_OWN_REQUESTS_PERSONS]
  FOREIGN KEY ([REQUESTER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_REQUESTS]
  ADD CONSTRAINT [FK_OWN_REQUESTS_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TASKS]
  ADD CONSTRAINT [FK_OWN_TASKS_OWN_TASKS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TASKS]
  ADD CONSTRAINT [FK_OWN_TASKS_CODE_TASKS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TASKS]
  ADD CONSTRAINT [FK_OWN_TASKS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TEMPLATES]
  ADD CONSTRAINT [FK_OWN_TEMPLATES_OWN_TEMPLATES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_TEMPLATES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TEMPLATES]
  ADD CONSTRAINT [FK_OWN_TEMPLATES_CODE_TEMPLATES]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_TEMPLATES] ([IDF])
GO

ALTER TABLE [dbo].[OWN_TEMPLATES]
  ADD CONSTRAINT [FK_OWN_TEMPLATES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_VALUESETS]
  ADD CONSTRAINT [FK_OWN_VALUESETS_CODE_VALUESETS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_VALUESETS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_VALUESETS]
  ADD CONSTRAINT [FK_OWN_VALUESETS_OWN_VALUESETS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_VALUESETS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_VERIFY_PROCESSES]
  ADD CONSTRAINT [FK_OWN_VERIFY_PROCESSES_OWN_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_VERIFY_PROCESSES]
  ADD CONSTRAINT [FK_OWN_VERIFY_PROCESSES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_WORKFLOWS]
  ADD CONSTRAINT [FK_OWN_WORKFLOWS_OWN_WORKFLOWS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[OWN_WORKFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_WORKFLOWS]
  ADD CONSTRAINT [FK_OWN_WORKFLOWS_CODE_WOKRFLOWS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_WOKRFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[OWN_WORKFLOWS]
  ADD CONSTRAINT [FK_OWN_WORKFLOWS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[PAYMENT_REPORT]
  ADD CONSTRAINT [FK_PAYMENT_REPORT_CERTIFIED_BY_PERSON_ID]
  FOREIGN KEY ([CERTIFIED_BY_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PAYMENT_REPORT]
  ADD CONSTRAINT [FK_PAYMENT_REPORT_SYM_CONTRACT_ID]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PAYMENT_REPORT]
  ADD CONSTRAINT [FK_PAYMENT_REPORT_CONTRACTOR_ACCOUNTS]
  FOREIGN KEY ([IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[CONTRACTOR_ACCOUNTS] ([IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[PAYMENT_REPORT_ITEMS]
  ADD CONSTRAINT [FK_PAYMENTREPORTITEMS_PAYMENTREPORTS]
  FOREIGN KEY ([REPORT_IDF]) REFERENCES [dbo].[PAYMENT_REPORT] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PAYMENT_REPORT_ITEMS]
  ADD CONSTRAINT [FK_PAYMENTREPORTITEMS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PAYMENT_REPORT_ITEMS]
  ADD CONSTRAINT [FK_PAYMENT_REPORT_ITEMS_AWARD_MODIFICATIONS]
  FOREIGN KEY ([MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PAYMENT_REPORT_ITEMS]
  ADD CONSTRAINT [FK_PAYMENTREPORTITEMS_INOVICES]
  FOREIGN KEY ([INVOICE_IDF]) REFERENCES [dbo].[INVOICES] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PERSON_ROLES]
  ADD CONSTRAINT [FK_PERSON_ROLES_CODE_ROLES]
  FOREIGN KEY ([ROLE_IDF]) REFERENCES [dbo].[CODE_ROLES] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[PERSON_ROLES]
  ADD CONSTRAINT [FK_PERSON_ROLES_PERSONS]
  FOREIGN KEY ([PERSON_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[PERSON_ROLES]
  ADD CONSTRAINT [FK_PERSON_ROLES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PERSONS]
  ADD CONSTRAINT [FK_PERSONS_ORGANIZATIONS]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PERSONS]
  ADD CONSTRAINT [FK_PERSONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[PERSONS]
  ADD CONSTRAINT [FK_PERSONS_PERSONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[PROCESS_DETAILS]
  ADD CONSTRAINT [FK_PROCESS_DETAILS_OWN_VERIFY_PROCESSES]
  FOREIGN KEY ([PROCESS_IDF], [OWNER_IDF]) REFERENCES [dbo].[OWN_VERIFY_PROCESSES] ([IDF], [OWNER_IDF])
GO

ALTER TABLE [dbo].[PROCESS_DETAILS]
  ADD CONSTRAINT [FK_PROCESS_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_CUSTOMER]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_ADDRESSES]
  FOREIGN KEY ([ADDRESS_IDF]) REFERENCES [dbo].[ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_ORGANIZATIONS]
  FOREIGN KEY ([PROVIDER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_ORGANIZATIONS2]
  FOREIGN KEY ([ALT_PROVIDER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DELIVERIES]
  ADD CONSTRAINT [FK_PROPOSAL_DELIVERIES_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DETAILS]
  ADD CONSTRAINT [FK_PROPOSAL_DETAILS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_DETAILS]
  ADD CONSTRAINT [FK_PROPOSAL_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_FINANCE_LOES]
  ADD CONSTRAINT [FK_ORDER_PROPOSAL_LOES_PROPOSED_TASKS]
  FOREIGN KEY ([PROPOSED_TASK_IDF]) REFERENCES [dbo].[PROPOSED_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_FINANCE_LOES]
  ADD CONSTRAINT [FK_ORDER_PROPOSAL_LOES_PROPOSAL_FINANCES]
  FOREIGN KEY ([PROPOSAL_FINANCE_IDF], [PROPOSAL_IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[PROPOSAL_FINANCES] ([IDF], [PROPOSAL_IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_FINANCES]
  ADD CONSTRAINT [FK_PROPOSAL_FINANCES_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_RATINGS]
  ADD CONSTRAINT [FK_PROPOSAL_RATINGS_PROPOSAL_REVIEWS]
  FOREIGN KEY ([REVIEW_IDF]) REFERENCES [dbo].[PROPOSAL_REVIEWS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_RATINGS]
  ADD CONSTRAINT [FK_PROPOSAL_RATINGS_ORDER_RATING_FACTORS]
  FOREIGN KEY ([RATE_FACTOR_IDF]) REFERENCES [dbo].[ORDER_RATING_FACTORS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_REVIEWS]
  ADD CONSTRAINT [FK_PROPOSAL_REVIEWS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_REVIEWS]
  ADD CONSTRAINT [FK_PROPOSAL_REVIEWS_PROPOSED_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[PROPOSED_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_REVIEWS]
  ADD CONSTRAINT [FK_PROPOSAL_REVIEWS_PROPOSAL_REVISIONS]
  FOREIGN KEY ([REVISION_IDF]) REFERENCES [dbo].[PROPOSAL_REVISIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_REVIEWS]
  ADD CONSTRAINT [FK_PROPOSAL_REVIEWS_USER_REVIEWER]
  FOREIGN KEY ([REVIEWER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSAL_REVISIONS]
  ADD CONSTRAINT [FK_PROPOSAL_REVISIONS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_USERS_SUBMITTER]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSALS]
  ADD CONSTRAINT [FK_PROPOSALS_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_CLINS]
  ADD CONSTRAINT [FK_PROPOSED_CLINS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_CLINS]
  ADD CONSTRAINT [FK_PROPOSED_CLINS_REF_CONTRACTOR_TRPS]
  FOREIGN KEY ([TRP_IDF]) REFERENCES [dbo].[REF_CONTRACTOR_TRPS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_CLINS]
  ADD CONSTRAINT [FK_PROPOSED_CLINS_PROCESS_DETAILS]
  FOREIGN KEY ([APPROVER_IDF]) REFERENCES [dbo].[PROCESS_DETAILS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_CLINS]
  ADD CONSTRAINT [FK_PROPOSED_CLINS_REF_NITAAC_CONTRACTOR_CLINS]
  FOREIGN KEY ([CLIN_IDF], [CONTRACT_IDF]) REFERENCES [dbo].[REF_NITAAC_CONTRACTOR_CLINS] ([CLIN_IDF], [CONTRACT_IDF])
GO

ALTER TABLE [dbo].[PROPOSED_CLINS]
  ADD CONSTRAINT [FK_PROPOSED_CLINS_ORDER_CLINS]
  FOREIGN KEY ([ORDER_ITEM_IDF]) REFERENCES [dbo].[ORDER_CLINS] ([ITEM_IDF])
GO

ALTER TABLE [dbo].[PROPOSED_TASK_FINANCES]
  ADD CONSTRAINT [FK_PROPOSED_TASK_FINANCES_PROPOSAL_FINANCES]
  FOREIGN KEY ([PROPOSAL_FINANCE_IDF], [PROPOSAL_IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[PROPOSAL_FINANCES] ([IDF], [PROPOSAL_IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[PROPOSED_TASK_FINANCES]
  ADD CONSTRAINT [FK_PROPOSED_TASK_FINANCES_PROPOSED_TASKS]
  FOREIGN KEY ([PROPOSED_TASK_IDF]) REFERENCES [dbo].[PROPOSED_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_TASKS]
  ADD CONSTRAINT [FK_PROPOSED_TASKS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_TASKS]
  ADD CONSTRAINT [FK_PROPOSED_TASKS_ORDER_TASKS]
  FOREIGN KEY ([ORDER_TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[PROPOSED_TASKS]
  ADD CONSTRAINT [FK_PROPOSED_TASKS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_PERSONS]
  FOREIGN KEY ([OWNER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_QUESTION_ANSWERS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[QUESTION_ANSWERS] ([IDF])
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_DOCUMENT_IDF]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_CONTRRACTOR_IDF]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[QUESTION_ANSWERS]
  ADD CONSTRAINT [FK_QUESTION_ANSWERS_CUSTOMER_IDF]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRP_CLINS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRP_CLINS_REF_CONTRACTOR_TRPS]
  FOREIGN KEY ([TRP_IDF]) REFERENCES [dbo].[REF_CONTRACTOR_TRPS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRP_CLINS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRP_CLINS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRP_GSS_CLINS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRP_GSS_CLINS_REF_CONTRACTOR_TRP_CLINS]
  FOREIGN KEY ([CLIN_IDF], [CONTRACTOR_IDF]) REFERENCES [dbo].[REF_CONTRACTOR_TRP_CLINS] ([IDF], [CONTRACTOR_IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_REF_CONTRACTOR_TRPS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_CONTRACTOR_TRPS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_USERS]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[REF_CONTRACTOR_TRPS]
  ADD CONSTRAINT [FK_REF_CONTRACTOR_TRPS_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[REF_LOOKUP_ITEMS]
  ADD CONSTRAINT [FK_REF_LOOKUP_ITEMS_REF_LOOKUP_ITEMS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_LOOKUP_ITEMS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CATEGORY_COMMODITY]
  ADD CONSTRAINT [FK_REF_NITAAC_CATEGORY_COMMODITY_REF_NITAAC_CATEGORY_COMMODITY]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CLINS_REF_UPC_INFO]
  FOREIGN KEY ([UPC_IDF]) REFERENCES [dbo].[REF_NITAAC_UPC_INFO] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[REF_NITAAC_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CLINS_REF_OEM_MFR]
  FOREIGN KEY ([OEM_MFR_IDF]) REFERENCES [dbo].[REF_NITAAC_OEM_MFR] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[REF_NITAAC_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CLINS_REF_NITAAC_CLINS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_NITAAC_CLINS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CLINS_REF_NITAAC_CATEGORY_COMMODITY]
  FOREIGN KEY ([CATEGORY_IDF]) REFERENCES [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CLINS_REF_NITAAC_CATEGORY_COMMODITY2]
  FOREIGN KEY ([COMMODITY_IDF]) REFERENCES [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_REF_NITAAC_CATEGORY_IDF]
  FOREIGN KEY ([CATEGORY_IDF]) REFERENCES [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_REF_NITAAC_CLINS]
  FOREIGN KEY ([CLIN_IDF]) REFERENCES [dbo].[REF_NITAAC_CLINS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_REF_NITAAC_COMMODITY_IDF]
  FOREIGN KEY ([COMMODITY_IDF]) REFERENCES [dbo].[REF_NITAAC_CATEGORY_COMMODITY] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_REF_CONTRACTOR_TRPS]
  FOREIGN KEY ([TRP_IDF]) REFERENCES [dbo].[REF_CONTRACTOR_TRPS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_CLINS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_GSS_CLINS_REF_NITAAC_CLIN_OFFER_TYPE]
  FOREIGN KEY ([OFFER_TYPE_IDF]) REFERENCES [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_GSS_CLINS_REF_NITAAC_CONTRACTOR_CLINS]
  FOREIGN KEY ([CLIN_IDF], [CONTRACT_IDF]) REFERENCES [dbo].[REF_NITAAC_CONTRACTOR_CLINS] ([CLIN_IDF], [CONTRACT_IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_RATES]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_RATES_REF_NITAAC_LABOR_CATEGORIES]
  FOREIGN KEY ([LABOR_CATEGORY_IDF]) REFERENCES [dbo].[REF_NITAAC_LABOR_CATEGORIES] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[REF_NITAAC_CONTRACTOR_RATES]
  ADD CONSTRAINT [FK_REF_NITAAC_CONTRACTOR_RATES_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_DEFINITIONS]
  ADD CONSTRAINT [FK_REF_NITAAC_DEFINITIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_DEFINITIONS]
  ADD CONSTRAINT [FK_REF_NITAAC_DEFINITIONS_REF_NITAAC_DEFINITIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_NITAAC_DEFINITIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_FEE_RATES]
  ADD CONSTRAINT [FK_REF_NITAAC_FEE_RATE_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_IDS]
  ADD CONSTRAINT [FK_REF_NITAAC_IDS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_IDS]
  ADD CONSTRAINT [FK_REF_NITAAC_IDS_ORGANIZATIONS]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_IDS]
  ADD CONSTRAINT [FK_REF_NITAAC_IDS_REF_NITAAC_IDS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_NITAAC_IDS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_LABOR_RATES]
  ADD CONSTRAINT [FK_REF_NITAAC_LABOR_RATES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_LABOR_RATES]
  ADD CONSTRAINT [FK_REF_NITAAC_LABOR_RATES_REF_NITAAC_LABOR_CATEGORIES]
  FOREIGN KEY ([LABOR_CATEGORY_IDF]) REFERENCES [dbo].[REF_NITAAC_LABOR_CATEGORIES] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_OEM_MFR]
  ADD CONSTRAINT [FK_REF_NITAAC_OEM_MFR_ADDRESSES]
  FOREIGN KEY ([ADDRESS_IDF]) REFERENCES [dbo].[ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_REVIEW_SCOPES]
  ADD CONSTRAINT [FK_REF_REVIEW_SCOPES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REF_NITAAC_UPC_INFO]
  ADD CONSTRAINT [FK_REF_NITAAC_UPC_INFO_ADDRESSES]
  FOREIGN KEY ([ADDRESS_IDF]) REFERENCES [dbo].[ADDRESSES] ([IDF])
GO

ALTER TABLE [dbo].[REF_REOURCE_SHARING]
  ADD CONSTRAINT [FK_REF_REOURCE_SHARING_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[REF_REOURCE_SHARING]
  ADD CONSTRAINT [FK_REF_REOURCE_SHARING_ORGANIZATIONS]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[REF_STATE_COUNTRIES]
  ADD CONSTRAINT [FK_REF_STATE_COUNTRIES_REF_STATE_COUNTRIES]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REF_STATE_COUNTRIES] ([IDF])
GO

ALTER TABLE [dbo].[RELEASE_CONTENTS]
  ADD CONSTRAINT [FK_RELEASE_CONTENTS_APPLICATION_RELEASES]
  FOREIGN KEY ([RELEASE_IDF]) REFERENCES [dbo].[APPLICATION_RELEASES] ([IDF])
GO

ALTER TABLE [dbo].[RELEASE_CONTENTS]
  ADD CONSTRAINT [FK_RELEASE_CONTENTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[RELEASE_ENVIRONMENTS]
  ADD CONSTRAINT [FK_RELEASE_ENVIRONMENTS_APPLICATION_RELEASES]
  FOREIGN KEY ([RELEASE_IDF]) REFERENCES [dbo].[APPLICATION_RELEASES] ([IDF])
GO

ALTER TABLE [dbo].[RELEASE_ENVIRONMENTS]
  ADD CONSTRAINT [FK_RELEASE_ENVIRONMENTS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[REPORT_DETAILS]
  ADD CONSTRAINT [FK_REPORTS_EXTENSION_REPORTS]
  FOREIGN KEY ([REPORT_IDF]) REFERENCES [dbo].[REPORTS] ([IDF])
GO

ALTER TABLE [dbo].[REPORTS]
  ADD CONSTRAINT [FK_REPORTS_CODE_REPORTS]
  FOREIGN KEY ([BASE_IDF]) REFERENCES [dbo].[CODE_REPORTS] ([IDF])
GO

ALTER TABLE [dbo].[REPORTS]
  ADD CONSTRAINT [FK_REPORTS_REPORTS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[REPORTS] ([IDF])
GO

ALTER TABLE [dbo].[REPORTS]
  ADD CONSTRAINT [FK_REPORTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[REQUEST_RESPONSES]
  ADD CONSTRAINT [FK_QUESTION_RESPONSES_OWN_QUESTIONS]
  FOREIGN KEY ([REQUEST_IDF]) REFERENCES [dbo].[OWN_REQUESTS] ([IDF])
GO

ALTER TABLE [dbo].[REQUEST_RESPONSES]
  ADD CONSTRAINT [FK_REQUEST_RESPONSES_PERSONS]
  FOREIGN KEY ([RESPONSOR_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[REQUEST_RESPONSES]
  ADD CONSTRAINT [FK_REQUEST_RESPONSES_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICAITON_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[SALES_REPORT]
  ADD CONSTRAINT [FK_SALES_REPORT_CERTIFIED_BY_PERSON_ID]
  FOREIGN KEY ([PERSON_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[SALES_REPORT]
  ADD CONSTRAINT [FK_SALESREPORT_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[SALES_REPORT]
  ADD CONSTRAINT [FK_SALES_REPORT_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[SALES_REPORT_ITEM]
  ADD CONSTRAINT [FK_SALES_REPORT_ITEM_SALES_REPORT_ID]
  FOREIGN KEY ([SALES_REPORT_IDF]) REFERENCES [dbo].[SALES_REPORT] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[SALES_REPORT_ITEM]
  ADD CONSTRAINT [FK_SALESREPORTITEMS_ORDERS]
  FOREIGN KEY ([ORDER_IDF]) REFERENCES [dbo].[ORDERS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[SCHEDULE_JOBS]
  ADD CONSTRAINT [FK_SCHEDULE_JOBS_CODE_SCHEDULERS]
  FOREIGN KEY ([SCHEDULER_IDF]) REFERENCES [dbo].[CODE_SCHEDULERS] ([IDF])
GO

ALTER TABLE [dbo].[SCHEDULE_JOBS]
  ADD CONSTRAINT [FK_SCHEDULE_JOBS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[SCHEDULE_JOBS]
  ADD CONSTRAINT [FK_SCHEDULE_JOBS_OWN_NOTIFICATIONS]
  FOREIGN KEY ([NOTIFICATION_IDF]) REFERENCES [dbo].[OWN_NOTIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[SHOP_CART_ITEMS]
  ADD CONSTRAINT [FK_SHOP_ITEM_SHOP_CART]
  FOREIGN KEY ([SHOP_CART_IDF]) REFERENCES [dbo].[SHOP_CARTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[SHOP_CARTS]
  ADD CONSTRAINT [FK_SHOP_CART_CS_USER]
  FOREIGN KEY ([CUSTOMER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[SHOP_CARTS]
  ADD CONSTRAINT [FK_SHOP_CART_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[SIMPLE_WORKFLOW_ACTIVITIES]
  ADD CONSTRAINT [FK_SIMPLE_WORKFLOW_ACTIVITIES_OWN_WORKFLOWS]
  FOREIGN KEY ([WORKFLOW_IDF]) REFERENCES [dbo].[OWN_WORKFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[SIMPLE_WORKFLOW_ACTIVITIES]
  ADD CONSTRAINT [FK_SIMPLE_WORKFLOW_ACTIVITIES_OWN_ACTIVITIES]
  FOREIGN KEY ([ACTIVITY_IDF]) REFERENCES [dbo].[OWN_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[SIMPLE_WORKFLOW_TASKS]
  ADD CONSTRAINT [FK_OWN_WORKFLOWS_OWN_TASKS_OWN_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[SIMPLE_WORKFLOW_TASKS]
  ADD CONSTRAINT [FK_OWN_WORKFLOWS_OWN_TASKS_OWN_WORKFLOWS]
  FOREIGN KEY ([WORKFLOW_IDF]) REFERENCES [dbo].[OWN_WORKFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[SP_ORDER_TASKS]
  ADD CONSTRAINT [FK_SP_ORDERTASKS_ORDERTASKS]
  FOREIGN KEY ([ORDER_TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[SYSTEM_CONFIGURATIONS]
  ADD CONSTRAINT [FK_SYSTEM_CONFIGURATIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[SYSTEM_MAINTENANCES]
  ADD CONSTRAINT [FK_MAINTENANCE_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[SYSTEM_MAINTENANCES]
  ADD CONSTRAINT [FK_SYSTEM_MAINTENANCES_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[SYSTEM_MAINTENANCES]
  ADD CONSTRAINT [FK_SYSTEM_MAINTENANCES_ACTIONS]
  FOREIGN KEY ([ACTION_IDF]) REFERENCES [dbo].[CODE_ACTIONS] ([IDF])
GO

ALTER TABLE [dbo].[SYSTEM_MAINTENANCES]
  ADD CONSTRAINT [FK_SYSTEM_MAINTENANCES_MESSAGES]
  FOREIGN KEY ([MESSAGE_IDF], [NOTIFICATION_IDF]) REFERENCES [dbo].[NOTIFICATION_MESSAGES] ([MESSAGE_IDF], [NOTIFICATION_IDF])
GO

ALTER TABLE [dbo].[SYSTEM_MAINTENANCES]
  ADD CONSTRAINT [FK_SYSTEM_MAINTENANCES_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[TASK_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_OWN_TASKS_OWN_TASKS]
  FOREIGN KEY ([ACTIVITY_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TASK_ACTIVITIES]
  ADD CONSTRAINT [FK_OWN_ACTIVITIES_OWN_TASKS_OWN_ACTIVITIES]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[TASK_ACTIVITIES]
  ADD CONSTRAINT [FK_TASK_ACTIVITIES_OWN_ACTIVITIES]
  FOREIGN KEY ([PREVIOUS_IDF]) REFERENCES [dbo].[OWN_ACTIVITIES] ([IDF])
GO

ALTER TABLE [dbo].[TASK_DELIVERABLE_DETAILS]
  ADD CONSTRAINT [FK_TASK_DELIVERABLE_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[TASK_DELIVERABLE_DETAILS]
  ADD CONSTRAINT [FK_TASK_DELIVERABLE_DETAILS_AWARD_DELIVERABLES]
  FOREIGN KEY ([DELIVERABLE_IDF]) REFERENCES [dbo].[AWARD_DELIVERABLES] ([IDF])
GO

ALTER TABLE [dbo].[TASK_EVENTS]
  ADD CONSTRAINT [FK_TASK_EVENTS_OWN_TASKS]
  FOREIGN KEY ([TASK_IDF]) REFERENCES [dbo].[OWN_TASKS] ([IDF])
GO

ALTER TABLE [dbo].[TASK_EVENTS]
  ADD CONSTRAINT [FK_TASK_EVENTS_OWN_EVENTS]
  FOREIGN KEY ([EVENT_IDF]) REFERENCES [dbo].[OWN_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[TASK_EVENTS]
  ADD CONSTRAINT [FK_TASK_EVENTS_OWN_EVENTS2]
  FOREIGN KEY ([PREVIOUS_IDF]) REFERENCES [dbo].[OWN_EVENTS] ([IDF])
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_CO]
  FOREIGN KEY ([CO_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_CO_ALT]
  FOREIGN KEY ([CO_ALT_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_COTR]
  FOREIGN KEY ([COTR_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_COTR_ALT]
  FOREIGN KEY ([COTR_ALT_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_CS]
  FOREIGN KEY ([CS_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_CS_ALT]
  FOREIGN KEY ([CS_ALT_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_PERSONS_APP]
  FOREIGN KEY ([APPROVER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TOAMENDMENTS_ORDERTASKS]
  FOREIGN KEY ([ORDER_TASK_IDF]) REFERENCES [dbo].[ORDER_TASKS] ([IDF])
  ON UPDATE NO ACTION
  ON DELETE NO ACTION
GO

ALTER TABLE [dbo].[TASK_MODIFICATIONS]
  ADD CONSTRAINT [FK_TASK_MODIFICATIONS_AWARD_MODIFICATIONS]
  FOREIGN KEY ([MODIFICATION_IDF]) REFERENCES [dbo].[AWARD_MODIFICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_DETAILS]
  ADD CONSTRAINT [FK_TICKET_DETAILS_TICKETS]
  FOREIGN KEY ([TICKET_IDF]) REFERENCES [dbo].[TICKETS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_DETAILS]
  ADD CONSTRAINT [FK_TICKET_DETAILS_DOCUMENTS]
  FOREIGN KEY ([DOCUMENT_IDF]) REFERENCES [dbo].[DOCUMENTS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_RESOLUTIONS]
  ADD CONSTRAINT [FK_TICKET_RESOLUTIONS_TICKETS]
  FOREIGN KEY ([TICKET_IDF]) REFERENCES [dbo].[TICKETS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_RESOLUTIONS]
  ADD CONSTRAINT [FK_TICKET_RESOLUTIONS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATIOIN_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_RESOLUTIONS]
  ADD CONSTRAINT [FK_TICKET_RESOLUTIONS_TICKET_RESOLUTIONS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[TICKET_RESOLUTIONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_RESOLUTIONS]
  ADD CONSTRAINT [FK_TICKET_RESOLUTIONS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[TICKET_RESOLUTIONS]
  ADD CONSTRAINT [FK_TICKET_RESOLUTIONS_PERSONS]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKETS]
  ADD CONSTRAINT [FK_TICKETS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATIOIN_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKETS]
  ADD CONSTRAINT [FK_TICKETS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[TICKETS]
  ADD CONSTRAINT [FK_TICKETS_PERSONS]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[TICKETS]
  ADD CONSTRAINT [FK_TICKETS_TICKETS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[TICKETS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_CLIN_REVIEW_ERRORS]
  ADD CONSTRAINT [FK_TRP_CLIN_REVIEW_ERRORS_TRP_CLIN_REVIEWS]
  FOREIGN KEY ([REVIEW_CLIN_IDF], [TRP_IDF]) REFERENCES [dbo].[TRP_CLIN_REVIEWS] ([IDF], [TRP_IDF])
GO

ALTER TABLE [dbo].[TRP_CLIN_REVIEWS]
  ADD CONSTRAINT [FK_TRP_CLIN_REVIEWS_TRP_UPLOADS]
  FOREIGN KEY ([TRP_IDF]) REFERENCES [dbo].[TRP_UPLOADS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TRP_GSS_CLIN_REVIEWS]
  ADD CONSTRAINT [FK_TRP_GSS_CLIN_REVIEWS_TRP_CLIN_REVIEWS]
  FOREIGN KEY ([IDF], [TRP_IDF]) REFERENCES [dbo].[TRP_CLIN_REVIEWS] ([IDF], [TRP_IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_TRP_UPLOADS]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[TRP_UPLOADS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_USERS]
  FOREIGN KEY ([SUBMITTER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_ORGANIZATIONS]
  FOREIGN KEY ([CONTRACTOR_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_PROPOSALS]
  FOREIGN KEY ([PROPOSAL_IDF]) REFERENCES [dbo].[PROPOSALS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_CONTRACTS]
  FOREIGN KEY ([CONTRACT_IDF]) REFERENCES [dbo].[CONTRACTS] ([IDF])
GO

ALTER TABLE [dbo].[TRP_UPLOADS]
  ADD CONSTRAINT [FK_TRP_UPLOADS_USERS_POC]
  FOREIGN KEY ([POC_IDF]) REFERENCES [dbo].[USERS] ([IDF])
GO

ALTER TABLE [dbo].[USER_APPLICATION_ROLES]
  ADD CONSTRAINT [FK_USER_ROLES_PERSONS]
  FOREIGN KEY ([PERSON_IDF]) REFERENCES [dbo].[PERSONS] ([IDF])
GO

ALTER TABLE [dbo].[USER_APPLICATION_ROLES]
  ADD CONSTRAINT [FK_USER_APPLICATION_ROLES_APPLICATION_ROLES]
  FOREIGN KEY ([ROLE_IDF], [APPLICATION_IDF]) REFERENCES [dbo].[APPLICATION_ROLES] ([ROLE_IDF], [APPLICATION_IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[USER_APPLICATION_ROLES]
  ADD CONSTRAINT [FK_USER_APPLICATION_ROLES_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[USER_FEEDBACKS]
  ADD CONSTRAINT [FK_FEEDBACKS_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[USER_REQUEST]
  ADD CONSTRAINT [FK_USERREQUEST_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[USER_REQUEST]
  ADD CONSTRAINT [FK_USER_REQUEST_USER_REQUEST]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[USER_REQUEST] ([IDF])
GO

ALTER TABLE [dbo].[USER_SETTINGS]
  ADD CONSTRAINT [FK_USER_PREFERENCES_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[USERS]
  ADD CONSTRAINT [FK_USERS_FEDERALORGANIZATIONS_AGENT]
  FOREIGN KEY ([AGENT_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[USERS]
  ADD CONSTRAINT [FK_USERS_CODE_APPLICATIONS]
  FOREIGN KEY ([APPLICATION_IDF]) REFERENCES [dbo].[CODE_APPLICATIONS] ([IDF])
GO

ALTER TABLE [dbo].[USERS]
  ADD CONSTRAINT [FK_USERS_FEDERALORGANIZATIONS_OFFICE]
  FOREIGN KEY ([OFFICE_IDF]) REFERENCES [dbo].[FEDERAL_ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[USERS]
  ADD CONSTRAINT [FK_USERS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[USERS]
  ADD CONSTRAINT [FK_USERS_ORGANIZATIONS_ORG_IDF]
  FOREIGN KEY ([ORGANIZATION_IDF]) REFERENCES [dbo].[ORGANIZATIONS] ([IDF])
GO

ALTER TABLE [dbo].[WHAT_IS_NEW]
  ADD CONSTRAINT [FK_WHATISNEW_USERS]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[WHAT_IS_NEW]
  ADD CONSTRAINT [FK_WHAT_IS_NEW_APPLICATION_RELEASES]
  FOREIGN KEY ([RELEASE_IDF]) REFERENCES [dbo].[APPLICATION_RELEASES] ([IDF])
GO

ALTER TABLE [dbo].[WISH_LIST_ITEMS]
  ADD CONSTRAINT [FK_WISH_LIST_ITEM_WISH_LIST]
  FOREIGN KEY ([WISH_LIST_IDF]) REFERENCES [dbo].[WISH_LISTS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[WISH_LISTS]
  ADD CONSTRAINT [FK_SHOP_WISH_LIST_CS_USER]
  FOREIGN KEY ([USER_IDF]) REFERENCES [dbo].[USERS] ([IDF])
  ON UPDATE CASCADE
  ON DELETE CASCADE
GO

ALTER TABLE [dbo].[WISH_LISTS]
  ADD CONSTRAINT [FK_WISH_LISTS_CONTACTS]
  FOREIGN KEY ([CONTACT_IDF]) REFERENCES [dbo].[CONTACTS] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODE_JOBS]
  ADD CONSTRAINT [FK_WORKFLOW_NODE_JOBS_WORKFLOW_NODES]
  FOREIGN KEY ([NODE_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODE_JOBS]
  ADD CONSTRAINT [FK_NEXT_IDF]
  FOREIGN KEY ([NEXT_IDF]) REFERENCES [dbo].[WORKFLOW_NODE_JOBS] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODE_JOBS]
  ADD CONSTRAINT [FK_PREVIOUS_IDF]
  FOREIGN KEY ([PREVIOUS_IDF]) REFERENCES [dbo].[WORKFLOW_NODE_JOBS] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODE_JOBS]
  ADD CONSTRAINT [FK_PARENT_IDF]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[WORKFLOW_NODE_JOBS] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODES]
  ADD CONSTRAINT [FK_WORKFLOW_NODES_OWN_WORKFLOWS]
  FOREIGN KEY ([WOKRFLOW_IDF]) REFERENCES [dbo].[OWN_WORKFLOWS] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODES]
  ADD CONSTRAINT [FK_PARENT_NODE]
  FOREIGN KEY ([PARENT_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

ALTER TABLE [dbo].[WORKFLOW_NODES]
  ADD CONSTRAINT [FK_NEXT_NODE]
  FOREIGN KEY ([NEXT_IDF]) REFERENCES [dbo].[WORKFLOW_NODES] ([IDF])
GO

/*================================================================================*/
/* CREATE VIEWS                                                                   */
/*================================================================================*/

IF OBJECT_ID(N'[dbo].[VW_NewUID]','V') is not null
  DROP VIEW [dbo].[VW_NewUID]
GO
CREATE VIEW [dbo].[VW_NewUID]
AS SELECT  right('0000' + cast(Ceiling(100000*RAND()) as varchar(6)), 5)+'_XXXX_' + replace(NEWID(),'-','') AS NewUID
GO

IF OBJECT_ID(N'[dbo].[VW_GSS_SOLUTION_PRODUCT]','V') is not null
  DROP VIEW [dbo].[VW_GSS_SOLUTION_PRODUCT]
GO
CREATE VIEW [dbo].[VW_GSS_SOLUTION_PRODUCT]
AS SELECT  replace(r.[REFERENCE_NAME],'GSS_SOLUTION_PRODUCT:','') as [ID]
      ,r.[CLIN_IDF]
      ,r.[CONTRACT_IDF]
      ,r.[CONTRACTOR_IDF]
      ,r.[CONTRACT_NO]
      ,r.[CONTRACTOR_CLIN_ID]
      ,r.[NAME_CODE] as [ITEM_NAME]
      ,r.[DESCRIPTION] as [ITEM_DESCRIPTION]
      ,r.[OEM_MFR_NAME]
      ,r.[OEM_PART_NUM]
      ,r.[CONTRACTOR_CLIN_SPECIFICATION] as [ITEM_SPECIFICATIONS]
      ,r.[CONTRACTOR_NAME]
      ,r.[CATEGORY_CODE]
      ,r.[CREATED_BY]
      ,r.[CREATED_DATE] as [CREATED_WHEN]
      ,r.[UPDATED_BY] as [MODIFIED_BY]
      ,r.[UPDATED_DATE] as [MODIFIED_WHEN]
      ,r.[STATUS_CODE] as [ACTIVE_FLAG]
      ,r.[STATUS_DATE]
      ,g.[BLUETOOTH_SPECS]
      ,g.[BLUETOOTH_CODE]
      ,g.[DISPLAY_SIZE]
      ,g.[DISPLAY_RESOLUTION]
      ,g.[DISPLAY_CODE]
      ,g.[DOCKING_STATION_SPECS]
      ,g.[DOCKING_STATION_CODE]
      ,g.[EXPANSION_SLOTS]
      ,g.[GRAPHIC_SPECS]
      ,g.[GRAPHIC_UPGRADE_SPECS]
      ,g.[HARD_DRIVE_SPECS]
      ,g.[HARD_DRIVE_CODE]
      ,g.[OPTICAL_DRIVE_SPECS]
      ,g.[PLATFORM_INTEGRITY_SPECS]
      ,g.[PLATFORM_INTEGRITY_CODE]
      ,g.[PORT_SPECS]
      ,g.[KEYBOARD_SPECS]
      ,g.[MICROPHONE_SPECS]
      ,g.[MOUSE_SPECS]
      ,g.[NETWORK_INTERFACE_SPECS]
      ,g.[RAM_SPECS]
      ,g.[RAM_UPGRADE]
      ,g.[RAM_CODE]
      ,g.[OS_SPECS]
      ,g.[OS_CODE]
      ,g.[SMART_CARD_READER_SPECS]
      ,g.[SOUND_SPECS]
      ,g.[SPEAKER_SPECS]
      ,g.[TRACKPAD_SPECS]
      ,g.[WEBCAM_SPECS]
      ,r.[DELIVERY_PERIOD] as [DELIVERY_TIME]
      ,r.[WEIGHT] as [WEIGHT_SPECS]
      ,g.[WEIGHT_CODE]
      ,r.[SIZE] as [SIZE_SPECS]
      ,g.[SIZE_CODE]
      ,r.[EPEAT_COMPLIANCE_IDR]
      ,r.[ENERGY_STAR_COMPLIANCE_IDR]
      ,r.[TAA_COMPLIANCE_IDR]
      ,r.[ACT_508_COMPLIANCE_IDR]
      ,r.[OMB_COMPLIANCE_IDR]
      ,r.[WARRANTY]
      ,r.[WARRANTY_CODE]
      ,r.[TIS_SPECIFICATION] as [OEM_SPECIFICATION_LINK]
      ,r.[IMAGE_URL] as [PICTURE_FILENAME]
      ,r.[CLIN_IDF] as [NITAAC_CLIN]
      ,r.[PARENT_IDF] as [NITAAC_PARENT_CLIN]
      ,r.[INITIAL_GOVERNMENT_QUANTITY] as [YEAR1_GOVERNMENT_QUANTITY]
      ,r.[CATALOG_PRICE] as [CATALOG_UNIT_PRICE]
      ,r.[PRICE]
      ,r.[DISCOUNT_PERCENTAGE]
      ,r.[DISCOUNT_RATE]
      ,r.[DISCOUNTED_PRICE] as [DISCOUNTED_UNIT_PRICE]
      ,r.[DISCOUNTED_EXTENDED_PRICE]
      ,r.[TYPE_CODE] as [CONFIGURATION_TYPE_CODE]
      ,r.[UOM]
      ,r.[CLIN_COMPONENT_CODE]
      ,r.[QUANTITY]
      ,r.[CLIN_COMPONENT_CODE] as [SOLUTION_TYPE]
      ,g.[VERSION]
 FROM REF_NITAAC_CONTRACTOR_CLINS r inner Join REF_NITAAC_CONTRACTOR_GSS_CLINS g on r.CLIN_IDF = g.CLIN_IDF and r.CONTRACTOR_CLIN_ID = g.CONTRACTOR_CLIN_ID
GO

IF OBJECT_ID(N'[dbo].[VW_STATUS]','V') is not null
  DROP VIEW [dbo].[VW_STATUS]
GO
CREATE VIEW [dbo].[VW_STATUS]
AS SELECT
       g.[GROUP_IDF],[VALUE_IDF]
      ,g.[CATEGORY_CODE],g.[TYPE_CODE]
      ,v.[VALUE_CODE]
      ,v.[VALUE_STRING]
      ,v.[VALUE_INTEGER]
      ,g.[NAME_CODE]
      ,g.[DESCRIPTION]
      ,g.[EFFECTIVE_START_DATE]
      ,g.[STATUS_CODE]
      ,g.[STATUS_DATE]
      ,g.[CREATED_DATE]
      ,g.[CREATED_BY]
      ,g.[ACCESS_LEVEL]
      ,g.[POSITION_ORDER]
      ,g.[VERSION]
FROM [dbo].[GROUP_VALUESETS] g inner Join CODE_VALUESETS v on g.VALUE_IDF = v.IDF
GO

IF OBJECT_ID(N'[dbo].[VW_USER_TOKENS]','V') is not null
  DROP VIEW [dbo].[VW_USER_TOKENS]
GO
CREATE VIEW [dbo].[VW_USER_TOKENS]
as SELECT u.USERNAME
      ,u.PASSWORD
      ,u.[CATEGORY_CODE]
      ,u.[EMAIL]
      ,u.[TOKEN] as [JWT_ACCESS_TOKEN]
      ,u.[CREATED_DATE]
      ,u.[EFFECTIVE_END_DATE] as [EXPIRED_DATE]
      ,r.[NAME_CODE] as [USER_ROLE]
      ,a.[NAME_CODE] as [APPLICATION]
FROM USERS u INNER JOIN USER_APPLICATION_ROLES r on u.IDF = r.USER_IDF
INNER JOIN CODE_APPLICATIONS a on r.APPLICATION_IDF = a.IDF
GO

if OBJECT_ID(N'[dbo].[VW_ORDERS]','V') is not Null
   drop view [dbo].[VW_ORDERS]
GO
CREATE VIEW [dbo].[VW_ORDERS]
AS select o.NAME_CODE
,fo.NAME_CODE as CUSTOMER
,fo.LEVEL_III_NAME as AGENCY
,fo.LEVEL_II_NAME as DEPARTMENT
,a.NAME_CODE as [APPLICATION]
,o.NAME_CODE as ORDER_NAME
,o.TITLE as ORDER_TITLE
,o.REVIEWER_NAME_CODE as REVIEWER_NAME_CODE
,o.VALUE_CODE as ORDER_ID
,o.CREATED_DATE
,o.SUBMITTER_NAME_CODE
,o.POC_NAME_CODE
,o.CO_NAME_CODE
,o.CO_ALT_NAME_CODE
,o.CS_NAME_CODE
,o.CS_ALT_NAME_CODE
,o.COTR_NAME_CODE
,o.COTR_ALT_NAME_CODE
,o.AMO_NAME_CODE
,o.AMO_ALT_NAME_CODE
,o.ISSO_NAME_CODE
,o.ISSO_ALT_NAME_CODE
FROM ORDERS o INNER JOIN CODE_APPLICATIONS a on o.APPLICATION_IDF = a.IDF
INNER JOIN FEDERAL_ORGANIZATIONS fo on o.CUSTOMER_IDF = fo.IDF
GO

/*================================================================================*/
/* CREATE ROUTINES                                                                */
/*================================================================================*/

if DATABASE_PRINCIPAL_ID('NEOSMG_UserRole') is null
BEGIN
        CREATE ROLE NEOSMG_UserRole AUTHORIZATION NEOSAdmin
        EXEC sp_addrolemember 'NEOSMG_UserRole', 'NEOSUser'
    --    EXEC sp_addrolemember 'NEOSMG_UserRole', 'NEOSAdmin'
END
GO

/*
ALTER DATABASE DB_NAME() SET RECOVERY SIMPLE;
ALTER DATABASE NEOSMG SET RECOVERY SIMPLE;
*/

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_MG_GetValueCode]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_MG_GetValueCode]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_MG_GetValueCode]
(
  @P_ID           as INT = NULL,
  @P_CODE         as varchar(16)   = 'C_PERSON'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_ID is null or @P_CODE is null return @v_RV
  if @P_Code = 'C_ORDER_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ORDER' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_ORDER_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ORDER' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_AMENDMENT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_AMENDMENT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_AMENDMENT_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_AMENDMENT' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_APPROVAL_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_APPROVAL' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_APPROVAL_ACTION'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_APPROVAL' and TYPE_CODE = 'C_ACTION'
  else if @P_Code = 'C_USER_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_USER' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_USER_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_USER' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_REASON_LIST_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_REASON' and TYPE_CODE = 'C_LIST_TYPE'
  else if @P_Code = 'C_CANCEL_REASON'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CANCEL' and TYPE_CODE = 'C_REASON'
  else if @P_Code = 'C_NOBID_REASON'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_NOBID' and TYPE_CODE = 'C_REASON'
  else if @P_Code = 'C_DELIVER_PROPOSAL'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_DELIVERY' and TYPE_CODE = 'C_BNP'
  else if @P_Code = 'C_CONTRACT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_FO_EXCEPTION_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_FO_EXCPTION' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_APPLICATION'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_NEOS' and TYPE_CODE = 'C_APPLICATION'
  else if @P_Code = 'C_TRP_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_TRP' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_SHIPPING_PERCENTAGE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_SHIPPING' and TYPE_CODE = 'C_PERCENTAGE'
  else if @P_Code = 'C_CONTRACT_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_CONTRACT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_ENTITY'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ENTITY' and TYPE_CODE = 'C_VALUE'

  if isNull(@V_RV,'') = ''  set @V_RV = 'C_'+CAST(@P_ID as varchar(8))
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_MG_GetValueCode]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_MG_GetValueCode](ID,'C_PERSON')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_MG_GetIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_MG_GetIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_MG_GetIDF]
(
  @P_ID           as INT = NULL,
  @P_CODE         as varchar(16)   = 'C_PERSON'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_ID is null or @P_CODE is null return @v_RV
  if @P_Code = 'C_PERSON'
        select @v_RV = IDF FROM SYM_PERSON_EXT WHERE id = @P_ID
  else if @P_Code = 'C_ORGANIZATION'
        select @v_RV = IDF FROM SYM_ORGANIZATION_EXT WHERE id = @P_ID
  else if @P_Code = 'C_USER'
        select @v_RV = IDF FROM APX_USER_EXT WHERE id = @P_ID
  else if @P_Code = 'C_ADDRESS'
        select @v_RV = IDF FROM ADDRESSES WHERE REFERENCE_ID = 'APX_US_ADDRESS:'+Cast(@P_ID as varchar(8))
  else if @P_Code = 'C_ROLE'
        select @v_RV = IDF FROM CODE_ROLES WHERE REFERENCE_ID = 'APX_GROUP:'+Cast(@P_ID as varchar(8))
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_MG_GetIDF]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_MG_GetIDF](ID,'C_PERSON')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_MG_SeekAlias]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_MG_SeekAlias]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_MG_SeekAlias]
(
  @P_Data              as varchar(1024) = NULL,
  @P_Alias             as varchar(32)   = '(',
  @P_Action            as varchar(16)   = 'GET'
)
RETURNS varchar(1024)
AS
BEGIN
  DECLARE @V_RV as varchar(1024) = @P_Data, @iPos as Int =0,  @P_AliasR as varchar(32)
  set @P_Action = UPPER(LTRIM(RTRIM(@P_Action)))
  set @P_Alias = UPPER(LTRIM(RTRIM(@P_Alias)))
  if @P_Action is null or @P_Alias is null or @P_Data is null RETURN @P_Data

     if @P_Action in ('GET')
     BEGIN
             Set @v_RV = ''
             if len(@P_Alias) < 2
             BEGIN
                     set @iPos = CharIndex(@P_Alias, @P_Data)
                     if @iPos > 0
                     BEGIN
                            if @P_Alias = '('
                               set @P_AliasR = ')'
                            else if @P_Alias = '['
                               set @P_AliasR = ']'
                            else if @P_Alias = '{'
                               set @P_AliasR = '}'
                            else if @P_Alias = '<'
                               set @P_AliasR = '>'
                            Set @v_RV = replace(Right(@P_Data, len(@P_Data) - @iPos),@P_Alias,'-')
                            if len(@v_RV) > 0
                            BEGIN
                                set @iPos = CharIndex(@P_AliasR, @v_RV)
                                if @iPos > 0 set @v_RV = Left(@v_Rv, @iPos-1)
                            END
                     END
                     if len(isNull(@v_RV,'')) > 14 set @v_RV = ''
             END
     END
     ELSE if @P_Action in ('DETELE','DEL','REMOVE')
     BEGIN
             if len(@P_Alias) < 2
             BEGIN
                     set @iPos = CharIndex(@P_Alias, @P_Data)
                     if @iPos > 0
                     BEGIN
                            if @P_Alias = '('
                               set @P_Alias = ')'
                            else if @P_Alias = '['
                               set @P_Alias = ']'
                            else if @P_Alias = '{'
                               set @P_Alias = '}'
                            else if @P_Alias = '<'
                               set @P_Alias = '>'

                            Set @v_RV = Right(@P_Data, len(@P_Data) - @iPos)
                            set @P_Data = left(@P_Data,@iPos-1)
                            if len(@v_RV) > 0
                            BEGIN
                                set @iPos = CharIndex(@P_Alias, @v_RV)
                                if @iPos > 0  set @v_RV = Right(@v_RV, len(@v_RV) - @iPos)
                            END
                            set @v_RV = @P_Data + @v_RV
                     END
             END
             ELSE
                  set @V_RV = LTRIM(RTRIM(replace(replace(@P_Data,@P_Alias,''),'  ',' ')))
         END
         RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_MG_SeekAlias]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_MG_SeekAlias]('dasdasd(uop)','(','get')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_MG_Clean]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_MG_Clean]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_MG_Clean]
(
  @P_Data              as varchar(32) = NULL,
  @P_Format            as varchar(16) = 'C_PHONE'
)
RETURNS varchar(32)
AS
BEGIN
  DECLARE @V_RV as varchar(32) = LTRIM(RTRIM(@P_Data)), @iPos as INT
  set @P_Format = UPPER(LTRIM(RTRIM(isNull(@P_Format,'C_PHONE'))))

  if isNull(@P_Data,'') = '' return @V_RV
  if UPPER(@P_Format) in ('C_PHONE','C_FAX')
  BEGIN
       SET @V_RV = replace(replace(replace(replace(replace(replace(replace(replace(UPPER(@V_RV),'+',''),'.',''),' ',''),' EXT','X'),'EX','X'),'(',''),')',''),'option','o')
       if left(@v_RV,1) = '1' set @v_RV = SUBSTRING(@v_RV,2,Len(@v_RV)-1)
       if Len(@v_RV) < 10 set @v_RV = Left(@v_RV+'YYYYYYYYY',10)
       SET @v_RV = '('+ left(@v_RV,3) + ')' + ' ' + SUBSTRING(@v_RV,4,3) + '-' + SUBSTRING(@v_RV,7,16)
  END
  ELSE if UPPER(@P_Format) = 'C_PHONE_EXT'
  BEGIN
        set @iPos=charIndex('X',@v_RV)
        if @iPos > 1
           set @v_RV = SUBSTRING(@v_RV, @iPos, 16)
        ELSE
        BEGIN
                set @iPos=charIndex('D',@v_RV)
                if @iPos > 1
                   set @v_RV = SUBSTRING(@v_RV, @iPos, 16)
                ELSE
                BEGIN
                        set @iPos=charIndex('D',@v_RV)
                        if @iPos > 1
                           set @v_RV = SUBSTRING(@v_RV, @iPos, 16)
                        else
                           set @v_RV = ''
                END
       END
  END
  ELSE if UPPER(@P_Format) = 'C_EMAIL'
  BEGIN
        set @V_RV = LTRIM(RTRIM(@P_Data))
  END
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_MG_Clean]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_MG_Clean]('dasdasd(uop)',Default)

IF OBJECT_ID('[dbo].[fn_NewIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_NewIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_NewIDF]
(
  @P_Alias      as varchar(5) = '_____',
  @P_Date       as DateTime = NULL
)
RETURNS varchar(64)
AS
BEGIN
        DECLARE @V_RV as varchar(64) = NULL, @NewID as varchar(64)
        Select @NewID= NewUID FROM dbo.vw_NewUID
        if @P_Date is null  or isDate(@P_Date) < 1
        BEGIN
           set @V_RV = replace(replace(replace(replace(replace(SYSDATETIMEOFFSET(),' -','_'),'-',''),':',''),' ',''),'.','') + RIGHT(@NewID,33)
        END
        else
        BEGIN
           set @V_RV = replace(replace(replace(replace(CONVERT(Varchar(22),@P_Date,121),'-',''),':',''),' ',''),'.','')+@NewID
        END

        -- 32 Characters
        set @V_RV = Left(@P_Alias+'_____',5) +  @V_RV
        RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_NewIDF]
    TO NEOSMG_UserRole
GO
-----select dbo.fn_NewIDF('ABC','2012/2/2')
-----select dbo.fn_NewIDF('ABC',Default)


IF OBJECT_ID('[dbo].[fn_NewIDFExt]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_NewIDFExt]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_NewIDFExt]
(
  @P_Alias      as varchar(5) = '_____',
  @P_Date       as DateTime = NULL,
  @P_ID         as varchar(24) =NULL
)
RETURNS varchar(64)
AS
BEGIN
        DECLARE @v_RV as varchar(64) = dbo.fn_NewIDF(@p_Alias,@P_Date), @tz as varchar(1), @vID as varchar(6)
        SET @vID = substring(@v_RV,27,6)  --32
        SET @P_ID = LTRIM(RTRIM(isNull(@P_ID,'')))

        SET @tz= CASE  @vID
                 WHEN '_0930_' THEN 'V'
                 WHEN '_0900_' THEN 'V'
                 WHEN '_0800_' THEN 'U'
                 WHEN '_0700_' THEN 'T'
                 WHEN '_0600_' THEN 'S'
                 WHEN '_0500_' THEN 'R'
                 WHEN '_0400_' THEN 'Q'
                 WHEN '_0330_' THEN 'P'
                 WHEN '_0300_' THEN 'P'
                 WHEN '_0200_' THEN 'O'
                 WHEN '_0100_' THEN 'N'
                 WHEN '_0000_' THEN 'Z'
                 ELSE               ':' END
                set @p_ID = RTRIM(Ltrim(@p_ID))
        IF Len(@P_ID) > 5
               SET @P_ID = @tz + RIGHT(@P_ID,12)
        ELSE IF Len(@P_ID) > 0
               SET @P_ID = @tz + RIGHT('::::'+@P_ID,5)
        ELSE
               SET @P_ID = @tz + Right(@vID,5)

        set @v_RV = Left(@v_RV,32-Len(@P_ID))+ @P_ID + RIGHT(@v_RV,32)
        RETURN @v_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_NewIDFExt]
    TO NEOSMG_UserRole
GO
-----select [dbo].[fn_NewIDFExt]('ABC','2012/2/2','212')
-----select [dbo].[fn_NewIDFExt]('ABC',Default,'sss')

IF OBJECT_ID('[dbo].[fn_IDFLike]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IDFLike]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_IDFLike]  (
       @ID as varchar(64) = NULL
) RETURNS varchar(66)
AS
BEGIN
        declare @iPos as int=0, @Str as varchar(128) = isNull(@ID, 'TST_New')
        set @iPos= CHARINDEX('_',@Str)
        if @iPos = 0
                set @str = right(replicate('_', 26)+@str,26) +'[_]' +  REPLICATE('_',37)
        else
                set @str = right(replicate('_', 26)+left(@str,@iPos-1),26) +'[_]' +  left(right(@Str,len(@str)-@iPos)+REPLICATE('_',37), 37)
        return @str
End
GO
GRANT EXECUTE ON [dbo].[fn_IDFLike]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_IDFLike]('323_12')

IF OBJECT_ID('[dbo].[fn_IDFLikeExt]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IDFLikeExt]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[fn_IDFLikeExt]  (
       @ID   as varchar(64) = NULL,
       @Sept as varchar(2) = '_',
       @InitLen  as int = 26,
       @Len   as int = 64
) RETURNS varchar(128)
AS
BEGIN
        set @Sept = isNull(@Sept,'_')
        set @Len = isnull(@len, 64)
        set @InitLen = isnull(@InitLen, 26)
        if @Len < @InitLen set @InitLen = @Len - len(@Sept)
        declare @iPos as int=0, @Str as varchar(128) = isNull(@ID, 'TST_New'), @RLen as Int = @Len - @InitLen-Len(@Sept)
        if len(@Sept) > 0
        BEGIN
                set @iPos= CHARINDEX(@Sept,@Str)
                if @iPos = 0
                        set @str = right(replicate(@Sept, @InitLen)+@str,@InitLen) +'['+@Sept+']' +         REPLICATE(@Sept,@Rlen)
                else
                        set @str = right(replicate(@Sept, @InitLen)+left(@str,@iPos-1),@InitLen) +'['+@Sept+']'  +  left(right(@Str,len(@str)-@iPos)+REPLICATE(@Sept,@Rlen), @Rlen)
        END
        ELSE
        BEGIN
                set @Str = right(replicate(@Sept, @InitLen)+@str,@InitLen) + REPLICATE('_',@Rlen)
        END

        return @str
END
GO
GRANT EXECUTE ON [dbo].[fn_IDFLikeExt]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_IDFLikeExt]('323_12',default, default,default)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:
-- Create date:
-- Description:        Returns
-- =============================================
IF OBJECT_ID (N'[dbo].[fn_BusinessHours]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[fn_BusinessHours]
GO
CREATE FUNCTION [dbo].[fn_BusinessHours] (
        @DateFrom as datetime,
        @DateTo as datetime=Null
)
RETURNS int
AS
BEGIN
        DECLARE  @BusinessHours int = 0, @CDate as DateTime, @Offset as int = 0
        if @DateTo is null set @DateTo        = GetDate()
        if @DateTo < @DateFrom
        BEGIN
                set @CDate = @DateFrom
                set @DateFrom = @DateTo
                set @DateTo = @CDate
        END
        if DATEPART(weekday, @DateFrom) % 6 = 1
        BEGIN
                if DATEPART(weekday, @DateFrom) = 1
                        set @DateFrom = left(convert(varchar(24),DateAdd(Day,1, @DateFrom),101),  10) + ' 00:01'
                else
                        set @DateFrom = left(convert(varchar(24),DateAdd(Day,2, @DateFrom),  10),  10) + ' 00:01'
        END
        if DATEPART(weekday, @DateTo) % 6 = 1
        BEGIN
                if DATEPART(weekday, @DateTo) = 1
                        set @DateTo = left(convert(varchar(24),DateAdd(Day,-2, @DateTo),  10),  10) + ' 23:01'
                else
                        set @DateTo = left(convert(varchar(24),DateAdd(Day,-1, @DateTo),  10),  10) + ' 23:01'
                set @Offset = @Offset + 1
        END
        if @DateFrom > @DateTo set @DateTo = DateAdd(Hour,-1, @DateFrom)
        --take care of weekends and Holidays
        Set @BusinessHours = DATEDIFF(HOUR, @DateFrom, @DateTo)
        set  @BusinessHours = @BusinessHours - 24*(@BusinessHours/(24*8)) + @Offset
        SELECT @BusinessHours = @BusinessHours - 24*count(Holiday_Date) from [dbo].[HOLIDAYS] where Holiday_Date >= @DateFrom and HOLIDAY_DATE <= @DateTo
        RETURN @BusinessHours
END
GO
GRANT EXECUTE ON [dbo].[fn_BusinessHours]
    TO NEOSMG_UserRole
GO



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:
-- Create date:
-- Description:        Returns
-- =============================================
IF OBJECT_ID (N'[dbo].[fn_BusinessDays]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[fn_BusinessDays]
GO
CREATE FUNCTION [dbo].[fn_BusinessDays] (
       @DateFrom as datetime = null
)
RETURNS int
AS
BEGIN
        DECLARE @CDate as DateTime = GetDate(), @BusinessDays int = 0

        --take care of weekends and Holidays
        SELECT @BusinessDays = DATEDIFF (day, @DateFrom, @CDate) - (2 * DATEDIFF(week, @DateFrom, @CDate)) - CASE WHEN DATEPART(weekday, @DateFrom) % 6 = 1 THEN 1 ELSE 0 END - CASE WHEN DATEPART(weekday, @CDate) % 6 = 1 THEN 1 ELSE 0 END
        SELECT @BusinessDays = @BusinessDays - count(Holiday_Date) from [dbo].[HOLIDAYS] where Holiday_Date >= convert(varchar,@DateFrom,101) and holiday_date <= convert(varchar,@CDate,101)
        RETURN @BusinessDays
END
GO
GRANT EXECUTE ON [dbo].[fn_BusinessDays]
    TO NEOSMG_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:
-- Create date:
-- Description:        Returns
-- =============================================
IF OBJECT_ID (N'[dbo].[fn_DisplayDate]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[fn_DisplayDate]
GO
CREATE FUNCTION [dbo].[fn_DisplayDate] (
       @Date   as DATETIME = NULL,
       @Fmt    as varchar(24) = 'mm/dd/yyyy',
       @Offset as int = -1
)
RETURNS varchar(24)
AS
BEGIN
        Declare @DateShow as varchar(24) = ''

        if isdate(@Date) = 0 goto errorHandle
        set @Fmt = LTRIM(RTRIM(@Fmt))
        Select @DateShow = Case lower(@Fmt)
                        when 'mm/dd/yyyy'                        then  convert(varchar(24), dateadd(DAY,@Offset,@date),101)
                        when 'yy.mm.dd'                          then  convert(varchar(24), dateadd(DAY,@Offset,@date),102)
                        when 'dd/mm/yyyy'                        then  convert(varchar(24), dateadd(DAY,@Offset,@date),103)
                        when 'dd.mm.yyyy'                        then  convert(varchar(24), dateadd(DAY,@Offset,@date),104)
                        when 'dd-mm-yy'                          then  convert(varchar(24), dateadd(DAY,@Offset,@date),105)
                        when 'dd mon yy'                         then  convert(varchar(24), dateadd(DAY,@Offset,@date),106)
                        when 'mon dd, yy'                        then  convert(varchar(24), dateadd(DAY,@Offset,@date),107)
                        when 'hh:mm:ss'                          then  convert(varchar(24), dateadd(NS,@Offset,@date),108)
                        when 'mon dd yyyy hh:mmap'               then  convert(varchar(24), dateadd(DAY,@Offset,@date),100)
                        when 'mon dd yyyy hh:mm ap'              then  convert(varchar(24), dateadd(DAY,@Offset,@date),100)
                        when 'hh:mm ap'                          then  right(convert(varchar(24), dateadd(DAY,@Offset,@date),100),7)
                        when 'hh:mmap'                           then  right(convert(varchar(24), dateadd(DAY,@Offset,@date),100),7)
                        when 'mon dd yyyy hh:mm:ss'              then  convert(varchar(24), dateadd(DAY,@Offset,@date),109)
                        when 'mm-dd-yy'                          then  convert(varchar(24), dateadd(DAY,@Offset,@date),110)
                        when 'yy/mm/dd'                          then  convert(varchar(24), dateadd(DAY,@Offset,@date),111)
                        when 'yymmdd'                            then  convert(varchar(24), dateadd(DAY,@Offset,@date),112)
                        when 'yyyy-mm-dd hh:mm:ss'               then  convert(varchar(24), dateadd(DAY,@Offset,@date),120)
                        when 'yyyy-mm-dd'                        then  substring(convert(varchar(24), dateadd(DAY,@Offset,@date),120),1,10)
                        when 'dd mon yyyy hh:mm:ss'              then  convert(varchar(24), dateadd(DAY,@Offset,@date),130)
                        when 'dd/mm/yy hh:mm:ss'                 then  convert(varchar(24), dateadd(DAY,@Offset,@date),131)
                        when 'month'                             then  cast(Month(@Date)    as varchar(24))
                        when 'year'                              then  cast(Year(@Date)     as varchar(24))
                        else                                           cast(@Date           as varchar(24))
                        end
        RETURN @DateShow
errorHandle:
        return @DateShow
END
GO
GRANT EXECUTE ON [dbo].[fn_DisplayDate]
    TO NEOSMG_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_ErrorCode]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_ErrorCode]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_ErrorCode]
(
  @P_ID as int = NULL
)
RETURNS varchar(16)
AS
BEGIN
  DECLARE @V_RV as varchar(16) = NULL
  SELECT @V_RV = VALUE_CODE from CODE_ERRORS WHERE POSITION_ORDER = @P_ID
  RETURN @v_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_ErrorCode]
    TO NEOSMG_UserRole
GO

--  select  [dbo].[fn_ErrorCode](1)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_ErrorID]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_ErrorID]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_ErrorID]
(
  @P_CODE as varchar(16) = NULL
)
RETURNS INT
AS
BEGIN
  DECLARE @V_RV as INT = -1
  select @V_RV = POSITION_ORDER FROM CODE_ERRORS WHERE VALUE_CODE = @P_CODE
  RETURN @v_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_ErrorID]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_ErrorID](@P_CODE='C_')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_ErrorMessage]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_ErrorMessage]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_ErrorMessage]
(
  @P_IDF as varchar(64) = NULL
)
RETURNS varchar(256)
AS
BEGIN
  DECLARE @V_RV as varchar(256) = NULL

  if IsNumeric(@P_IDF) > 0
     SELECT @V_RV = DESCRIPTION FROM CODE_ERRORS WHERE POSITION_ORDER = cast(@P_IDF as INT)
  else if left(@P_IDF,2) = 'C_'
     SELECT @V_RV = DESCRIPTION FROM CODE_ERRORS WHERE VALUE_CODE = @P_IDF
  ELSE IF len(@P_IDF) = 64
     SELECT @V_RV = DESCRIPTION FROM CODE_ERRORS WHERE IDF = @P_IDF
  ELSE
     SELECT @V_RV = DESCRIPTION FROM CODE_ERRORS WHERE NAME_CODE Like +'%'+@P_IDF+'%'
  RETURN @V_RV

END;
GO
GRANT EXECUTE ON [dbo].[fn_ErrorMessage]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_ErrorMessage](@P_IDF)

IF OBJECT_ID('[dbo].[fn_IDFromIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IDFromIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description: it gets an ID embedded in IDF                 */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IDFromIDF]
(
  @P_IDF   as varchar(64) = NULL
)
RETURNS varchar(64)
AS
BEGIN
        DECLARE @V_RV as varchar(64) = LTRIM(RTRIM(@P_IDF)), @iPos as int = 0
        if len(isNull(@V_RV,'')) < 18 Return NULL
                if CHARINDEX('0500_',@V_RV) > 0 return null
        set @iPos = CharIndex(':', @v_RV)
        if @iPos > 0
        BEGIN
              SET @v_RV = replace(SUBSTRING(Left(@v_RV,32),@iPos,12),':','')
        END
        ELSE
        BEGIN
              set @iPos = 1
              set @v_RV = substring(@v_RV,20,13)
              while (@iPos < 14)
              BEGIN
                 if isnumeric(left(@v_RV,1)) > 0
                    Set @v_RV =  SUBSTRING(@v_RV,2,12)
                                 else
                                    return SUBSTRING(@v_RV,2,12)
                 SET @iPos =  @iPos+1
              END
        END
        RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_IDFromIDF]
    TO NEOSMG_UserRole
GO
-----select [dbo].[fn_IDFromIDF](dbo.fn_NewIDFExt('ABC','2012/2/2','23'))
-----select [dbo].[fn_IDFromIDF](dbo.fn_NewIDF('ABC',Default))

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetIDF]
(
  @P_ID           as INT = NULL,
  @P_CODE         as varchar(16)   = 'C_PERSON'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_ID is null or @P_CODE is null return @v_RV
  if @P_Code = 'C_PERSON'
        select @v_RV = IDF FROM SYM_PERSON_EXT WHERE id = @P_ID
  else if @P_Code = 'C_ORGANIZATION'
        select @v_RV = IDF FROM SYM_ORGANIZATION_EXT WHERE id = @P_ID
  else if @P_Code = 'C_USER'
        select @v_RV = IDF FROM APX_USER_EXT WHERE id = @P_ID
  if @P_Code = 'C_APPLICATION'
        select @v_RV = IDF FROM CODE_APPLICATIONS WHERE REFERENCE_ID = 'SYM_GWAC:'+Cast(@P_ID as varchar(8))
  else if @P_Code = 'C_ADDRESS'
        select @v_RV = IDF FROM ADDRESSES WHERE REFERENCE_ID = 'APX_US_ADDRESS:'+Cast(@P_ID as varchar(8))
  else if @P_Code = 'C_ROLE'
        select @v_RV = IDF FROM CODE_ROLES WHERE REFERENCE_ID = 'APX_GROUP:'+Cast(@P_ID as varchar(8))
  else if @P_Code = 'C_GROUP'
        select @v_RV = IDF FROM CODE_GROUPS WHERE REFERENCE_ID = 'APX_GROUP:'+Cast(@P_ID as varchar(8))
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetIDF]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_GetIDF](ID,'C_PERSON')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetIDFByName]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetIDFByName]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetIDFByName]
(
  @P_Name as varchar(128) = NULL,
  @P_Code as varchar(64)  = 'C_USERNAME'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  if @P_Name is null or @P_CODE is null return  @v_RV

  if @P_Code in ('C_USERNAME','C_USER')
        Select @V_RV = IDF FROM APX_USER_EXT WHERE UPPER(USERNAME) = UPPER(@P_Name)
  else if @P_Code in ('C_PERSONNAME', 'C_PERSON')
        select @v_RV = IDF FROM SYM_PERSON_EXT WHERE RTRIM(Last_Name + ', ' + First_Name + ' ' + isNull(Middle_Name,'')) = @P_Name
  else if @P_Code in ('C_ORGANIZATIONNAME','C_ORGANIZATION')
        select @v_RV = IDF FROM SYM_ORGANIZATION_EXT WHERE LEVEL_I_NAME = @P_Name
  else if @P_Code = 'C_ADDRESS'
        select @v_RV = IDF FROM ADDRESSES WHERE REFERENCE_ID = @P_Name
  else if @P_Code = 'C_ROLENAME'
        select @v_RV = IDF FROM CODE_ROLES WHERE NAME_CODE = @P_Name
  else if @P_Code = 'C_ROLE'
        select @v_RV = IDF FROM CODE_ROLES WHERE REFERENCE_ID = @P_Name

   Return @v_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetIDFByName]
    TO NEOSMG_UserRole
GO
--   [dbo].[fn_GetIDFByName](@P_ID=1,@P_IDF)

IF OBJECT_ID('[dbo].[fn_GetPersonName]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetPersonName]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetPersonName]
(
        @IDF  as varchar(64) = NULL,
        @Code as varchar(16) = 'C_NAME'     -- C_LAST, C_FIRST, C_LEFT, C_RIGHT
)
RETURNS Varchar(256)
AS
BEGIN
        Declare @RN as varchar(256) = NULL

        if IsNULL(@IDF,'') = '' return @RN
        if @Code = 'C_NAME'
            select @RN = PREFERRED_NAME FROM PERSONS WHERE IDF = @IDF
        else if @Code = 'C_FIRST_NAME'
            select @RN = FIRST_NAME FROM PERSONS WHERE IDF = @IDF
        else if @Code = 'C_LAST_NAME'
            select @RN = LAST_NAME FROM PERSONS WHERE IDF = @IDF
        else if @Code = 'C_MIDDLE_NAME'
            select @RN = MIDDLE_NAME FROM PERSONS WHERE IDF = @IDF
        else
            select @RN = RTRIM(LAST_NAME + ', ' + FIRST_NAME + ' ' + MIDDLE_NAME) FROM PERSONS WHERE IDF = @IDF
        RETURN @RN
END

GO
GRANT EXECUTE ON [dbo].[fn_GetPersonName]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_GetPersonName](@IDF=, @Code)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetMapIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetMapIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetMapIDF]
(
  @P_IDF          as varchar(64)   = NULL,
  @P_CODE         as varchar(16)   = 'C_PERSON'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_IDF is null or @P_CODE is null return @v_RV

    if @P_Code = 'C_PERSON' and Len(@P_IDF) = 64
  BEGIN
        if left(@P_IDF,3) = 'USR'
           select @v_RV = OWNER_IDF FROM USERS WHERE IDF = @P_IDF and Left(OWNER_IDF,4) = 'PER_'
        else if left(@P_IDF,4) = 'PER_'
           set @v_RV =  @P_IDF
        else if left(@P_IDF,3) = 'CTA'
            select @v_RV = IDF FROM PERSONS WHERE CONTACT_IDF = @P_IDF
  END
  else if @P_Code in ('C_ORGANIZATION', 'C_CONTRACTOR', 'C_CUSTOMER')
  BEGIN
        if Len(@P_IDF) < 17
            select @v_RV = IDF FROM ORGANIZATIONS WHERE VALUE_CODE = @P_IDF
        else if left(@P_IDF,3) in ('ORG', 'CON','CUS')
            set @v_RV =  @P_IDF
        else if left(@P_IDF,3) = 'USR'
            select @v_RV = ORGANIZATION_IDF FROM USERS WHERE IDF = @P_IDF
        else if left(@P_IDF,4) = 'PER_'
            select @v_RV = ORGANIZATION_IDF FROM USERS WHERE OWNER_IDF = @P_IDF
        else if left(@P_IDF,3) = 'CTA'
            select @v_RV = IDF FROM ORGANIZATIONS WHERE CONTACT_IDF = @P_IDF
  END
  else if @P_Code = 'C_USER' and Len(@P_IDF) = 64
  BEGIN
          if left(@P_IDF,3) = 'PER'
               select top 1 @v_RV = IDF FROM USERS WHERE OWNER_IDF = @P_IDF
          else  if  left(@P_IDF,3) = 'USR'
                set @v_RV =  @P_IDF
          else if left(@P_IDF,3) = 'CTA'
                select @v_RV = IDF FROM USERS WHERE CONTACT_IDF = @P_IDF
  END
  if @P_Code = 'C_APPLICATION'
  BEGIN
     if Len(@P_IDF) < 17
          select @v_RV = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = @P_IDF
     else
          set @v_RV =  @P_IDF
  END
  else if @P_Code = 'C_ADDRESS' and Len(@p_IDF) = 64
  BEGIN
       if Left(@p_IDF, 3) in ('CTA')
           Select top 1 @v_RV = ADDRESS_IDF FROM CONTACT_ADDRESSES WHERE CONTACT_IDF = @P_IDF
       else if Left(@p_IDF, 4) in ('SADR','ADR_')
           set @v_RV = @P_IDF
  END
  else if @P_Code = 'C_TELE_ADDRESS' and Len(@p_IDF) = 64
  BEGIN
       if Left(@p_IDF, 3) in ('CTA')
           Select top 1 @v_RV = TELECOM_ADDRESS_IDF FROM CONTACT_TELECOM_ADDRESSES WHERE CONTACT_IDF = @P_IDF
       else if Left(@p_IDF, 4) in ('TADR')
           set @v_RV = @P_IDF
  END
  else if @P_Code = 'C_ORDER' and Len(@p_IDF) = 64
  BEGIN
       if Left(@p_IDF, 3) in ('BNP')
            select @v_RV = ORDER_IDF FROM PROPOSALS WHERE IDF = @p_IDF
       else if Left(@p_IDF, 3) in ('ORD')
            select @v_RV = @p_IDF
       else if left(@P_IDF,3) = 'CTA'
            select @v_RV = IDF FROM ORDERS WHERE CONTACT_IDF = @P_IDF
  END
  else if @P_Code = 'C_PROPOSAL' and Len(@p_IDF) = 64
  BEGIN
       if Left(@p_IDF, 3) in ('AWD','MOD')
            select top 1 @v_RV = PROPOSAL_IDF FROM AWARDED_PROPOSALS WHERE AWARD_IDF = @p_IDF
       else if Left(@p_IDF, 3) in ('BNP')
            select @v_RV = @p_IDF
  END
  else if @P_Code in ('C_AWARD','C_MOD') and Len(@p_IDF) = 64
  BEGIN
       if Left(@p_IDF, 3) in ('BNP')
            select top 1 @v_RV = AWARD_IDF FROM AWARDED_PROPOSALS WHERE PROPOSAL_IDF = @p_IDF
       else if Left(@p_IDF, 3) in ('AWD','MOD')
            select @v_RV = @p_IDF
  END
  else if @P_Code = 'C_CONTRACT'
  BEGIN
          if Len(@p_IDF) = 64 ---AND Left(@p_IDF, 5) = 'ORGCH'
             select Top 1 @v_RV = IDF FROM CONTRACTS WHERE CONTRACTOR_IDF = @p_IDF and STATUS_CODE = 'ACTIVE' order By CREATED_DATE DESC
          else if Len(@p_IDF) < 17
               select Top 1 @v_RV = IDF FROM CONTRACTS WHERE VALUE_CODE = @p_IDF OR CONTRACT_NO = @p_IDF
          else if  Left(@p_IDF, 4) = 'CTRT'
               set @v_RV = @p_IDF
  END
  else if @P_Code = 'C_CONTACT' and Len(@p_IDF) = 64
  BEGIN
          if Left(@p_IDF, 3) in ('ADR','ADD')
             select Top 1 @v_RV = CONTACT_IDF FROM CONTACT_ADDRESSES WHERE ADDRESS_IDF = @p_IDF
          else if Left(@p_IDF,4) = 'TADR'
              select Top 1 @v_RV = CONTACT_IDF FROM CONTACT_TELECOM_ADDRESSES WHERE TELECOM_ADDRESS_IDF = @p_IDF
          else if left(@p_IDF, 3) in ('ORG','CON', 'CUS')
              select @v_RV = CONTACT_IDF FROM ORGANIZATIONS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('PER')
              select @v_RV = CONTACT_IDF FROM PERSONS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('USR')
              select @v_RV = CONTACT_IDF FROM USERS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('ORD','AMD')
              select @v_RV = CONTACT_IDF FROM ORDERS WHERE IDF = @p_IDF
          else if left(@p_IDF, 4) in ('CTRT')
              select @v_RV = CONTACT_IDF FROM CONTRACTS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('BNP')
              select @v_RV = CONTACT_IDF FROM PROPOSALS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('AWD', 'MOD')
              select @v_RV = CONTACT_IDF FROM AWARDS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('FIN')
              select @v_RV = CONTACT_IDF FROM AWARDS WHERE IDF = @p_IDF
          else if left(@p_IDF, 3) in ('CTA')
             set @v_RV = @p_IDF
  END
  else if @P_Code = 'C_NOTIFICATION'
  BEGIN
          if Len(@p_IDF) < 17
             select @v_RV = IDF FROM CODE_NOTIFICATIONS WHERE VALUE_CODE = @p_IDF
          else
             set @v_RV = @p_IDF
  END
  else if @P_Code = 'C_MESSAGE'
  BEGIN
          if Len(@p_IDF) < 17
             select @v_RV = IDF FROM CODE_MESSAGES WHERE VALUE_CODE = @p_IDF
          else
             set @v_RV = @p_IDF
  END
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetMapIDF]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_GetMapIDF](ID,'C_PERSON')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetMapSetCode]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetMapSetCode]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetMapSetCode]
(
  @P_ID           as INT = NULL,
  @P_CODE         as varchar(32)   = 'C_PERSON'
)
RETURNS varchar(64)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_ID is null or @P_CODE is null return @v_RV
  if @P_Code = 'C_ORDER_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ORDER' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_ORDER_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ORDER' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_AMENDMENT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_AMENDMENT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_AMENDMENT_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_AMENDMENT' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_APPROVAL_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_APPROVAL' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_APPROVAL_ACTION'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_APPROVAL' and TYPE_CODE = 'C_ACTION'
  else if @P_Code = 'C_USER_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_USER' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_REASON_LIST_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_REASON' and TYPE_CODE = 'C_LIST_TYPE'
  else if @P_Code = 'C_CANCEL_REASON'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CANCEL' and TYPE_CODE = 'C_REASON'
  else if @P_Code = 'C_NOBID_REASON'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_NOBID' and TYPE_CODE = 'C_REASON'
  else if @P_Code = 'C_DELIVER_PROPOSAL'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_DELIVERY' and TYPE_CODE = 'C_BNP'
  else if @P_Code = 'C_CONTRACT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_FO_EXCEPTION_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_FO_EXCEPTION' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_APPLICATION'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_NEOS' and TYPE_CODE = 'C_APPLICATION'
  else if @P_Code = 'C_TRP_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_TRP' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_SHIPPING_PERCENTAGE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_SHIPPING' and TYPE_CODE = 'C_PERCENTAGE'
  else if @P_Code = 'C_CONTRACT_STATUS'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_STATUS'
  else if @P_Code = 'C_CONTRACT_TYPE'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_CONTRACT' and TYPE_CODE = 'C_TYPE'
  else if @P_Code = 'C_ENTITY'
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE = 'C_ENTITY' and TYPE_CODE = 'C_VALUE'
  else
        select @v_RV = VALUE_CODE FROM CODE_VALUESETS WHERE [VALUE_NUMBER] = @P_ID and CATEGORY_CODE + SUBSTRING(TYPE_CODE,2,16) = @P_CODE
  if isNull(@V_RV,'') = ''  set @V_RV = 'C_'+CAST(@P_ID as varchar(8))
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetMapSetCode]
    TO NEOSMG_UserRole
GO
--- select [dbo].[fn_GetMapSetCode](ID,'C_PERSON')

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetTax]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetTax]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetTax]
(
  @P_IDF as varchar(64) = NULL,
  @p_Amount as Money = NULL
)
RETURNS Money
AS
BEGIN
  DECLARE @V_RV as Money = NULL
  if @P_IDF is NULL return @v_RV
  Select @v_RV = r.Rate from REF_NITAAC_FEE_RATES r  INNER JOIN ADDRESSES a on 'C_'+ a.STATE_CODE + '_TAX' = r.VALUE_CODE
  WHERE a.IDF = @P_IDF and r.CATEGORY_CODE = 'C_TAX_RATE' and r.TYPE_CODE = 'C_SALES'
  if @p_Amount is not null and isNumeric(@P_Amount) > 0 set @v_RV = @V_RV*@p_Amount
  return @v_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetTax]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_GetTax](@P_ID=1,@P_IDF)

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_GetValiueCode]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_GetValiueCode]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_GetValiueCode]
(
  @P_IDF          as varchar(64)   =  NULL,
  @P_CODE         as varchar(16)   = 'C_PERSON'
)
RETURNS varchar(16)
AS
BEGIN
  DECLARE @V_RV as varchar(64) = NULL
  --set @P_CODE = UPPER(LTRIM(@P_CODE))
  if @P_IDF is null or @P_CODE is null return @v_RV
  if @P_Code = 'C_PERSON'
        select @v_RV = PREFERRED_NAME FROM PERSONS WHERE IDF = @P_IDF
  else if @P_Code = 'C_ORGANIZATION'
        select @v_RV = IDF FROM ORGANIZATIONS WHERE IDF = @P_IDF
  else if @P_Code = 'C_USER'
        select @v_RV = USERNAME FROM USERS WHERE IDF = @P_IDF
  else if @P_Code = 'C_ROLE'
        select @v_RV = VALUE_CODE FROM CODE_ROLES WHERE IDF = @P_IDF
  else if @P_Code = 'C_ORDER'
        select @v_RV = VALUE_CODE FROM ORDERS WHERE IDF = @P_IDF
  else if @P_Code = 'C_AWARD'
        select @v_RV = VALUE_CODE FROM AWARDS WHERE IDF = @P_IDF
  else if @P_Code = 'C_PROPOSAL'
        select @v_RV = VALUE_CODE FROM PROPOSALS WHERE IDF = @P_IDF
  RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_GetValiueCode]
    TO NEOSMG_UserRole
GO

IF OBJECT_ID('[dbo].[fn_IsAuditReady]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IsAuditReady]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IsAuditReady]
(
  @P_Table as varchar(128) = NULL,
  @P_Check as BIT = True
)
RETURNS INT
AS
BEGIN
  DECLARE @V_RV as INT = 0, @AUDIT_DBName varchar(64) = DB_NAME() + '_AUDIT';

     if DB_ID(@AUDIT_DBName) Is NOT null
     BEGIN
          if CharIndex(']',@P_Table) > 0 set @P_Table = replace(replace(@P_Table,']',''),'[','')
          SELECT  @V_RV = Audit_IDR from Code_Registrations where TYPE_CODE = 'C_USER_TABLE' AND  Name_Code = @P_Table
     END
     RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_IsAuditReady]
    TO NEOSMG_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:
-- Create date:
-- Description:        Returns
-- =============================================
IF OBJECT_ID (N'[dbo].[fn_IsBizDay]', N'FN') IS NOT NULL
    DROP FUNCTION [dbo].[fn_IsBizDay]
GO
CREATE FUNCTION [dbo].[fn_IsBizDay] (
        @Date as datetime=Null
)
RETURNS int
AS
BEGIN
        DECLARE  @BizDay int = 1
        if @Date is null set @Date        = GetDate()
        if DATEPART(weekday, @Date) % 6 = 1
                set @BizDay = 0
        else if (SELECT count(Holiday_Date) from [dbo].[HOLIDAYS] where DateDiff(Day, HOLIDAY_DATE, @Date) = 0) = 0
                set @BizDay = 1
        RETURN @BizDay
END
GO
GRANT EXECUTE ON [dbo].[fn_IsBizDay]
    TO NEOSMG_UserRole
GO

IF OBJECT_ID('[dbo].[fn_IsMasked]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IsMasked]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IsMasked]
(
  @P_Value as  INT = NULL,
  @P_Code  as  varchar(24) = NULL
)
RETURNS INT
AS
BEGIN
     DECLARE @V_RV as INT = @P_Value
     SET @P_CODE = UPPER(LTRIM(RTRIM(@P_CODE)))
     if Len(isNull(@P_Code,'')) = 0 or @V_RV < 1
             SET @V_RV = 0
     ELSE
     BEGIN
             if charIndex('C_',@P_Code) != 1 set @p_Code = 'C_'+ replace(@p_Code,'C_','')
             select @v_RV &= MASK_VALUE from dbo.REF_NITAAC_DEFINITIONS where VALUE_CODE = @P_Code
             if @@RowCount = 0 set @v_RV = 0
     END
     RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_IsMasked]
    TO NEOSMG_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_IsValidPhone]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IsValidPhone]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IsValidPhone]
(
  @P_TELECOM as varchar(24) =NULL
)
RETURNS INT
AS
BEGIN
  DECLARE @V_RV as INT = -1
  if LEN(IsNull(@P_TELECOM,'')) < 1
     set @v_RV = -81000
  ELSE
  BEGIN
     set @P_TELECOM = replace(replace(replace(replace(@P_TELECOM,' ',''),')',''),'(',''),'-','')
     if isNumeric(@P_TELECOM) < 1
        set @V_RV = -83000  --, 'C_BAD_FORMAT',1
     else if Len(@P_TELECOM) < 10
        SET @V_RV = -83001  ---, 'C_BAD_LENGTH',1
     else
        SET @V_RV = 1
  END
  RETURN @V_RV
END
GO
GRANT EXECUTE ON [dbo].[fn_IsValidPhone]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_IsValidPhone](@P_TELECOM)

 IF OBJECT_ID('[dbo].[fn_IsValidIDF]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IsValidIDF]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IsValidIDF]
(
  @P_Type as  varchar(16) = NULL,
  @P_IDF  as  varchar(64) = NULL
)
RETURNS INT
AS
BEGIN
     DECLARE @v_RV as INT = -1
     SET @P_Type = UPPER(LTRIM(RTRIM(@P_Type)))
     if @P_Type in ('C_ORGANIZATION','C_CONTRACTOR','C_CUSTOMER','C_FEDERAL')
        select @v_RV = Count(*) FROM ORGANIZATIONS WHERE @P_IDF = IDF
     else if @P_Type = 'C_PERSON'
        select @v_RV = Count(*) FROM PERSONS       WHERE @P_IDF = IDF
     else if @p_Type = 'C_USER'
        select @v_RV = Count(*) FROM USERS         WHERE @P_IDF = IDF
     else if @p_Type = 'C_GROUP'
        select @v_RV = Count(*) FROM CODE_GROUPS   WHERE @P_IDF = IDF
     RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_IsValidIDF]
    TO NEOSMG_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_IsValidEmail]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_IsValidEmail]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_IsValidEmail]
(
  @P_EMAIL as Varchar(128) = NULL,
  @P_Type  as varchar(16)  = 'C_ANY'
)
RETURNS INT
AS
BEGIN
     DECLARE @V_RV as INT = 0
     set @P_TYPE = RTRIM(LTRIM(@P_Type))
     if CharIndex('@',@P_Email) > 2 and  CharIndex('..',@P_Email) < 1 and CharIndex('@.',@P_Email) < 1 and left(right(@P_Email,5),1) like '[A-Z]'
     BEGIN
             if @P_TYPE in ('C_CUSTOMER','C_FEDERAL')
             BEGIN
                if right(@P_EMAIL,4) in ('.mil','.edu','.gov') set @v_RV = 1
             END
             ELSE IF @P_TYPE in ('C_CONTRACTOR','C_COMMERCIAL')
             BEGIN
                if right(@P_EMAIL,4) in ('.com','.net','.org','.pro','.info') set @v_RV = 1
             END
             ELSE IF @P_TYPE in ('C_ANY','C_ALL')
             BEGIN
                     set @v_RV =   [dbo].[fn_IsValidEmail]( @P_EMAIL, 'C_CUSTOMER')
                     if @v_RV < 1 set @v_RV =   [dbo].[fn_IsValidEmail]( @P_EMAIL, 'C_CONTRACTOR')
             END
             ELSE
                set @V_RV = -1
     END
     RETURN @V_RV
END;
GO
GRANT EXECUTE ON [dbo].[fn_IsValidEmail]
    TO NEOSMG_UserRole
GO
--   [dbo].[fn_IsValidEmail](@P_Email='',@P_Type='C_CUSTOMER')

IF OBJECT_ID('[dbo].[fn_Match]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_Match]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_Match]
(
        @Data  as varchar(1024) = NULL,
        @Sep as varchar(2) = ';',
        @Pattern as varchar(128) = '8G'
)
RETURNS Varchar(256)
AS
BEGIN
        Declare @RN as varchar(256) = NULL, @Pos as int = 0, @Item as varchar(16) = null

        if isnull(@Data,'') = '' return @RN
        if isnull(@Pattern,'') = '' return @Pattern
        if @Pattern = 'C_FIRST_NUMBER'
        BEGIN
                set @Data = replace(replace(replace(@Data,' ',@Sep),';',@Sep),',',@Sep)
                While  @Pos > -1
                BEGIN
                        set @Pos = CHARINDEX(@Sep, @Data)
                        if @Pos > 0
                        BEGIN
                            set @RN = left(@Data, @Pos-1)
                            set @Data = SubString(@Data,@Pos+1,1024)
                        END
                        ELSE
                        BEGIN
                            set @RN = @Data
                            set @Data = ''
                        END
                        if isNumeric(@RN) > 0
                           Return @RN
                        ELSE if isNull(@Data,'') = ''
                           Return NULL
                END
        END
        ELSE
        BEGIN
                set @DATA = '^'+replace(replace(replace(replace(@Data,' ','^'),',','^'),'.','^'),';','^')
                While  @Pos > -1
                BEGIN
                        if isnull(@Pattern,'') = '' return replace(@RN,'^','')
                        set @Pos = CHARINDEX(@Sep, @Pattern)
                        if @Pos > 0
                        BEGIN
                                set @Item = '^'+left(replace(@Pattern,' ','^'),@pos-1)
                                set @Pattern = SubString(@Pattern,@pos+1,128)
                        END
                        else
                        BEGIN
                                set @Item = '^'+@Pattern
                                set @Pattern = ''
                        END
                        if CHARINDEX(@Item, @Data) > 0
                        BEGIN
                                if @RN is not null
                                        set @RN = @RN + @Item + @Sep
                                else
                                        set @RN = @Item + @Sep
                        END
                END
        END
        RETURN replace(@RN,'^','')
END
GO
GRANT EXECUTE ON [dbo].[fn_Match]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_Match](@data)

IF OBJECT_ID('[dbo].[fn_Parse]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_Parse]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_Parse]
(
        @Data  as varchar(1024) = NULL,
        @Position as int = 1,
        @Sep as varchar(2) = ';',
        @Code as varchar(16) = 'C_LEFT'     -- C_LAST, C_FIRST, C_LEFT, C_RIGHT
)
RETURNS Varchar(1024)
AS
BEGIN
        Declare @RN as varchar(1024) = NULL, @Pos as int = 0, @Item as varchar(16) = null

        if isnull(@Data,'') > ''
        BEGIN
                set @Pos =   CHARINDEX(@Sep, @Data, @Position)
                if  @Pos > 0
                BEGIN
                        Set @RN = CASE @Code
                        WHEN 'C_LEFT'     THEN                SUBSTRING(@Data,1, @Pos-1)
                        WHEN 'C_LEFT_DEF' THEN                SUBSTRING(@Data,1, @Pos-1)
                        WHEN 'C_FIRST'    THEN                SUBSTRING(@Data,1, @Pos+DATALENGTH(@Sep))
                        WHEN 'C_RIGHT'    THEN                SUBSTRING(@Data, @Pos+DATALENGTH(@Sep), 1024)
                        WHEN 'C_LAST'     THEN                SUBSTRING(@Data, @Pos,   1024)
                        ELSE                                 @Data
                        END
                END
                ELSE
                BEGIN
                        If @Code in ('C_LEFT','C_FIRST')
                          Set @RN = ''
                        ELSE
                          Set @RN = @Data
                END
        END
        RETURN @RN
END
GO
GRANT EXECUTE ON [dbo].[fn_Parse]
    TO NEOSMG_UserRole
GO

--   [dbo].[fn_Parse](@Data)

IF OBJECT_ID('[dbo].[fn_WordToData]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[fn_WordToData]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[fn_WordToData]  (
@Str             varchar(Max) = NULL,
@Word            varchar(128) = NULL,
@Separator       varchar(2)   = ';',
@Action          varchar(8)   = 'ADD',
@NoTail          BIT = 0
) RETURNS VARCHAR(MAX)
AS
BEGIN
        Set @Str = LTRIM(RTRIM(@Str))
        Set @Word = LTRIM(RTRIM(@Word))
        if IsNull(@Word,'') = '' Return @Str
        if len(@Str) > 2 set @Str = @Separator +@Str+@Separator
        if CharIndex(@Separator+@Separator, @Str) > 0 set @Str = replace(@Str,@Separator+@Separator,@Separator)
        if UPPER(@Action) in ('ADD', 'INSERT')
        BEGIN
                if isNull(@Str,'') = ''
                BEGIN
                     set @Str = @Separator + @Word + @Separator
                END
                ELSE IF CharIndex(@Separator+@Word+@Separator,@Str) = 0
                BEGIN
                     set @Str = @Separator + @Word + @Str
                END
        END
        ELSE IF UPPER(@Action) in ('DEL', 'DELETE', 'REMOVE')
        BEGIN
                if CharIndex(@Separator+@Word+@Separator,@Str)  > 0 set @Str = replace(@Str,@Separator+@Word+@Separator,@Separator)
        END
        if @NoTail > 0
        BEGIN
                set @Str=SubString(@Str,2, len(@Str)-2)
        END
        Return @Str
END;
GO
GRANT EXECUTE ON [dbo].[fn_WordToData]
    TO NEOSMG_UserRole
GO

IF OBJECT_ID('[dbo].[tfn_GetPerson]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[tfn_GetPerson]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[tfn_GetPerson]
(
        @IDF  as varchar(64) = NULL
)
RETURNS TABLE
AS
RETURN (
        SELECT LAST_NAME, FIRST_NAME, MIDDLE_NAME, PREFERRED_NAME, CATEGORY_CODE, TYPE_CODE, IDF FROM PERSONS WHERE IDF = @IDF or @IDF = NULL
);
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[tfn_GetLOV]', 'FN') IS NOT NULL
   DROP FUNCTION [dbo].[tfn_GetLOV]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE FUNCTION [dbo].[tfn_GetLOV]
(
  @P_CODE         as varchar(16)   = 'C_PERSON',
  @P_PARENT_IDF   as varchar(64)   = NULL
)
RETURNS Table
AS
RETURN (
  Select NAME_CODE, DESCRIPTION, VALUE_CODE, VALUE_INTEGER, IDF,  POSITION_ORDER FROM CODE_VALUESETS WHERE (@P_CODE =  CATEGORY_CODE + SUBSTRING(TYPE_CODE,2,16)) AND (@P_PARENT_IDF is null or PARENT_IDF = @P_PARENT_IDF)
);
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_GetIDNumber]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_GetIDNumber]
GO

/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:    it generate an id for order, proposal,     */
/*                 award, and mod                             */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_GetIDNumber] (
  @P_TYPE      as varchar(16)   = 'C_ORDER',   --- C_ORDER, C_AWARD, C_BNP, C_MOD
  @P_APP       as varchar(64)   = 'C_SP3',     --- Required
  @P_ORG_IDF   as varchar(64)   = NULL,        --- either Contract IDF for Proposal or Organization IDF
  @P_REF_ID    as varchar(64)   = NULL,        --- reference to the order/proposal/award id for /order/award/mod
  @P_REF_NAME  as varchar(256)  = NULL,
  @P_USER      as varchar(128)  = NULL,
  @P_DATE      as DATETIME      = NULL,
  @P_STATUS    as varchar(16)   = NULL,
  @P_ACCESS    as int           = 744,
  @P_RECORD    as int           = 1,
  @ReturnValue as varchar(16)   = '' OUTPUT
 ) AS
BEGIN
  Set @P_USER   = ISNULL(@P_USER, SUSER_NAME())
  Set @P_STATUS = ISNULL(@P_STATUS, 'ACTIVE')
  SET @P_DATE   = ISNULL(@P_DATE, GETDATE())

  Declare @Start as int = 0, @Pos as int = 0, @Prefix as varchar(8), @Suffix as varchar(8), @Name as varchar(128), @IDNo as int, @IDF as varchar(64), @Cat as varchar(16) = 'C_OTHER', @RefCode as varchar(16)
  if len(IsNULL(@P_APP,'C_SP3')) = 64   set @P_APP = 'C_' + replace(LEFT(@P_APP,5),'_','')
  if @p_APP in ('C_SP3','C_SP3SB','C_CS','C_GSS','C_ECS3','C_ETIMS')
  BEGIN
          IF @p_APP = 'C_GSS'                         ------------- set Suffix
               Set @Suffix = 'GS'
          ELSE IF @p_APP = 'C_SP3SB'
               Set @Suffix = 'SB'
          ELSE
               Set @Suffix = ''
  END
  ELSE
  BEGIN
          Set @ReturnValue = 'C_ERR_APP_TYPE'
          Return
  END
  IF @P_TYPE in ('C_ORDER','C_TO', 'C_RFI')   ------------- define all types
  BEGIN
      Set @P_TYPE = 'C_ORDER'
      IF @P_APP in ('C_SP', 'C_SP3', 'C_SP3SB')
      BEGIN
            Set @Prefix = 'RFP'
            Set @Cat = 'C_SP'
            set @Name = 'Request For Proposal (RFP) ID: '
      END
      ELSE IF @P_APP in ('C_CS', 'C_GSS')
      BEGIN
            Set @Prefix = 'RFQ'
            Set @Cat = 'C_CS'
            set @Name = 'Request For Quote (RFQ) ID: '
      END
      ELSE
      BEGIN
            Set @P_TYPE = 'C_RFI'
            Set @Cat = 'C_ALL'
            Set @Name = 'Request For Information (RFI) ID: '
            Set @Prefix = 'RFI'
      END
  END
  ELSE IF @P_TYPE IN ('C_AWARD','C_OFFER')
  BEGIN
      Set @P_TYPE = 'C_AWARD'
      IF @P_APP in ('C_SP', 'C_SP3', 'C_SP3SB')
      BEGIN
            Set @Prefix = 'AWD'
            Set @Cat = 'C_SP'
            set @Name = 'AWARD (AWD) ID: '
      END
      ELSE IF @P_APP in ('C_CS', 'C_GSS')
      BEGIN
            Set @Prefix = 'DOA'
            Set @Cat = 'C_CS'
            set @Name = 'Direct Order Authorization (DOA) ID: '
      END
  END
  ELSE if @P_TYPE IN ('C_MOD', 'C_MODIFICATION')
  BEGIN
      Set @P_TYPE = 'C_MOD'
      Set @Cat = 'C_ALL'
      Set @Prefix = 'MOD'
      set @RefCode = RTRIM(Left(@P_REF_ID,16))
      set @Pos = CHARINDEX('_', @RefCode,1)
      IF @Pos > 8 set  @RefCode = Left(@RefCode,@Pos -1)    --- pick the root ID
      set @Name = 'Contract Modification (MOD) ID: '
      SELECT @IDNo = count(*) FROM REF_NITAAC_IDS WHERE VALUE_CODE = @RefCode and STATUS_CODE in ('COMPLETE','ACTIVE') AND TYPE_CODE in ('C_AWARD','C_MOD')
      if @IDNo > 0
      BEGIN
           SELECT @IDNo = count(*) + 1 FROM REF_NITAAC_IDS WHERE PARENT_CODE = @RefCode and STATUS_CODE = 'COMPLETE'
           SET @ReturnValue = @P_REF_ID + '_M'+Cast(@IDNo as varchar(3))
           INSERT INTO REF_NITAAC_IDS(IDF, PARENT_IDF, PARENT_CODE, ID_NUMBER, NEXT_ID_NUMBER, REFERENCE_CODE, VALUE_CODE, DESCRIPTION, STATUS_CODE, STATUS_DATE, CATEGORY_CODE, TYPE_CODE, NAME_CODE, ACRONYM_NAME, PREFIX, SUFFIX, CREATED_DATE, CREATED_BY, APPLICATION_IDF, ORGANIZATION_IDF, REFERENCE_ID, REFERENCE_NAME, ACCESS_LEVEL, POSITION_ORDER )
           SELECT dbo.fn_NewIDFExt(@Prefix,default, cast(@IDNo as varchar(5))), IDF, VALUE_CODE, @IDNo, @IDNo+1, REFERENCE_CODE, @ReturnValue, DESCRIPTION+ ':'+ @ReturnValue, 'COMPLETE',@P_DATE, CATEGORY_CODE, @P_TYPE, @Name+@ReturnValue, ACRONYM_NAME, @Prefix, SUFFIX, @P_Date, @P_User, APPLICATION_IDF, IsNull(@P_ORG_IDF,ORGANIZATION_IDF), isNull(@P_REF_ID, REFERENCE_ID), IsNull(@P_REF_NAME,REFERENCE_NAME), IsNull(@P_ACCESS,ACCESS_LEVEL), @IDNo
           FROM REF_NITAAC_IDS WHERE STATUS_CODE in ('COMPLETE','ACTIVE') AND VALUE_CODE = @RefCode AND TYPE_CODE in ('C_AWARD', 'C_MOD')
      END
      ELSE
          set @ReturnValue = 'C_ERR_MOD_REF'
      Return
  END
  ELSE IF @P_TYPE in ('C_PROPOSAL', 'C_BID', 'C_BNP')    --- deal with proposal
  BEGIN
          Set @Cat = 'C_CONTRACTOR'
          Set @P_TYPE = 'C_BNP'
          SELECT @ReturnValue = ACRONYM_NAME + '_' +  RIGHT('0000000'+Cast(PROPOSAL_NUMBER as varchar(7)),7) From CONTRACTS WHERE CONTRACTOR_IDF = @P_ORG_IDF AND ISNULL(LOCKED_BY,'') = '' AND STATUS_CODE = 'ACTIVE'
          if @@ROWCOUNT > 0
          BEGIN
                UPDATE CONTRACTS Set LAST_PROPOSAL_NUMBER = PROPOSAL_NUMBER, PROPOSAL_NUMBER = PROPOSAL_NUMBER + 1, LOCKED_BY = @P_USER, LOCKED_DATE = @P_DATE, LOCK_EXPIRED_DATE = DateAdd(Day, 1, @P_DATE), UPDATED_BY = @P_USER, UPDATED_DATE = @P_DATE, UPDATED_COUNT = UPDATED_COUNT + 1
                WHERE CONTRACTOR_IDF = @P_ORG_IDF AND ISNULL(LOCKED_BY,'') = '' AND STATUS_CODE = 'ACTIVE'
          END
          if @P_RECORD > 0
          BEGIN
                IF @P_APP in ('C_SP', 'C_SP3', 'C_SP3SB')
                BEGIN
                        Set @Prefix = 'BNP'
                        set @Name = 'Bid and Proposal ID: '
                END
                ELSE IF @P_APP in ('C_CS', 'C_GSS')
                BEGIN
                        Set @Prefix = 'TRP'
                        set @Name = 'Technology Refreshment Process (TRP) ID: '
               END
               INSERT INTO REF_NITAAC_IDS(IDF, ID_NUMBER, NEXT_ID_NUMBER,STATUS_CODE, STATUS_DATE, VALUE_CODE, CATEGORY_CODE, TYPE_CODE, NAME_CODE, ACRONYM_NAME, PREFIX, SUFFIX, CREATED_DATE, CREATED_BY, APPLICATION_IDF, ORGANIZATION_IDF, REFERENCE_ID, REFERENCE_NAME, ACCESS_LEVEL )
               SELECT dbo.fn_NewIDFExt(@Prefix,default, cast(1000001-PROPOSAL_NUMBER as varchar(5))), PROPOSAL_NUMBER, PROPOSAL_NUMBER+1, 'COMPLETE', STATUS_DATE, @ReturnValue, IsNull(@P_APP, @Cat), @P_TYPE, @Name + @ReturnValue, ACRONYM_NAME, @Prefix, @Suffix, @P_Date, @P_user, APPLICATION_IDF, CONTRACTOR_IDF, @P_REF_ID, @P_REF_NAME, @P_ACCESS
               FROM CONTRACTS WHERE CONTRACTOR_IDF = @P_ORG_IDF
          END
          RETURN @ReturnValue
  END
  ELSE IF @P_TYPE in ('C_AMEND', 'C_AMENDMENT')
  BEGIN
      Set @P_TYPE = 'C_AMEND'
      Set @Prefix = 'AMND'
      set @RefCode = RTRIM(Left(@P_REF_ID,16))
      set @Pos = CHARINDEX('_', @RefCode,1)
      IF @Pos > 8 set  @RefCode = Left(@RefCode,@Pos -1)    --- pick the root
      set @Name = 'Contract Amendment (AMND) ID: '
      SELECT @IDNo = count(*) FROM REF_NITAAC_IDS WHERE VALUE_CODE = @RefCode and STATUS_CODE in ('COMPLETE','ACTIVE') AND TYPE_CODE in ('C_ORDER','C_AMEND')
      if @IDNo > 0
      BEGIN
              SELECT @IDNo = count(*) + 1 FROM REF_NITAAC_IDS WHERE PARENT_CODE = @RefCode and STATUS_CODE = 'COMPLETE'
              SET @ReturnValue = @P_REF_ID + '_A'+Cast(@IDNo as varchar(3))
              INSERT INTO REF_NITAAC_IDS(IDF, PARENT_IDF, PARENT_CODE, ID_NUMBER, NEXT_ID_NUMBER, REFERENCE_CODE, VALUE_CODE, DESCRIPTION, STATUS_CODE, STATUS_DATE, CATEGORY_CODE, TYPE_CODE, NAME_CODE, ACRONYM_NAME, PREFIX, SUFFIX, CREATED_DATE, CREATED_BY, APPLICATION_IDF, ORGANIZATION_IDF, REFERENCE_ID, REFERENCE_NAME, ACCESS_LEVEL, POSITION_ORDER )
              SELECT dbo.fn_NewIDFExt(@Prefix,default, cast(@IDNo as varchar(5))), IDF, VALUE_CODE, @IDNo, @IDNo+1, REFERENCE_CODE, @ReturnValue, DESCRIPTION+ ':'+ @ReturnValue, 'COMPLETE',@P_DATE, CATEGORY_CODE, @P_TYPE, @Name+@ReturnValue, ACRONYM_NAME, @Prefix, SUFFIX, @P_Date, @P_User, APPLICATION_IDF, IsNull(@P_ORG_IDF,ORGANIZATION_IDF), isNull(@P_REF_ID, REFERENCE_ID), IsNull(@P_REF_NAME,REFERENCE_NAME), IsNull(@P_ACCESS,ACCESS_LEVEL), @IDNo
              FROM REF_NITAAC_IDS WHERE STATUS_CODE in ('COMPLETE','ACTIVE') AND VALUE_CODE = @RefCode AND TYPE_CODE = 'C_ORDER'
      END
      ELSE
              Set @ReturnValue = 'C_ERR_AMND_REF'
      Return
  END
  ELSE
  BEGIN
          Set @ReturnValue = 'C_ERR_TYPE_CODE'
          Return
  END

  Select @RefCode = VALUE_CODE FROM REF_NITAAC_IDS WHERE VALUE_CODE = @P_REF_ID and STATUS_CODE = 'COMOPLETE'
  While @Start < 5           -------- start to generate ID   for 5*.2 for 1 second
  BEGIN
       UPDATE  REF_NITAAC_IDS SET STATUS_CODE = 'PENDING'  WHERE TYPE_CODE = @P_TYPE AND CATEGORY_CODE = @Cat and STATUS_CODE = 'ACTIVE'
       if @@ROWCOUNT > 0
       BEGIN
            BEGIN TRANSACTION
                     SELECT @IDF = IDF FROM CODE_APPLICATIONS where VALUE_CODE = @P_APP;
                     SELECT @IDNo = NEXT_ID_NUMBER FROM REF_NITAAC_IDS  where STATUS_CODE = 'PENDING' and TYPE_CODE = @P_TYPE
                     Set @ReturnValue = @Prefix+RIGHT('000000'+cast(@IDno as varchar(6)),6)+@Suffix
                     INSERT INTO REF_NITAAC_IDS(IDF,ID_NUMBER, NEXT_ID_NUMBER,STATUS_CODE,VALUE_CODE, NAME_CODE, DESCRIPTION, CATEGORY_CODE, TYPE_CODE, ACRONYM_NAME, PREFIX, SUFFIX, CREATED_DATE, CREATED_BY, APPLICATION_IDF, ORGANIZATION_IDF, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, ACCESS_LEVEL )
                     VALUES(dbo.fn_NewIDFExt(@Prefix,default, cast(100001-@IDNo as varchar(5))),@IDNo, @IDNo+1, @P_STATUS, @ReturnValue, IsNUll(@P_ORG_IDF,'')+ ': ID Gnerated: '+@P_APP, IsNUll(@P_ORG_IDF,'') + ' Customer requested ID Generated for: ' + @P_APP, @Cat, @P_TYPE, @P_APP, @Prefix, @Suffix, @P_DATE,@P_USER, @IDF, @P_ORG_IDF, @ReturnValue, IsNull(@RefCode, @P_REF_ID), @P_REF_NAME, @P_ACCESS)
                     UPDATE REF_NITAAC_IDS SET STATUS_CODE = 'COMPLETE' WHERE STATUS_CODE = 'PENDING'  and TYPE_CODE = @P_TYPE
            COMMIT TRANSACTION
            set @Start = 6
       END
       ELSE    -- five times and one second per rouund
       BEGIN
            Set @Start = @Start + 1
            WAITFOR DELAY '00:00:00.200'
            Set @returnValue='TIMEOUT:'+cast(@Start as varchar(4))
       END
  END
END;
GO
GRANT EXECUTE ON [dbo].[sp_GetIDNumber]
    TO NEOS_UserRole
GO

--- exec [dbo].[sp_GetIDNumber]  @P_TYPE = 'C_ORDER',  @P_APP  = 'C_SP3', @P_ORG_IDF = NULL, @ReturnValue=@ID OUT

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_Log_Error]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_Log_Error]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_Log_Error]
        @P_Method varchar(256) = NULL,
        @P_ERR_CODE varchar(16) = NULL ,
        @P_NOTE_TEXT varchar(2048) = NULL,
        @P_ERR_MESSAGE varchar(MAX)  = NULL,
        @P_SEVERITY_CODE varchar(16) = NULL,
        @P_CATEGORY_CODE varchar(16) = NULL,
        @P_TYPE_CODE varchar(16) = NULL,
        @P_USER varchar(128) = NULL,
        @P_DATE DATE = NULL,
        @P_COMMENT varchar(256) = NULL,
        @P_REFERENCE_ID varchar(64) = NULL,
        @P_REFERENCE_NAME varchar(256) = NULL,
        @P_NOTIFY as INT = 0,
        @P_DESCRIPTION  varchar(256) = NULL,
        @ReturnValue as varchar(256) = ''   OUTPUT
AS
BEGIN
        SET NOCOUNT ON
        SET @P_ERR_CODE = IsNull(@P_ERR_CODE,'C_ERR_DEFAULT')
        SET @P_SEVERITY_CODE = IsNUll(@P_SEVERITY_CODE,'C_NORMAL')
        SET @P_USER = isNull(@P_USER, SUSER_NAME())
        SET @P_DATE = IsNull(@P_DATE, GETDATE())

        BEGIN TRANSACTION
        BEGIN TRY
              set @ReturnValue = dbo.fn_NewIDF('ERR',default)
              INSERT INTO OWN_ERRORS(IDF, [NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_BY],[CREATED_DATE],[BASE_IDF])
              SELECT @ReturnValue, isNull(@P_Method,NAME_CODE),VALUE_CODE,@P_SEVERITY_CODE, ACRONYM_NAME,isNull(@P_CATEGORY_CODE,CATEGORY_CODE),isNull(@P_TYPE_CODE,TYPE_CODE),isNull(@P_Description, DESCRIPTION),isNull(@P_NOTE_TEXT, NOTE_TEXT), @P_ERR_MESSAGE,'ACTIVE', @P_DATE, IsNull(@P_COMMENT, COMMENTS),IsNull(@P_REFERENCE_ID, REFERENCE_ID), IsNull(@P_REFERENCE_NAME, REFERENCE_NAME), @P_USER,@P_DATE, IDF
              FROM CODE_ERRORS WHERE @P_ERR_CODE=VALUE_CODE
              if @@ROWCOUNT > 0
              BEGIN
                      SELECT @P_METHOD = NAME_CODE, @P_NOTE_TEXT = NOTE_TEXT, @P_DESCRIPTION = [DESCRIPTION]
                      FROM OWN_ERRORS WHERE IDF = @ReturnValue
                      SET  @ReturnValue =  @P_DESCRIPTION
                      SET @P_ERR_MESSAGE = 'A new error has logged from Login User: ' + @P_USER + '<br>' + @P_ERR_MESSAGE
                      SET @P_NOTE_TEXT  = @P_METHOD + ' With IDF: ( ' + @ReturnValue + ' ) from: ' + DB_NAME() + ' - New Database Error Logged...'
                      If isNull(@P_NOTIFY,0) > 0
                      BEGIN
                              print 'Send the mail out'
                              --  EXEC sp_Send_DB_Mail @Mailsubject = @P_DESCRIPTION, @MailBody = @P_ERR_MESSAGE,  @MailType = 'Error'
                      END
              END
              ELSE
                    set @ReturnValue ='C_NO_ACTION'
        END TRY
        BEGIN CATCH
                if @@Error <> 0
                Begin
                        print '------------------------------------------------------------------------------------------------------------------------------'
                        print 'DB Log Error:  ' + error_message() + ' @ ' + convert(varchar(24),getdate(), 120)
                        print 'Original Err: ' + @P_ERR_MESSAGE + '  Method: ' + @P_Method + '  IDF: ' + @ReturnValue
                        print '------------------------------------------------------------------------------------------------------------------------------'
                        SET @ReturnValue = Left(error_message(), 256)
                end
        END CATCH
        COMMIT TRANSACTION
END
GO
GRANT EXECUTE ON [dbo].[sp_Log_Error]
    TO NEOS_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_Organization]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_Organization]
GO

/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_Organization]
( @P_IDF              varchar(64)  = NULL,
  @P_NAME_CODE        varchar(256) = NULL,
  @P_ASSOCIATED_NAME  varchar(256)  = NULL,
  @P_ACRONYM_NAME     varchar(8)   = NULL,
  @P_VALUE_CODE       varchar(32)  = NULL,
  @P_INTERNET_DOMAIN  varchar(255) = NULL,
  @P_FEDERAL_IDR      bit = NULL,
  @P_SBA_MASKED_IDR   BIGINT = NULL,
  @P_CAGE             varchar(20)  = NULL,
  @P_DUNS             varchar(20)  = NULL,
  @P_EIN              varchar(20)  = NULL,
  @P_CATEGORY_CODE    varchar(16)  = NULL,
  @P_TYPE_CODE        varchar(16)  = NULL,
  @P_DESCRIPTION      varchar(256) = NULL,
  @P_EFFECTIVE_START_DATE datetime = NULL,
  @P_EFFECTIVE_END_DATE   datetime = NULL,
  @P_STATUS_CODE        varchar(8) = NULL,
  @P_STATUS_DATE        datetime = NULL,
  @P_COMMENTS           varchar(256) = NULL,
  @P_REFERENCE_CODE     varchar(16) = NULL,
  @P_REFERENCE_ID       varchar(64) = NULL,
  @P_REFERENCE_NAME     varchar(256) = NULL,
  @P_VERIFICATION_IDR   bit = NULL,
  @P_PRIMARY_IDR        bit = NULL,
  @P_CREATED_DATE       datetime = NULL,
  @P_CREATED_BY         varchar(128) = NULL,
  @P_UPDATED_DATE       datetime = NULL,
  @P_UPDATED_BY         varchar(128) = NULL,
  @P_ACCESS_LEVEL       int = 744,
  @P_VERSION            varchar(64) = NULL,
  @P_PARENT_CODE        varchar(16) = NULL,
  @P_PARENT_IDF         varchar(64) = NULL,
  @P_CONTACT_IDF        varchar(64) = NULL,
  @P_ACTION             varchar(8) = 'ADD',
  @P_USER      as varchar(128)  = NULL,
  @P_DATE      as DATETIME      = NULL,
  @P_STATUS    as varchar(16)   = NULL,
  @ReturnValue as varchar(256)   = '' OUTPUT
)  AS
BEGIN
  DECLARE @PNAME as varchar(256) = NULL, @ERR_CODE as varchar(64) = '', @v_RV as Int = 0

  Set @P_USER   = ISNULL(@P_USER, SUSER_NAME())
  Set @P_STATUS = ISNULL(@P_STATUS, 'ACTIVE')
  SET @P_DATE   = ISNULL(@P_DATE, GETDATE())
  SET @P_NAME_CODE = LTRIM(RTRIM(@P_NAME_CODE+''))
  set @P_ACTION = IsNULL(LTRIM(RTRIM(@P_ACTION)),'ADD')

  if @P_ACTION in ('ADD','INSERT', 'ADDITION')
    BEGIN
      IF isNull(@P_NAME_CODE,'') = ''
      BEGIN
              Set @ERR_CODE = 'C_REC_NO_DATA'
              GOTO ERREXIT
      END
      if (select Count(*) from Organizations where NAME_CODE = @P_NAME_CODE and NAME_CODE <> 'OTHERS') > 0
      BEGIN
              SET @ERR_CODE = 'C_REC_DUPLICATE'
              GOTO ERREXIT
      END
      ELSE IF isNull(@P_FEDERAL_IDR,0) > 0
      BEGIN --- check integirity
           if Len(isNull(@P_REFERENCE_ID,''))=64  or Len(isNull(@P_PARENT_IDF,''))=64
           BEGIN
               SET @PNAME = (SELECT NAME_CODE  from FEDERAL_ORGANIZATIONS WHERE (IDF = @P_REFERENCE_ID or IDF=@P_PARENT_IDF) AND LEVEL_DEPTH = 3)
           END
           ELSE IF isNull(@P_REFERENCE_NAME,'') > ''
           BEGIN
               SET @PNAME = (SELECT NAME_CODE  from FEDERAL_ORGANIZATIONS WHERE NAME_CODE = @P_REFERENCE_NAME AND LEVEL_DEPTH = 3)
           END
           ELSE
           if isNull(@PNAME,'') = ''
           BEGIN
                  SET @ERR_CODE = 'C_REC_NO_PARENT'
                  GOTO ERREXIT
           END
           ELSE IF @P_NAME_CODE = 'OTHERES'
           BEGIN
                  SET @ERR_CODE = 'C_REC_DUPLICATE'
                  GOTO ERREXIT
           END
           SET @P_REFERENCE_NAME=@PNAME
      END
      ELSE IF isNull(@P_PARENT_IDF,'') > ''
      BEGIN
            if (select Count(*) from Organizations where @P_PARENT_IDF = IDF and NAME_CODE <> 'OTHERS') = 0
            BEGIN
                  SET @ERR_CODE = 'C_REC_NO_PARENT'
                  GOTO ERREXIT
            END
      END
      INSERT INTO [dbo].[ORGANIZATIONS]([NAME_CODE]
           ,[ASSOCIATED_NAME]
           ,[ACRONYM_NAME]
           ,[VALUE_CODE]
           ,[INTERNET_DOMAIN]
           ,[FEDERAL_IDR]
           ,[SBA_MASKED_IDR]
           ,[CAGE]
           ,[DUNS]
           ,[EIN]
           ,[CATEGORY_CODE]
           ,[TYPE_CODE]
           ,[DESCRIPTION]
           ,[EFFECTIVE_START_DATE]
           ,[EFFECTIVE_END_DATE]
           ,[STATUS_CODE]
           ,[STATUS_DATE]
           ,[COMMENTS]
           ,[REFERENCE_CODE]
           ,[REFERENCE_ID]
           ,[REFERENCE_NAME]
           ,[VERIFICATION_IDR]
           ,[PRIMARY_IDR]
           ,[CREATED_DATE]
           ,[CREATED_BY]
           ,[ACCESS_LEVEL]
           ,[VERSION]
           ,[PARENT_CODE]
           ,[PARENT_IDF]
           ,[CONTACT_IDF])
        VALUES (@P_NAME_CODE
           ,@P_ASSOCIATED_NAME
           ,@P_ACRONYM_NAME
           ,@P_VALUE_CODE
           ,@P_INTERNET_DOMAIN
           ,@P_FEDERAL_IDR
           ,@P_SBA_MASKED_IDR
           ,@P_CAGE
           ,@P_DUNS
           ,@P_EIN
           ,@P_CATEGORY_CODE
           ,@P_TYPE_CODE
           ,@P_DESCRIPTION
           ,IsNull(@P_EFFECTIVE_START_DATE,@P_DATE)
           ,@P_EFFECTIVE_END_DATE
           ,IsNull(@P_STATUS_CODE,@P_STATUS)
           ,@P_STATUS_DATE
           ,@P_COMMENTS
           ,@P_REFERENCE_CODE
           ,@P_REFERENCE_ID
           ,@P_REFERENCE_NAME
           ,IsNull(@P_VERIFICATION_IDR,0)
           ,IsNull(@P_PRIMARY_IDR ,0)
           ,IsNull(@P_CREATED_DATE,@P_DATE)
           ,Isnull(@P_CREATED_BY,@P_USER)
           ,Isnull(@P_ACCESS_LEVEL,744)
           ,IsNull(@P_VERSION,'C_VER_1_0')
           ,@P_PARENT_CODE
           ,@P_PARENT_IDF
           ,@P_CONTACT_IDF)
       SET @ReturnValue = (SELECT IDF FROM ORGANIZATIONS WHERE NAME_CODE = @P_NAME_CODE)
       IF isNull(@P_FEDERAL_IDR,0) > 0
       BEGIN
               select @v_RV  = MAX(CLASS)+1 FROM FEDERAL_ORGANIZATIONS
               UPDATE  o SET  TYPE_CODE = 'C_OFFICE', CLASS = @v_RV, REFERENCE_CODE = p.REFERENCE_CODE, VALUE_CODE = 'C_' + CAST(@v_RV as varchar(14)),CATEGORY_CODE = p.CATEGORY_CODE, PARENT_IDF=p.IDF, LEVEL_I_NAME = p.LEVEL_I_NAME, LEVEL_I_IDF = p.LEVEL_I_IDF, LEVEL_II_NAME = p.LEVEL_II_NAME, LEVEL_II_IDF = p.LEVEL_II_IDF, LEVEL_III_NAME = p.NAME_CODE, LEVEL_III_IDF = p.IDF
               FROM FEDERAL_ORGANIZATIONS o INNER JOIN FEDERAL_ORGANIZATIONS p on o.REFERENCE_NAME = p.NAME_CODE
               WHERE p.LEVEL_DEPTH = 3 AND o.IDF = @ReturnValue
       END
   END
   ELSE IF @P_ACTION in ('DEL','REMOVE','DELETE','REM')
   BEGIN
          DELETE FROM ORGANIZATIONS WHERE IDF = @P_IDF
          If @@RowCount > 0
             SET @ReturnValue = @P_IDF
          ELSE
             SET @ReturnValue = 'C_REC_NO_FOUND'

   END
   ELSE IF @P_ACTION in ('UPT','UPDATE')
   BEGIN
          UPDATE ORGANIZATIONS
          SET [NAME_CODE] = IsNull(@P_NAME_CODE, NAME_CODE)
              ,[ASSOCIATED_NAME] = IsNull(@P_ASSOCIATED_NAME,ASSOCIATED_NAME)
              ,[ACRONYM_NAME] = IsNull(@P_ACRONYM_NAME, ACRONYM_NAME)
              ,[VALUE_CODE] = IsNull(@P_VALUE_CODE, VALUE_CODE)
              ,[INTERNET_DOMAIN] = IsNull(@P_INTERNET_DOMAIN, INTERNET_DOMAIN)
              ,[SBA_MASKED_IDR] = IsNull(@P_SBA_MASKED_IDR, SBA_MASKED_IDR)
              ,[CAGE] = IsNull(@P_CAGE, CAGE)
              ,[DUNS] = IsNull(@P_DUNS, DUNS)
              ,[EIN] = IsNull(@P_EIN, EIN)
              ,[CATEGORY_CODE] = IsNull(@P_CATEGORY_CODE, CATEGORY_CODE)
              ,[TYPE_CODE] = IsNull(@P_TYPE_CODE, TYPE_CODE)
              ,[DESCRIPTION] = IsNull(@P_DESCRIPTION, DESCRIPTION)
              ,[EFFECTIVE_START_DATE] = IsNull(@P_EFFECTIVE_START_DATE, EFFECTIVE_START_DATE)
              ,[EFFECTIVE_END_DATE] = IsNull(@P_EFFECTIVE_END_DATE, EFFECTIVE_END_DATE)
              ,[STATUS_CODE] = IsNull(@P_STATUS_CODE, STATUS_CODE)
              ,[STATUS_DATE] = IsNull(@P_STATUS_DATE, STATUS_DATE)
              ,[COMMENTS] = IsNull(@P_COMMENTS, COMMENTS)
              ,[REFERENCE_CODE] = IsNull(@P_REFERENCE_CODE, REFERENCE_CODE)
              ,[REFERENCE_ID] = IsNull(@P_REFERENCE_ID,REFERENCE_ID)
              ,[REFERENCE_NAME] = IsNull(@P_REFERENCE_NAME, REFERENCE_NAME)
              ,[VERIFICATION_IDR] = IsNull(@P_VERIFICATION_IDR,VERIFICATION_IDR)
              ,[PRIMARY_IDR] = IsNull(PRIMARY_IDR, @P_PRIMARY_IDR)
              ,[UPDATED_DATE] = IsNull(@P_UPDATED_DATE,@P_DATE)
              ,[UPDATED_BY] = IsNull(@P_UPDATED_BY, @P_USER)
              ,[ACCESS_LEVEL] = IsNull(@P_ACCESS_LEVEL,ACCESS_LEVEL)
              ,[VERSION] = IsNull(@P_VERSION,VERSION)
              ,[PARENT_CODE] = IsNull(@P_PARENT_CODE,PARENT_CODE)
              ,[PARENT_IDF] = IsNull(@P_PARENT_IDF,PARENT_IDF)
              ,[CONTACT_IDF] = IsNull(@P_CONTACT_IDF,CONTACT_IDF)
          WHERE IDF = @P_IDF
          If @@RowCount > 0
             SET @ReturnValue = @P_IDF
          ELSE
             SET @ReturnValue = 'C_REC_NO_FOUND'
   END
   RETURN

ERREXIT:
    exec sp_Log_Error @P_SEVERITY_CODE='C_FATAL',@P_REFERENCE_NAME='[dbo].[sp_Organization]',@P_CATEGORY_CODE='C_ERR_DATABASE', @P_USER = @P_USER, @P_ERR_CODE=@ERR_CODE, @ReturnValue=@ReturnValue OUT
    Set @ReturnValue = @ERR_CODE + ':'+ @ReturnValue
END;
GO

GRANT EXECUTE ON [dbo].[sp_Organization]
    TO NEOS_UserRole
GO

----- exec [dbo].[sp_Organization] @P_NAME_CODE = 'TEST1', @P_REFERENCE_ID  = NULL, @P_REFERENCE_NAME  = 'My Test',  @ReturnValue = @Value

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_Sync_Process]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_Sync_Process]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_Sync_Process]
        @P_METHOD varchar(256) = NULL,
        @P_NAME_CODE varchar(16) = NULL ,
        @P_NOTE_TEXT varchar(2048) = NULL,
        @P_MESSAGE varchar(MAX)  = NULL,
        @P_CATEGORY_CODE varchar(16) = NULL,
        @P_TYPE_CODE varchar(16) = NULL,
        @P_USER varchar(128) = NULL,
        @P_DATE DATE = NULL,
        @P_COMMENT varchar(256) = NULL,
        @P_REFERENCE_ID varchar(64) = NULL,
        @P_REFERENCE_NAME varchar(256) = NULL,
        @P_NOTIFY as INT = 0,
        @P_DESCRIPTION  varchar(256) = NULL,
        @P_STATUS_CODE varchar(8) = NULL,

        @ReturnValue as varchar(256) = ''   OUTPUT
AS
BEGIN
        Declare @CDATE as DATE=GETDATE(), @LastRunDate as DATE, @AUDIT_ID as varchar(512)
        SET @P_USER = isNull(@P_USER, SUSER_NAME())
        SET @P_DATE = IsNull(@P_DATE, GETDATE())
        SET @P_NAME_CODE = IsNull(@P_NAME_CODE,'Sync Job') + '@'+ cast(@P_DATE as varchar(24))

        select @LastRunDate = EFFECTIVE_END_DATE from SYSTEM_MAINTENANCES  WHERE VALUE_CODE = 'C_SYNC_PROCESS'


       If @P_METHOD ='ALL'
       BEGIN
               exec  [dbo].[sp_Sync_Process]  @P_METHOD='INSERT',@P_DATE=@P_DATE, @P_USER=@P_USER,@ReturnValue=@ReturnValue OUT
               exec  [dbo].[sp_Sync_Process]  @P_METHOD='DELETE',@P_DATE=@P_DATE, @P_USER=@P_USER,@ReturnValue=@ReturnValue OUT
               exec  [dbo].[sp_Sync_Process]  @P_METHOD='UPDATE',@P_DATE=@P_DATE, @P_USER=@P_USER,@P_NAME_CODE=@P_NAME_CODE,@P_NOTE_TEXT=@P_NOTE_TEXT,@P_CATEGORY_CODE=@P_CATEGORY_CODE,@P_TYPE_CODE=@P_TYPE_CODE,@P_COMMENT=@P_COMMENT,@P_REFERENCE_ID=@P_REFERENCE_ID,@P_REFERENCE_NAME=@P_REFERENCE_NAME,@P_DESCRIPTION=@P_DESCRIPTION,@P_STATUS_CODE=@P_STATUS_CODE,@ReturnValue=@ReturnValue OUT
       END
       ELSE
       BEGIN
               SELECT @AUDIT_ID=AUDIT_ID FROM NEOS_AUDIT.dbo.AUDIT_REPORT WHERE ACTION = @P_METHOD AND SOURCE = 'CODE_APPLICATIONS' AND @LastRunDate <= CREATED_DATE

               UPDATE SYSTEM_MAINTENANCES SET NAME_CODE = isNull(@P_NAME_CODE, NAME_CODE), EFFECTIVE_START_DATE = @P_DATE, ACTION_DATE= @CDATE, REFERENCE_ID = isNull(@P_REFERENCE_ID, REFERENCE_ID), REFERENCE_NAME = isNull(@P_REFERENCE_ID, REFERENCE_NAME),
               COMMENTS=isNull(@P_COMMENT,COMMENTS), UPDATED_BY = @P_USER, STATUS_CODE = 'RUNNING', STATUS_DATE = @CDATE, [DESCRIPTION] = isNull(@P_DESCRIPTION,[DESCRIPTION]), NOTE_TEXT = isNull(@P_NOTE_TEXT,NOTE_TEXT),
               CATEGORY_CODE = isNull(@P_CATEGORY_CODE, [CATEGORY_CODE]),TYPE_CODE = isNull(@P_TYPE_CODE, [TYPE_CODE])
               WHERE VALUE_CODE = 'C_SYNC_PROCESS'
               IF @P_METHOD ='UPDATE'
               BEGIN
                       UPDATE u SET NAME_CODE = a.NAME_CODE
                              ,[URL]=a.URL
                              ,[ADMIN_URL]=a.ADMIN_URL
                              ,[ACRONYM_NAME]=a.ACRONYM_NAME
                              ,[CATEGORY_CODE]=a.CATEGORY_CODE
                              ,[TYPE_CODE]=a.TYPE_CODE
                              ,[DESCRIPTION]=a.DESCRIPTION
                              ,[NOTE_TEXT]=a.NOTE_TEXT
                              ,[STATUS_CODE] =a.STATUS_CODE
                              ,[STATUS_DATE] =a.STATUS_DATE
                              ,[COMMENTS]=a.COMMENTS
                              ,[REFERENCE_ID]=a.REFERENCE_ID
                              ,[REFERENCE_NAME]=a.REFERENCE_NAME
                              ,[PRIMARY_IDR]=a.PRIMARY_IDR
                              ,[POSITION_ORDER]=a.POSITION_ORDER
                              ,[UPDATED_DATE]=a.UPDATED_DATE
                              ,[UPDATED_BY]=a.UPDATED_BY
                              ,[UPDATED_COUNT]=a.UPDATED_COUNT
                              ,[ACCESS_LEVEL]=a.ACCESS_LEVEL
                              ,[PARENT_CODE] =a.PARENT_CODE
                              ,[VERSION] =a.VERSION
                              ,[PARENT_IDF] =a.PARENT_IDF
                              ,[DOCUMENT_IDF] =a.DOCUMENT_IDF
                              ,[CONTACT_IDF] =a.CONTACT_IDF
                              ,[EFFECTIVE_START_DATE]=a.EFFECTIVE_START_DATE
                              ,[EFFECTIVE_END_DATE] =a.EFFECTIVE_END_DATE
                       FROM  NEOSDEV.dbo.CODE_APPLICATIONS u INNER JOIN CODE_APPLICATIONS a on a.IDF = u.IDF
                       WHERE u.IDF = @AUDIT_ID
               END
               ELSE IF @P_METHOD ='DELETE'
               BEGIN
                       SELECT @AUDIT_ID=AUDIT_ID FROM NEOS_AUDIT.dbo.AUDIT_REPORT WHERE ACTION = @P_METHOD AND SOURCE = 'CODE_APPLICATIONS' AND @LastRunDate <= CREATED_DATE
                       if isNull(@AUDIT_ID,'') > ''
                       BEGIN
                               DELETE NEOSDEV.dbo.CODE_APPLICATIONS WHERE IDF = @AUDIT_ID
                       END
               END
               ELSE IF @P_METHOD ='INSERT'
               BEGIN
                       INSERT INTO NEOSDEV.dbo.CODE_APPLICATIONS
                       SELECT * FROM CODE_APPLICATIONS
                       WHERE IDF NOT IN (SELECT IDF FROM NEOSDEV.dbo.CODE_APPLICATIONS)
               END
       END
       SET @CDATE = GETDATE()
       UPDATE SYSTEM_MAINTENANCES SET [EFFECTIVE_END_DATE] = @CDATE, STATUS_CODE='ACTIVE', STATUS_DATE = @CDATE
          WHERE VALUE_CODE = 'C_SYNC_PROCESS'

END
GO
GRANT EXECUTE ON [dbo].[sp_Sync_Process]
    TO NEOS_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_Set_Annual_Price]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_Set_Annual_Price]
GO
/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description: used by NITAAC Admin to set clins             */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_Set_Annual_Price]
        @P_CLIN_IDF varchar(64) = 'ALL',
        @P_CONTRACTOR_CLIN_ID varchar(128) = NULL,
        @P_NAME_CODE varchar(16) = NULL ,
        @P_NOTE_TEXT varchar(2048) = NULL,
        @P_CATEGORY_CODE varchar(16) = NULL,
        @P_TYPE_CODE varchar(16) = NULL,
        @P_USER varchar(128) = NULL,
        @P_COMMENT varchar(256) = NULL,
        @P_ANNUAL_DATE DATETIME = NULL,
        @P_ANNUAL_RATE as FLOAT = 0.15,
        @P_DESCRIPTION  varchar(256) = NULL,
        @P_STATUS_CODE varchar(8) = NULL,
        @ReturnValue as varchar(256) = ''   OUTPUT
AS
BEGIN
       Declare @CDATE as DATETIME =GETDATE()
       SET @P_USER = isNull(@P_USER, SUSER_NAME())
       SET @P_ANNUAL_DATE = IsNull(@P_ANNUAL_DATE, GETDATE())
       if isNull(@P_CLIN_IDF,'') = 'ALL'
       BEGIN
               UPDATE [dbo].REF_NITAAC_COMMODITY_CLINS SET ANNUAL_PRICE = PRICE, ANNUAL_CEILING_PRICE = PRICE*(1+@P_ANNUAL_RATE), COMMENTS = isNULL(@P_COMMENT,COMMENTS), ANNUAL_DATE = @P_ANNUAL_DATE
               WHERE STATUS_CODE = 'ACTIVE'
       END
       else if LEN(@P_CLIN_IDF) = 64
       BEGIN
               UPDATE [dbo].REF_NITAAC_COMMODITY_CLINS SET ANNUAL_PRICE = PRICE, ANNUAL_CEILING_PRICE = PRICE*(1+@P_ANNUAL_RATE), COMMENTS = isNULL(@P_COMMENT,COMMENTS), ANNUAL_DATE = @P_ANNUAL_DATE
               WHERE STATUS_CODE = 'ACTIVE' and CLIN_IDF = @P_CLIN_IDF AND CONTRACTOR_CLIN_ID = @P_CONTRACTOR_CLIN_ID
       END
       if @@ROWCOUNT > 0 SET @ReturnValue = cast(@@ROWCOUNT as varchar(16))
END
GO
GRANT EXECUTE ON [dbo].[sp_Set_Annual_Price]
    TO NEOS_UserRole
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_Holiday]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_Holiday]
GO
CREATE PROCEDURE [dbo].[sp_Holiday]
       @DateCode as varchar(16) = '2016',
       @Description as varchar(256) = NULL,
       @Comments as varchar(256) = NULL,
       @USERID as varchar(128) = '',
       @STATUS as varchar(8) = 'ACTIVE',
       @ReferenceID as varchar(64) = NULL,
       @ReferenceName as varchar(256) = NULL,
       @HolidayID as varchar(64) = NULL,
       @ACTION as varchar(8) = 'ADD',
       @ReturnValue as int = 0 OUTPUT
AS
BEGIN
      Declare @SDATE as Datetime = GETDATE()

      set @DateCode = LTRIM(RTRIM(@DateCode))
      set @USERID = LTRIM(RTRIM(@USERID))
      set @ACTION = UPPER(LTRIM(RTRIM(left(@ACTION,3))))
      if Len(@USERID) = 0 set @USERID =  SUSER_NAME()
      if IsDate(@DateCode) = 1 set @DateCode = cast(Year(@DateCode) as varchar(16))

      if @ACTION = 'ADD'
      BEGIN
         if Exists (Select Holiday_Date From Holidays where Holiday_Year = Year(@DateCode)) Goto ERRLOG
         INSERT INTO [dbo].[Holidays]([NAME_CODE],[HOLIDAY_DATE],[OFFSET_DAY],[FIXED_IDR],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF], VERSION, ACCESS_LEVEL, POSITION_ORDER)
         select NAME_CODE,  case When DATEPart(DW,Comments+'/'+@DateCode) = 1 then dateAdd(day,1,Comments+'/'+@DateCode)
                                When DATEPart(DW,Comments+'/'+@DateCode) = 7 then dateAdd(day,-1,Comments+'/'+@DateCode)
                                Else dateAdd(Second,1,Comments+'/'+@DateCode) End,
                           case When DATEPart(DW,Comments+'/'+@DateCode) = 1 then 1
                                When DATEPart(DW,Comments+'/'+@DateCode) = 7 then -1
                                Else 0 End,  FIXED_IDR, IsNull(@Description,Description),@STATUS, @SDATE, IsNull(@Comments,Comments),isNull(@ReferenceID, Reference_ID),isNull(@ReferenceName, Reference_Name),@SDATE, @USERID,IDF, VERSION, ACCESS_LEVEL, POSITION_ORDER
         from CODE_HOLIDAYS Where FIXED_IDR = 1
         INSERT INTO [dbo].[Holidays]([NAME_CODE],[HOLIDAY_DATE],[FIXED_IDR],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF], VERSION, ACCESS_LEVEL, POSITION_ORDER)
         select NAME_CODE,  case When DATEPART(DW,dateadd(WEEK,cast(right(Comments,1) as int),Left(Right(Comments,4),2)+'/1/'+@DateCode))<= OffSet_Day then DATEADD(DAY,OffSet_Day-DATEPART(DW, DATEADD(Week,cast(right(Comments,1) as int),Left(Right(Comments,4),2)+'/1/'+@DateCode)),DATEADD(Week,CAST(right(Comments,1) AS INT),Left(Right(Comments,4),2)+'/1/'+@DateCode))
                                Else Dateadd(day,7+OFFSET_DAY-DATEPART(DW, DATEADD(Week,cast(right(Comments,1) as int),Left(Right(Comments,4),2)+'/1/'+@DateCode)),DATEADD(Week,CAST(right(Comments,1) AS INT),Left(Right(Comments,4),2)+'/1/'+@DateCode)) End,
           FIXED_IDR, IsNull(@Description,Description),@STATUS, @SDATE, IsNull(@Comments,Comments),isNull(@ReferenceID, Reference_ID),isNull(@ReferenceName, Reference_Name),@SDATE, @USERID,IDF, VERSION, ACCESS_LEVEL, POSITION_ORDER
         From CODE_Holidays Where FIXED_IDR = 0
         UPDATE HOLIDAYS set HOLIDAY_YEAR = YEAR(Holiday_DATE), HOLIDAY_DAY = DAY(Holiday_DATE), HOLIDAY_MONTH = MONTH(Holiday_DATE) where Holiday_DATE is not null
         if Exists (Select count(Holiday_Date) FROM Holidays where Year(@DateCode) = Holiday_Year and Holiday_Month = 5 and DateDiff(Month, Holiday_Date, DATEADD(WEEK,1,Holiday_Date)) = 0)
            Update Holidays  set Holiday_Date = DATEADD(WEEK,1,Holiday_Date), Holiday_Day = Day(DATEADD(WEEK,1,Holiday_Date)) where Year(@DateCode) = Holiday_Year and Holiday_Month = 5
      END
      else if @ACTION = 'DEL' or @ACTION = 'REM'
      BEGIN
         if isNull(@HolidayID,'') <> ''
           Delete Holidays where IDF = @HolidayID
         else if isnumeric(@DateCode) > 0
           Delete Holidays where Holiday_Year = Year(@DateCode)
         else if IsDate(@DateCode) > 0
           Delete Holidays where [Holiday_Year] = Year(@DateCode) and [Holiday_Month] = Month(@DateCode) and [Holiday_Day] = Day(@DateCode)
      END
      else if @ACTION = 'UPD'
      BEGIN
         if isNull(@HolidayID,'') <> ''
         BEGIN
            if len(@ReferenceName) > 0 and Len(@Comments) > 0
               Update Holidays set Status_Code = @STATUS, Status_Date = @SDATE, Reference_Name = @ReferenceName, Comments = @Comments where IDF = @HolidayID
            else if len(@ReferenceName) > 0
               Update Holidays set Status_Code = @STATUS, Status_Date = @SDATE, Reference_Name = @ReferenceName where IDF = @HolidayID
            else
               Update Holidays set Status_Code = @STATUS, Status_Date = @SDATE where IDF = @HolidayID
         End
         else if isDate(@DateCode) > 0
               Update Holidays set Status_Code = @STATUS, Status_Date = @SDATE where [Holiday_Year] = Year(@DateCode) and [Holiday_Month] = Month(@DateCode) and [Holiday_Day] = Day(@DateCode)
      END
      return
ERRLOG:
      declare @ErrMsg as varchar(1024) = 'Holidays For the Year ( '+ @DateCode +' ) already exists.'
      RAISERROR(@ErrMsg, 16,1)
      exec sp_Log_Error @P_SEVERITY_CODE='C_FATAL',@P_ERR_MESSAGE=@ErrMsg,@P_NOTE_TEXT='',@P_REFERENCE_NAME='[dbo].[sp_Holiday]',@P_CATEGORY_CODE='C_ERR_DATABASE', @P_USER = @USERID, @P_ERR_CODE='C_SP_DEFAULT', @ReturnValue=@ReturnValue OUT
    Set @ReturnValue = 'C_SP_DEFAULT:'+ @ReturnValue
END;
GO
GRANT EXECUTE ON OBJECT::[dbo].[sp_Holiday]
    TO NEOS_UserRole;
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sp_PERSON]', 'P') IS NOT NULL
   DROP PROCEDURE [dbo].[sp_PERSON]
GO

/*============================================================*/
/* Created By Peter Yan on Date:                              */
/* Description:                                               */
/*============================================================*/
CREATE PROCEDURE [dbo].[sp_PERSON]
( @P_IDF                 varchar(64)  = NULL,
  @P_PREFIX              varchar(64)  = NULL,
  @P_TITLE               varchar(64)  = NULL,
  @P_FIRST_NAME          varchar(64)  = NULL,
  @P_MIDDLE_NAME         varchar(32)  = NULL,
  @P_LAST_NAME           varchar(64)  = NULL,
  @P_SUFFIX              varchar(64)  = NULL,
  @P_ESIGN_ACK           BIT          = NULL,
  @P_ESIGN_EXPIRATION    DATETIME     = NULL,
  @P_PHONE               varchar(32)  = NULL,
  @P_EMAIL               varchar(256) = NULL,
  @P_FAX                 varchar(32)  = NULL,
  @P_JOB                 varchar(64)  = NULL,
  @P_PHONE_EXTENSION     varchar(16)  = NULL,
  @P_OVERLAY_SHOW_IDR    BIT          = NULL,
  @P_PREFERRED_NAME      varchar(128) = NULL,
  @P_CATEGORY_CODE       varchar(16)  = NULL,
  @P_TYPE_CODE           varchar(16)  = NULL,
  @P_DESCRIPTION         varchar(256) = NULL,
  @P_STATUS              varchar(16)  = NULL,
  @P_STATUS_DATE         DateTime     = NULL,
  @P_COMMENTS            varchar(256)  = NULL,
  @P_REFERENCE_ID        varchar(64)  = NULL,
  @P_REFERENCE_NAME      varchar(256)  = NULL,
  @P_VERIFICATION_IDR    BIT  = NULL,
  @P_FEDERAL_IDR         BIT  = NULL,
  @P_UPDATED_DATE        DateTime = NULL,
  @P_USER                varchar(128)  = NULL,
  @P_ACCESS_LEVEL        INT = NULL,
  @P_VERSION             varchar(64)  = NULL,
  @P_ORGANIZATION_IDF    varchar(64)  = NULL,
  @P_Action              varchar(16)  = 'ADD',
  @P_CONTACT_IDF         varchar(16)  = NULL,
  @P_ADDRESS_IDF         varchar(16)  = NULL,
  @P_SHIP_ADDRESS_IDF    varchar(16)  = NULL,
  @ReturnValue as varchar(256)   = '' OUTPUT
)  AS
BEGIN
  DECLARE @PNAME as varchar(256) = NULL, @ERR_CODE as varchar(64) = '', @v_RV as Int = 0, @v_IDF as varchar(64)

  Set @P_USER   = ISNULL(@P_USER, SUSER_NAME())
  Set @P_STATUS = ISNULL(@P_STATUS, 'ACTIVE')
  SET @P_STATUS_DATE   = ISNULL(@P_STATUS_DATE, GETDATE())
  set @P_ACTION = IsNULL(LTRIM(RTRIM(@P_ACTION)),'ADD')
  BEGIN TRY
        if @P_Action in ('ADD','NEW')
        BEGIN
                if IsNull(@P_LAST_NAME,'') = '' or IsNull(@P_FIRST_NAME,'') = ''  Throw 80001, 'C_BAD_NAME', 1
                set @v_IDF = dbo.fn_NewIDF('PER',@P_STATUS_DATE)
                INSERT INTO PERSONS([IDF],[PREFIX],[TITLE],[FIRST_NAME],[MIDDLE_NAME],[LAST_NAME],[SUFFIX],[ESIGN_ACK],[ESIGN_EXPIRATION],[PHONE],[EMAIL],[FAX],[JOB],[PHONE_EXTENSION],[OVERLAY_SHOW_IDR],[PREFERRED_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE]
                ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[FEDERAL_IDR] ,[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_IDF],[CONTACT_IDF]) VALUES
                (@v_IDF,@P_PREFIX,@P_TITLE,@P_FIRST_NAME,@P_MIDDLE_NAME,@P_LAST_NAME,@P_SUFFIX,@P_ESIGN_ACK,@P_ESIGN_EXPIRATION,@P_PHONE,@P_EMAIL,@P_FAX,@P_JOB,@P_PHONE_EXTENSION,@P_OVERLAY_SHOW_IDR,isNull(@P_PREFERRED_NAME,@P_LAST_NAME + ', ' + @P_FIRST_NAME + RTRIM(' '+ @P_MIDDLE_NAME)),@P_CATEGORY_CODE,@P_TYPE_CODE,@P_DESCRIPTION,@P_STATUS,@P_STATUS_DATE
                ,@P_COMMENTS,@P_REFERENCE_ID,isNull(@P_REFERENCE_NAME,@P_LAST_NAME + ', ' + @P_FIRST_NAME + RTRIM(' '+ @P_MIDDLE_NAME)), @P_VERIFICATION_IDR,@P_FEDERAL_IDR ,@P_STATUS_DATE,@P_USER,isNull(@P_ACCESS_LEVEL,744),isNull(@P_VERSION,'VERSION:0'),@P_ORGANIZATION_IDF,@P_CONTACT_IDF)
                if Len(@P_ORGANIZATION_IDF) = 64
                BEGIN
                    INSERT INTO CONTACT_TELECOM_ADDRESSES([CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[USAGE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
                     ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[VERSION])
                    SELECT c.IDF, t.TELECOM_ADDRESS_IDF, @v_IDF, o.NAME_CODE, t.CATEGORY_CODE,T.TYPE_CODE,c.[DESCRIPTION],c.[USAGE_CODE],c.[EFFECTIVE_START_DATE],c.[EFFECTIVE_END_DATE]
                     ,c.[STATUS_CODE],c.[STATUS_DATE],c.[COMMENTS],c.[REFERENCE_NAME],c.[VERIFICATION_IDR],c.[PRIMARY_IDR],1,c.[CREATED_DATE],c.[CREATED_BY],2,c.[VERSION]
                    FROM CONTACT_TELECOM_ADDRESSES t INNER JOIN ORGANIZATIONS o on t.CONTACT_IDF = o.CONTACT_IDF, CONTACTS c
                    WHERE o.IDF = @P_ORGANIZATION_IDF AND left(c.IDF,59) = left(@v_IDF,59) AND t.CATEGORY_CODE = 'C_PRIMARY'
                    INSERT INTO CONTACT_ADDRESSES(CONTACT_IDF, ADDRESS_IDF, OWNER_IDF,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
                     ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[VERSION])
                    SELECT c.IDF, a.ADDRESS_IDF, @v_IDF, o.NAME_CODE, a.CATEGORY_CODE,a.TYPE_CODE,c.[USAGE_CODE],a.[DIRECTION], c.[DESCRIPTION], a.[EFFECTIVE_START_DATE],a.[EFFECTIVE_END_DATE]
                     ,c.[STATUS_CODE],c.[STATUS_DATE],c.[COMMENTS],c.[VERIFICATION_IDR],c.[PRIMARY_IDR],c.[PREFERRED_IDR],c.[CREATED_DATE],c.[CREATED_BY],3,c.[VERSION]
                    FROM CONTACT_ADDRESSES a INNER JOIN ORGANIZATIONS o on o.CONTACT_IDF = a.ADDRESS_IDF, CONTACTS c
                    WHERE o.IDF = @P_ORGANIZATION_IDF AND left(c.IDF,59) = left(@v_IDF,59) AND a.CATEGORY_CODE = 'C_PRIMARY'
                END
                if Len(@P_ADDRESS_IDF) = 64
                    INSERT INTO CONTACT_ADDRESSES(CONTACT_IDF, ADDRESS_IDF, OWNER_IDF,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
                     ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[VERSION])
                    SELECT c.IDF, a.IDF, @v_IDF, c.NAME_CODE, c.CATEGORY_CODE,c.TYPE_CODE,c.[USAGE_CODE],a.[DIRECTION], c.[DESCRIPTION], c.[EFFECTIVE_START_DATE],c.[EFFECTIVE_END_DATE]
                     ,c.[STATUS_CODE],c.[STATUS_DATE],c.[COMMENTS],c.[VERIFICATION_IDR],c.[PRIMARY_IDR],c.[PREFERRED_IDR],c.[CREATED_DATE],c.[CREATED_BY],3,c.[VERSION]
                    FROM ADDRESSES a, CONTACTS c
                     WHERE a.IDF = @P_ADDRESS_IDF AND left(c.IDF,59) = left(@v_IDF,59)
                if Len(@P_SHIP_ADDRESS_IDF) = 64
                    INSERT INTO CONTACT_ADDRESSES(CONTACT_IDF, ADDRESS_IDF, OWNER_IDF,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
                     ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[VERSION])
                    SELECT c.IDF, a.IDF, @v_IDF, c.NAME_CODE, c.CATEGORY_CODE,C.TYPE_CODE,'C_SHIPPING',a.[DIRECTION], c.[DESCRIPTION], c.[EFFECTIVE_START_DATE],c.[EFFECTIVE_END_DATE]
                     ,c.[STATUS_CODE],c.[STATUS_DATE],c.[COMMENTS],c.[VERIFICATION_IDR],c.[PRIMARY_IDR],c.[PREFERRED_IDR],c.[CREATED_DATE],c.[CREATED_BY],3,c.[VERSION]
                    FROM ADDRESSES a, CONTACTS c
                     WHERE a.IDF = @P_ADDRESS_IDF AND left(c.IDF,59) = left(@v_IDF,59)
        END
        ELSE IF @P_Action in ('UPD','UPDATE')
        BEGIN
                UPDATE  PERSONS Set PHONE = IsNull(@P_PHONE,PHONE),EMAIL = IsNull(@P_EMAIL,EMAIL),[PHONE_EXTENSION]= IsNull(@P_PHONE_EXTENSION, PHONE_EXTENSION), FAX = IsNull(@P_FAX,FAX), JOB = IsNull(@P_JOB,JOB), LAST_NAME = IsNull(@P_LAST_NAME,LAST_NAME), CATEGORY_CODE = IsNull(@P_CATEGORY_CODE,CATEGORY_CODE), TYPE_CODE = IsNull(@P_TYPE_CODE,TYPE_CODE),
                FIRST_NAME = IsNull(@P_FIRST_NAME,FIRST_NAME), MIDDLE_NAME = IsNull(@P_MIDDLE_NAME,MIDDLE_NAME), DESCRIPTION = IsNull(@P_DESCRIPTION,DESCRIPTION), COMMENTS = IsNull(@P_COMMENTS,COMMENTS),ACCESS_LEVEL = IsNull(@P_ACCESS_LEVEL,ACCESS_LEVEL), CONTACT_IDF = IsNull(@P_CONTACT_IDF,CONTACT_IDF), PREFERRED_NAME = IsNull(@P_PREFERRED_NAME,PREFERRED_NAME),
                [REFERENCE_ID] = IsNull(@P_REFERENCE_ID, [REFERENCE_ID]),[REFERENCE_NAME] = IsNull(@P_REFERENCE_NAME, [REFERENCE_NAME]), [VERIFICATION_IDR] = IsNull(@P_VERIFICATION_IDR, [VERIFICATION_IDR]), [ORGANIZATION_IDF] = IsNull(@P_ORGANIZATION_IDF, [ORGANIZATION_IDF]),[VERSION] = IsNull(@P_VERSION, [VERSION]),
                [UPDATED_DATE] = IsNull(@P_UPDATED_DATE, [UPDATED_DATE]),[UPDATED_BY] = IsNull(@P_USER, [UPDATED_BY]),[STATUS_DATE] = IsNull(@P_STATUS_DATE, [STATUS_DATE]),[STATUS_CODE] = IsNull(@P_STATUS, [STATUS_CODE]), [FEDERAL_IDR] = IsNull(@P_FEDERAL_IDR, [FEDERAL_IDR])
                WHERE IDF = @P_IDF
        END
        ELSE IF @P_Action in ('DEL','DELETE', 'REMOVE')
              DELETE FROM PERSONS WHERE IDF = @P_IDF
        ELSE
              THROW 81000, 'C_BAD_ACTION', 1
  END TRY
  BEGIN CATCH
        set @v_RV = 0
        ;THROW
  END CATCH
END
GO
GRANT EXECUTE ON [dbo].[sp_PERSON]
    TO NEOS_UserRole
GO

----- exec [dbo].[sp_PERSON] @P_NAME_CODE = 'TEST1', @P_REFERENCE_ID  = NULL, @P_REFERENCE_NAME  = 'My Test',  @ReturnValue = @Value

----  for the purpose of prefixing all the data prior to the formal data migration

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_UserID as varchar(128)= sUser_NAME(), @v_RV as int = 2
Declare @tblOrg as Table(LEVEL_I_NAME varchar(128) NULL)
Declare @tblOrg2 as Table(Level_II_NAME varchar(256) NULL, LEVEL_I_NAME varchar(256) NULL)
Declare @TempData as TABLE(ID Int NULL, PARENT_ID int Null, NAME_CODE varchar(512) null, IDF varchar(64) Null, CNT INT Null, ID_PHN varchar(128) NULL)

Print '------------- Data Migration  [dbo].[sc_Pre_Initialization]  -----Start: ' + cast(@v_SDATE as varchar(24))

INSERT INTO CODE_REGISTRATIONS(POSITION_ORDER, NAME_CODE, CLASS_CODE, [DESCRIPTION], [DB_ID],[DB_PARENT_ID], ACRONYM_NAME, AUDIT_IDR, CATEGORY_CODE, TYPE_CODE, VALUE_CODE, COMMENTS, REFERENCE_ID, REFERENCE_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT)
SELECT ROW_NUMBER() OVER(ORDER BY name ASC) AS Row_NUM, UPPER([NAME]), 'C_'+cast(OBJECT_ID as varchar(14)), [NAME], object_id, parent_object_id, '', 0, 'C_NEOS', 'C_'+left(type_desc,14), 'C_'+cast(OBJECT_ID as varchar(14)),'Initialied','',[NAME], @v_STATUS, @v_SDATE, create_date, @v_UserID, modify_date,@v_UserID,0 FROM SYS.OBJECTS where [type] ='U'

INSERT INTO CODE_REGISTRATIONS(POSITION_ORDER, NAME_CODE, CLASS_CODE, [DESCRIPTION], [DB_ID],[DB_PARENT_ID], ACRONYM_NAME, AUDIT_IDR, CATEGORY_CODE, TYPE_CODE, VALUE_CODE, COMMENTS, REFERENCE_ID, REFERENCE_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT)
SELECT ROW_NUMBER() OVER(ORDER BY [TYPE], [NAME] ASC) AS Row_NUM, UPPER([NAME]), 'C_'+cast(OBJECT_ID as varchar(14)), [NAME], object_id, parent_object_id, '', 1, 'C_NEOS', 'C_'+left(type_desc,14), 'C_'+cast(OBJECT_ID as varchar(14)),'Initialied','',[NAME], @v_STATUS, @v_SDATE, create_date, @v_UserID, modify_date,@v_UserID,0 FROM SYS.OBJECTS where [type] not in ('U','S')

if OBJECT_ID('CIOCSBK.DBO.SYM_PERSON_EXT') is NULL
BEGIN
    INSERT INTO SYM_PERSON_EXT       SELECT *, NULL,NULL,NULL,NULL,NULL,NULL, case WHEN right(RTRIM(email),7) in ('nih.gov','aac.gov') then left(email,CHARINDEX('@',email))+'nih.gov' else RTRIM(email) END, NULL FROM CIOCSBK.dbo.SYM_PERSON
    INSERT INTO SYM_ORGANIZATION_EXT SELECT *, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL ,NULL,NULL FROM CIOCSBK.dbo.SYM_ORGANIZATION
    INSERT INTO APX_USER_EXT         SELECT *, NULL,NULL, case WHEN right(RTRIM(USERNAME),7) in ('nih.gov','aac.gov') then left(USERNAME,CHARINDEX('@',USERNAME))+'nih.gov' else RTRIM(USERNAME) END FROM CIOCSBK.dbo.APX_USER
--- fix Phone errors
    UPDATE SYM_PERSON_EXT set EMAIL = RTRIM(LTRIM(isNull(EMAIL,'')))
    Update SYM_PERSON_EXT set EMAIL = 'berglm@mcc.gov' where Phone = '202-521-7879'
    Update SYM_PERSON_EXT set EMAIL = 'Tinu.Arowojolu@cms.hhs.gov' where EMAIL = 'Tinu.Arowojolu@cms.hhs.gov>'
    Update SYM_PERSON_EXT set EMAIL = 'donald.hadrick@psc.hhs.gov' where EMAIL = 'donald.hadrick@psc.hhs.gvo'
    UPDATE SYM_PERSON_EXT set EMAIL = PHONE, PHONE = EMAIL WHERE CHARINDEX('@', PHONE) > 1
    UPDATE SYM_PERSON_EXT SET PHONE = '703-591-5100X201' WHERE PHONE = '703-591-5100-201'
    UPDATE SYM_PERSON_EXT SET PHONE = '309-939-1134' WHERE PHONE = '3091-939-1134'
    UPDATE SYM_PERSON_EXT SET PHONE = '00'+PHONE WHERE Left(PHONE,2) = '49'
    UPDATE SYM_PERSON_EXT SET PHONE = '0'+PHONE WHERE Left(PHONE,3) = '049'
    UPDATE SYM_PERSON_EXT SET PHONE = replace(PHONE,'0711','0049711') WHERE Left(PHONE,4) = '0711'
    UPDATE SYM_PERSON_EXT SET PHONE = replace(PHONE,'01149','0049') WHERE Left(PHONE,5) = '01149'
    UPDATE SYM_PERSON_EXT SET PHONE = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(isNull(phone,''),'+',''),':',''),'=',''),'.',''),',',''),'ext','X'),'ex','X'),'Phone:',''),' ',''),'(',''),')',''),'-',''),'/','')
    UPDATE SYM_PERSON_EXT SET PHONE = SUBSTRING(PHONE, 1, LEN(PHONE)-1)    WHERE isNull(PHONE,'') <> '' and Left(Phone,1) = '1'
    UPDATE SYM_PERSON_EXT SET PHONE = left(left(PHONE,CharIndex('X',Phone)-1) + 'YYYYYYYYY',10) + SubString (PHONE,CharIndex('X',Phone),16)  WHERE isNull(PHONE,'') <> '' and Len(Phone) < 10  and  CharIndex('X',Phone) > 0
    UPDATE SYM_PERSON_EXT SET PHONE = left(PHONE + 'YYYYYYYYY',10)  WHERE isNull(PHONE,'') <> '' and CharIndex('X',Phone) < 10  and CharIndex('X',Phone) > 1
    UPDATE SYM_PERSON_EXT SET PHONE_EXTENSION = SUBSTRING(PHONE, CharIndex('X',Phone), 12 )  WHERE isNull(PHONE,'') <> '' and  CharIndex('X',Phone) > 0
    UPDATE SYM_PERSON_EXT SET PHONE_EXTENSION = SUBSTRING(PHONE, CharIndex('D',Phone), 10 )  WHERE isNull(PHONE,'') <> '' and  CharIndex('D',Phone) > 0
    UPDATE SYM_PERSON_EXT set ID_PHONE = LAST_NAME+':'+FIRST_NAME+':'+isNull(PHONE,'')
    UPDATE SYM_PERSON_EXT SET PHONE =  '('+Left(PHONE,3) +') '+ SUBSTRING(PHONE,4,3) +'-'+SUBSTRING(PHONE,7,32)  WHERE isNull(PHONE,'') <> '' and left(PHONE,2) <> '00'
    UPDATE SYM_PERSON_EXT SET PHONE =  Left(PHONE,4) +' ('+ SUBSTRING(PHONE,5,3)+') '+SUBSTRING(PHONE,8,3)+'-'+SUBSTRING(PHONE,11,32)  WHERE isNull(PHONE,'') <> '' and left(PHONE,2) = '00'

    UPDATE  SYM_PERSON_EXT SET FAX = dbo.fn_MG_Clean(FAX, Default) WHERE isNull(FAX,'') <> ''
  -- UPDATE  SYM_PERSON_EXT SET PHONE_EXTENSION = dbo.fn_MG_Clean(PHONE, 'C_PHONE_EXT')   WHERE CharIndex('X',PHONE) > 0

--- handle Organizations
    UPDATE e set LEVEL_I_NAME = p.LEVEL_I_NAME, ORG_TYPE = p.ORG_TYPE, LEVEL_I_IDF = p.IDF
    FROM  SYM_ORGANIZATION_EXT e INNER JOIN SYM_ORGANIZATION_EXT p on e.Parent_ID = p.ID
    WHERE isNull(e.LEVEL_I_NAME,'') = '' and isNull(p.LEVEL_I_NAME,'') <> ''

    UPDATE SYM_ORGANIZATION_EXT SET LEVEL_I_NAME = replace(LEVEL_I_NAME,' (SEC)','') WHERE  ORG_TYPE <> 'COMMERCIAL'  and charIndex('(SEC)' ,LEVEL_I_NAME) > 0
    UPDATE SYM_ORGANIZATION_EXT SET LEVEL_I_NAME = replace(LEVEL_I_NAME,'UNIVERSAL HI-TECH DEVELOPMENT INC','UNIVERSAL HI-TECH DEVELOPMENT, INC.') WHERE  ORG_TYPE = 'COMMERCIAL'  and charIndex('(HI-TECH DEVELOPMENT' ,LEVEL_I_NAME) > 0

    UPDATE SYM_ORGANIZATION_EXT SET LEVEL_II_NAME = replace(replace(Replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(LEVEL_II_NAME,'Contracts & Proposals','Contracts and Proposals'),'G&B Solutions','G&B'),'G&B Solutions Inc','G&B'),'Force 3 Inc','Force 3'),'Force 3, Inc.','Force 3'),'Blue Tech Inc.','Blue Tech'),'Blue Tech Inc','Blue Tech'),'IMS Health, Inc','IMS Health'),'IMS Health, Inc.','IMS Health'),'Technology Solutions & Services Inc.','Technology Solutions & Services Inc'),'KSH Solutions, Inc','KSH Solutions'),'Marshall Communications Corp.','Marshall Communications'),'Mount Airey Group, Inc.','Mount Airey Group'),' Ops',' Operations'),'Managment','Management'),'Mgmt','Management'),'Developmente','Development'),'BusOps','Business Operations'),'Intelligence & Security','Intelligence and Security'),'Acquisitions, Inc','Acquisitions, Inc.'),'Acquisitions Inc.','Acquisitions, Inc.'),'Alvarez Associates','Alvarez and Associates'),'Alvarez & Associates','Alvarez and Associates'),'Defense Agenct','Defense Agency'),'Engilty','Engility'),' (HHS)',''),'Businss','Business'),'Devlopment','Development'),'Develoopment','Development'),'Dev.','Development'),'Deelopment','Development')
    UPDATE SYM_ORGANIZATION_EXT SET LEVEL_II_NAME = replace(replace(replace(replace(replace(replace(replace(replace(LEVEL_II_NAME,'Mount Airey Group','Mount Airey Group, Inc.'),'Marshall Communications','Marshall Communications Corp.'),'KSH Solutions','KSH Solutions, Inc.'),'Technology Solutions & Services Inc','Technology Solutions & Services, Inc.'),'Blue Tech','Blue Tech Inc.'),'Force 3','Force 3, Inc.'),'IMS Health','IMS Health, Inc.'),'G&B','G&B Solutions, Inc.') WHERE isNull(LEVEL_II_NAME,'')<>''

    UPDATE SYM_ORGANIZATION_EXT set LEVEL_V_NAME = LEVEL_III_NAME, LEVEL_IV_NAME = LEVEL_II_NAME, LEVEL_III_NAME = LEVEL_I_NAME, LEVEL_II_NAME = 'Department of Labor', LEVEL_I_NAME = 'Executive Branch'
    WHERE LEVEL_I_NAME = 'Pension Benefit Guaranty Corporation'

    INSERT INTO @tblOrg   SELECT LTRIM(RTRIM(LEVEL_I_NAME)) FROM SYM_ORGANIZATION_EXT WHERE ORG_TYPE = 'ORGANIZATION' AND isNull(LEVEL_II_NAME,'')=''
    INSERT INTO @tblOrg2 SELECT DISTINCT p.LEVEL_I_NAME, c.LEVEL_I_NAME from SYM_ORGANIZATION_EXT p INNER JOIN SYM_ORGANIZATION_EXT c on p.LEVEL_I_NAME = c.LEVEL_II_NAME
    WHERE p.ORG_TYPE <> 'COMMERCIAL' AND c.ORG_TYPE <> 'COMMERCIAL' ORDER BY p.LEVEL_I_NAME

    UPDATE e  SET e.LEVEL_V_NAME = e.LEVEL_IV_NAME,e.LEVEL_IV_NAME = e.LEVEL_III_NAME, e.LEVEL_III_NAME = e.LEVEL_II_NAME, e.LEVEL_II_NAME = e.LEVEL_I_NAME, e.LEVEL_I_NAME = t.LEVEL_I_NAME
    From SYM_ORGANIZATION_EXT e inner join @tblOrg2 t on e.LEVEL_I_NAME = t.LEVEL_II_NAME
    WHERE e.LEVEL_I_NAME NOT IN (SELECT LEVEL_I_NAME FROM @tblOrg ) and e.ORG_TYPE <> 'COMMERCIAL'

    Update SYM_ORGANIZATION_EXT set LEVEL_V_NAME = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(LEVEL_V_NAME,'U. S. Army Medical Research Acquisition Activity','U.S. Army Medical Research Acquisition Activity (USAMRAA)'),'RTP Procurement Ops.','RTP Procurement Opersations Division'),'Procurement and Grants Office','Procurement and Grants Office (PGO)'),'Phoenix Indian Medical Center','Phoenix Indian Medical Center (PIMC)'),'Office of Small & Disadvantaged Business Utilization (OSDBU)','Office of Small and Disadvantaged Business Utilization'),'Procurment','Procurement'),'Office of Acquisitions and Grant Service (OAGS)','Office of Acquisitions and Grant Services (OAGS)'),'Office of Acquisitions and Grants Services','Office of Acquisitions and Grant Services (OAGS)'),'Office of Acquisitions and Grant Services','Office of Acquisitions and Grant Services (OAGS)'),'Office of Acquisition Services','Office of Acquisition Services (OAS)'),'Office of Acquisition Service','Office of Acquisition Services (OAS)'),'NCRBSC - Acquisition','NCRBSC-Acquisitions'),'Navy Medical Center San Diego','Naval Medical Center, San Diego'),'Naval Research Laboratory','Naval Research Laboratory, Code 5762'),'Naval Research Lab','Naval Research Laboratory, Code 5762'),'Naval Medical Center San Diego','Naval Medical Center, San Diego'),'ITCG, DDCC','ITCG-DDCC'),'Information Technology Service Office','Information Technology Services Office'),'HPOD/IRMPSC','HPOD-IRMPSC'),'Engineeering','Engineering'),'DON/AA','DON AA'),'Division of Procurement Services','Division of Procurement'),'Division of Contracts Management','Division of Contracts Management (DCM)'),'Contracts & Grants Management Division','Contracts & Grants Management'),'Contract Operations Division, Aurora','Contract Operations Division-Aurora'),'COD/SA','COD-SA'),'Chief Information Officer','Chief Information Office'),'Assisted Acquisition Service','Assisted Acquisition Services'),'Assistant for Administration, Contract Management Division','Assistant for Administration-Contract Management Division'),'Army Contracting Command Rock Island','Army Contracting Command-Rock Island'),'- ','-'),' -','-'),'Acquisitions Branch','Acquisitions Branch (BCN)'),'766 SCONS','766th SCONS'),'10CONS/LGCB','10 CONS/LGCB')
    WHERE isNull(LEVEL_V_NAME,'') <> ''

    UPDATE SYM_ORGANIZATION_EXT SET NOTE_TEXT = isNull(LTRIM(RTRIM(LEVEL_I_NAME)),'')+':'+isNull(LTRIM(RTRIM(LEVEL_II_NAME)),'')+':'+isNull(LTRIM(RTRIM(LEVEL_III_NAME)),'')+':'+isNull(LTRIM(RTRIM(LEVEL_IV_NAME)),'') + ':' + isNull(LTRIM(RTRIM(LEVEL_V_NAME)),'')

------ Install federal organization
    if Object_ID(N'CIOCSBK.dbo.FED_AGENCY_LIST') is not null
    BEGIN
        UPDATE  CIOCSBK.[dbo].[FED_AGENCY_LIST] set [GSA SFP Name] = [GSA SFP Name] + ' Duplicated' where [GSA SFP Key] in (1752, 1795) AND  [GSA SFP Name] not like '% Duplicated'

        if Object_ID(N'CIOCSBK.dbo.FEDERAL_ORGANIZATIONS_EXT') is null
        BEGIN
                INSERT ORGANIZATIONS(IDF, NAME_CODE, ASSOCIATED_NAME, CATEGORY_CODE, ACRONYM_NAME, REFERENCE_CODE, REFERENCE_NAME, VALUE_CODE, TYPE_CODE, [DESCRIPTION], COMMENTS, FEDERAL_IDR, VERIFICATION_IDR)
                SELECT dbo.fn_NewIDFExt('ORGFC',default,cast([GSA SFP Key] as varchar(5))), [GSA SFP Name], IsNull([NIST NAME],isNULL([OMB NAME],[Treasury bureau name])), 'C_CUSTOMER',  dbo.fn_MG_SeekAlias([GSA SFP Name],'(','GET'),'OAC_' + cast([OMB Agency Code] as varchar(10)), Parent, 'FC_'+cast([GSA SFP Key] as varchar(14)), 'C_'+ UPPER([GSA SFP Entity Type]), [OMB NAME], [Treasury bureau name], 1, 1
                FROM CIOCSBK.[dbo].[FED_AGENCY_LIST] order by [GSA SFP Key]

                INSERT INTO FEDERAL_ORGANIZATIONS (IDF, NAME_CODE, ASSOCIATED_NAME, CATEGORY_CODE, ACRONYM_NAME, CLASS, LEVEL_DEPTH, REFERENCE_CODE, REFERENCE_NAME, VALUE_CODE, TYPE_CODE, [DESCRIPTION], COMMENTS, VERIFICATION_IDR)
                SELECT o.IDF, o.NAME_CODE, o.ASSOCIATED_NAME, o.CATEGORY_CODE, o.ACRONYM_NAME, f.[GSA SFP Key], CASE WHEN f.PARENT = '[Branch]' or f.PARENT = '[Bucket]' THEN 1 ELSE NULL end, o.REFERENCE_CODE, o.REFERENCE_NAME, o.VALUE_CODE, o.TYPE_CODE, o.[DESCRIPTION], o.[COMMENTS], o.VERIFICATION_IDR
                FROM ORGANIZATIONS o INNER JOIN CIOCSBK.[dbo].[FED_AGENCY_LIST] f on 'FC_' + cast(f.[GSA SFP Key] as varchar(10)) = o.VALUE_CODE

                UPDATE FEDERAL_ORGANIZATIONS SET CATEGORY_CODE =
                CASE NAME_CODE
                WHEN   'Federal Executive Branch'      THEN  'C_EXECUTIVE'
                WHEN   'Federal Legislative Branch'    THEN  'C_LEGISLATIVE'
                WHEN   'Federal Judicial Branch'       THEN  'C_JUDICIAL'
                ELSE             'C_OTHER'  END,
                TYPE_CODE =
                CASE NAME_CODE
                WHEN   'Federal Executive Branch'      THEN  'C_BRANCH'
                WHEN   'Federal Legislative Branch'    THEN  'C_BRANCH'
                WHEN   'Federal Judicial Branch'       THEN  'C_BRANCE'
                ELSE                                         'C_BUCKET'  END
                WHERE LEVEL_DEPTH = 1


                UPDATE FEDERAL_ORGANIZATIONS SET ACRONYM_NAME = 'EWC' WHERE [NAME_CODE] like '%East-West Center) (EWC)'
                UPDATE FEDERAL_ORGANIZATIONS SET ACRONYM_NAME = '' WHERE [ACRONYM_NAME] = 'Brand USA'

                UPDATE o SET LEVEL_DEPTH = 2, LEVEL_I_NAME = p.NAME_CODE, LEVEL_I_IDF = p.IDF, PARENT_IDF = p.IDF, CATEGORY_CODE = p.CATEGORY_CODE, TYPE_CODE =
                CASE p.CATEGORY_CODE
                WHEN  'C_EXECUTIVE'     THEN 'C_DEPARTMENT'
                WHEN  'C_LEGISLATIVE'   THEN 'C_CONGRESS'
                WHEN  'C_JUDICIAL'      THEN 'C_COURT'
                ELSE                         o.TYPE_CODE END
                FROM  FEDERAL_ORGANIZATIONS o inner join FEDERAL_ORGANIZATIONS p on o.REFERENCE_NAME = p.NAME_CODE
                WHERE o.level_depth is null and  p.Level_depth = 1

                UPDATE o SET LEVEL_DEPTH = 3, LEVEL_I_NAME = p.LEVEL_I_NAME, LEVEL_I_IDF = p.LEVEL_I_IDF, LEVEL_II_NAME = p.NAME_CODE, LEVEL_II_IDF = p.IDF, PARENT_IDF = p.IDF, CATEGORY_CODE = p.CATEGORY_CODE, TYPE_CODE  =
                CASE p.CATEGORY_CODE
                WHEN  'C_EXECUTIVE'     THEN 'C_AGENCY'
                ELSE   o.TYPE_CODE END
                FROM  FEDERAL_ORGANIZATIONS o inner join FEDERAL_ORGANIZATIONS p on o.REFERENCE_NAME = p.NAME_CODE
                WHERE o.level_depth is null and p.Level_depth = 2

                WHILE @v_RV > 1          -- loop through all agency level entities
                BEGIN
                        UPDATE o SET PARENT_IDF = p.IDF, LEVEL_DEPTH = 3, CATEGORY_CODE = p.CATEGORY_CODE, TYPE_CODE = p.TYPE_CODE, LEVEL_I_NAME = p.LEVEL_I_NAME, LEVEL_I_IDF = p.LEVEL_I_IDF, LEVEL_II_NAME = p.LEVEL_II_NAME, LEVEL_II_IDF = p.LEVEL_II_IDF, LEVEL_III_NAME = case when isnull(p.LEVEL_III_NAME,'') = '' THEN p.NAME_CODE ELSE  p.LEVEL_III_NAME + '/'+ p.NAME_CODE END, LEVEL_III_IDF = p.IDF
                        FROM  FEDERAL_ORGANIZATIONS o inner join FEDERAL_ORGANIZATIONS p on o.REFERENCE_NAME = p.NAME_CODE
                        WHERE o.level_depth is null and p.Level_depth = 3
                        SELECT @v_RV = count(*) from  FEDERAL_ORGANIZATIONS WHERE LEVEL_DEPTH is null and Reference_Name is not null
                END

        --- remove Alias
            UPDATE FEDERAL_ORGANIZATIONS SET NAME_CODE =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(NAME_CODE,'(','DEL'),ACRONYM_NAME+' ','DEL') where isNull(ACRONYM_NAME,'') <> ''
            UPDATE f SET REFERENCE_NAME =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.REFERENCE_NAME,'(','DEL'),p.ACRONYM_NAME+' ','DEL')
            FROM  FEDERAL_ORGANIZATIONS f inner join FEDERAL_ORGANIZATIONS p on f.REFERENCE_NAME = p.NAME_CODE
            UPDATE f SET LEVEL_II_NAME =   dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.LEVEL_II_NAME,'(','DEL'),p.ACRONYM_NAME+' ','DEL'),   NAME_CODE =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.NAME_CODE,'(','DEL'),p.ACRONYM_NAME+' ','DEL')
            FROM  FEDERAL_ORGANIZATIONS f inner join FEDERAL_ORGANIZATIONS p on f.LEVEL_II_IDF = p.IDF  where isNull(p.ACRONYM_NAME,'') <> '' and isNull(f.LEVEL_II_NAME,'') <> ''
            UPDATE f SET LEVEL_III_NAME =   dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.LEVEL_III_NAME,'(','DEL'),p.ACRONYM_NAME+' ','DEL'), NAME_CODE =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.NAME_CODE,'(','DEL'),p.ACRONYM_NAME+' ','DEL')
            FROM  FEDERAL_ORGANIZATIONS f inner join FEDERAL_ORGANIZATIONS p on f.LEVEL_III_IDF = p.IDF  where isNull(p.ACRONYM_NAME,'') <> '' and isNull(f.LEVEL_III_NAME,'') <> ''
            UPDATE f SET LEVEL_III_NAME =   dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.LEVEL_III_NAME,'(','DEL'),p.ACRONYM_NAME+' ','DEL'), NAME_CODE =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.NAME_CODE,'(','DEL'),p.ACRONYM_NAME+' ','DEL')
            FROM  FEDERAL_ORGANIZATIONS f inner join FEDERAL_ORGANIZATIONS p on f.PARENT_IDF = p.IDF  where isNull(p.ACRONYM_NAME,'') <> '' and isNull(f.LEVEL_III_NAME,'') <> '' and p.LEVEL_DEPTH = 3
            UPDATE f SET LEVEL_IV_NAME =   dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.LEVEL_IV_NAME,'(','DEL'),p.ACRONYM_NAME+' ','DEL'),   NAME_CODE =  dbo.fn_MG_SeekAlias(dbo.fn_MG_SeekAlias(f.NAME_CODE,'(','DEL'),p.ACRONYM_NAME+' ','DEL')
            FROM  FEDERAL_ORGANIZATIONS f inner join FEDERAL_ORGANIZATIONS p on f.LEVEL_IV_IDF = p.IDF  where isNull(p.ACRONYM_NAME,'') <> '' and isNull(f.LEVEL_IV_NAME,'') <> ''

            UPDATE o set PARENT_IDF = f.PARENT_IDF, PARENT_CODE = f.PARENT_CODE, ACRONYM_NAME = f.ACRONYM_NAME, CATEGORY_CODE = f.CATEGORY_CODE, TYPE_CODE = f.TYPE_CODE, VERIFICATION_IDR = f.VERIFICATION_IDR, REFERENCE_ID =  f.REFERENCE_ID, REFERENCE_NAME =  f.REFERENCE_NAME, REFERENCE_CODE =  f.REFERENCE_CODE, VALUE_CODE = f.VALUE_CODE
            FROM ORGANIZATIONS o inner join FEDERAL_ORGANIZATIONS f on o.IDF= f.IDF

                SELECT @v_RV = Max(CLASS) from  FEDERAL_ORGANIZATIONS
                INSERT ORGANIZATIONS(IDF, PARENT_IDF, NAME_CODE, ASSOCIATED_NAME, ACRONYM_NAME, REFERENCE_CODE, REFERENCE_NAME, VALUE_CODE, CATEGORY_CODE, TYPE_CODE, [DESCRIPTION], COMMENTS, FEDERAL_IDR, VERIFICATION_IDR)
                SELECT dbo.fn_NewIDFExt('ORGFC',default,cast((Class+@v_RV) as varchar(6))), IDF, 'OTHER', 'OTHERS For ' + NAME_CODE, 'OTH', 'C_DEFAULT', NAME_CODE,'FC_' + cast ((Class + @V_RV) as varchar(16)), 'C_CUSTOMER', 'C_OFFICE', 'Default Office which is not listed yet.', 'Provided an default office as Other',1,1
                FROM  FEDERAL_ORGANIZATIONS WHERE LEVEL_DEPTH = 3 order by CLASS

                INSERT INTO FEDERAL_ORGANIZATIONS (IDF, NAME_CODE, ASSOCIATED_NAME, PARENT_IDF, ACRONYM_NAME, CLASS, LEVEL_DEPTH, REFERENCE_CODE, REFERENCE_NAME, CATEGORY_CODE, VALUE_CODE, TYPE_CODE, [DESCRIPTION], COMMENTS, LEVEL_I_NAME, LEVEL_I_IDF, LEVEL_II_NAME, LEVEL_II_IDF, LEVEL_III_NAME, LEVEL_III_IDF, VERIFICATION_IDR)
                SELECT  o.IDF, o.NAME_CODE, o.ASSOCIATED_NAME, o.PARENT_IDF, o. ACRONYM_NAME, cast(replace(o.VALUE_CODE,'FC_','') as INT), 4, o.REFERENCE_CODE, o.REFERENCE_NAME, o.VALUE_CODE, 'C_CUSTOMER', o.TYPE_CODE, o.DESCRIPTION, o.COMMENTS, p.LEVEL_I_NAME, p.LEVEL_I_IDF, p.LEVEL_II_NAME, p.LEVEL_II_IDF, case when isNull(p.LEVEL_III_NAME,'') = '' THEN p.NAME_CODE ELSE p.LEVEL_III_NAME + '/' + p.NAME_CODE END, p.IDF, o.VERIFICATION_IDR
                FROM ORGANIZATIONS o INNER JOIN FEDERAL_ORGANIZATIONS p on o.PARENT_IDF = p.IDF
                WHERE p.LEVEL_DEPTH = 3 and o.TYPE_CODE = 'C_OFFICE'

                UPDATE o SET REFERENCE_CODE = f.REFERENCE_CODE, REFERENCE_NAME = f.REFERENCE_NAME, VALUE_CODE = f.VALUE_CODE, VERIFICATION_IDR = f.VERIFICATION_IDR, CATEGORY_CODE = f.CATEGORY_CODE
                FROM ORGANIZATIONS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.IDF = f.IDF  WHERE f.TYPE_CODE = 'C_OFFICE'

                UPDATE FEDERAL_ORGANIZATIONS SET NOTE_TEXT = isNull(LEVEL_I_NAME,'') +':'+isNull(LEVEL_II_NAME,'') +':'+isNull(LEVEL_III_NAME,'') +':'+isNull(LEVEL_IV_NAME,'')+':'
                UPDATE o SET NOTE_TEXT = f.NOTE_TEXT
                FROM ORGANIZATIONS o INNER JOIN FEDERAL_ORGANIZATIONS f on f.IDF = o.IDF

                SELECT * INTO CIOCSBK.dbo.FEDERAL_ORGANIZATIONS_EXT FROM FEDERAL_ORGANIZATIONS
        END
        ELSE
        BEGIN
                INSERT INTO [dbo].[ORGANIZATIONS]([IDF],[NAME_CODE],[ASSOCIATED_NAME],[ACRONYM_NAME],[VALUE_CODE],[INTERNET_DOMAIN],[FEDERAL_IDR],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF],[CONTACT_IDF],[NOTE_TEXT])
                SELECT [IDF],[NAME_CODE],[ASSOCIATED_NAME],[ACRONYM_NAME],[VALUE_CODE],[INTERNET_DOMAIN],1,[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],1,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF],[CONTACT_IDF],[NOTE_TEXT] FROM CIOCSBK.dbo.FEDERAL_ORGANIZATIONS_EXT
                INSERT INTO FEDERAL_ORGANIZATIONS SELECT * FROM CIOCSBK.dbo.FEDERAL_ORGANIZATIONS_EXT
        END
    END

----Deal with Person
    INSERT INTO @TempData(NAME_CODE, IDF, CNT)
    SELECT ID_EMAIL, dbo.fn_NewIDF('PER',default), Count(*) FROM SYM_PERSON_EXT Group By ID_EMAIL
    UPDATE e SET IDF = t.IDF FROM SYM_PERSON_EXT e INNER JOIN @TempData t on t.NAME_CODE = e.ID_EMAIL
    UPDATE t set ID= (Select Top 1 ID FROM SYM_PERSON_EXT  where IDF = t.IDF and ID_Email is not null ORDER BY ID) FROM SYM_PERSON_EXT e INNER JOIN @TempData t on t.IDF = e.IDF
    UPDATE e set IDX = 3 FROM SYM_PERSON_EXT e INNER JOIN @TempData t on t.ID = e.ID
    UPDATE SYM_PERSON_EXT Set IDX = 2 where IDX is null
---- Shrink the current by ID_PHONE
    DELETE @TempData
    INSERT INTO @TempData (NAME_CODE, cnt)
    SELECT ID_PHONE, count(*) From SYM_PERSON_EXT where IDX = 3 GROUP BY ID_PHONE

    UPDATE t SET t.IDF = (select TOP 1 IDF from SYM_PERSON_EXT where ID_PHONE = t.NAME_CODE and IDX=3 order by ID) FROM SYM_PERSON_EXT e inner join @TempData t on t.NAME_CODE = e.ID_PHONE where e.IDX = 3
    UPDATE e SET IDX = 1 from SYM_PERSON_EXT e inner join @TempData t on t.NAME_CODE = e.ID_PHONE and e.IDF = t.IDF where e.IDX = 3
    UPDATE SYM_PERSON_EXT set USER_IDF = IDF where IDX = 3
    UPDATE e set e.IDF = t.IDF from SYM_PERSON_EXT e INNER JOIN @TempData t on t.NAME_CODE = e.ID_PHONE WHERE e.IDX = 3
    UPDATE e set e.IDF = t.IDF from SYM_PERSON_EXT e INNER JOIN SYM_PERSON_EXT t on e.IDF = t.USER_IDF and t.IDX = 3 WHERE e.IDX = 2
    UPDATE SYM_PERSON_EXT set USER_IDF = NULL where IDX = 3

    UPDATE SYM_PERSON_EXT set ORG_ID = (SELECT TOP 1 e.ORG_ID FROM SYM_PERSON_EXT e where e.IDF = IDF and e.ORG_ID is not null)  WHERE ORG_ID is null
    UPDATE SYM_PERSON_EXT set ADDRESS_ID = (SELECT TOP 1 e.ADDRESS_ID FROM SYM_PERSON_EXT e where e.IDF = IDF and e.ADDRESS_ID is not null order by e.ID) WHERE ADDRESS_ID is null
    UPDATE SYM_PERSON_EXT set SHIPPING_ADDRESS_ID = (SELECT TOP 1 e.SHIPPING_ADDRESS_ID FROM SYM_PERSON_EXT e where e.IDF = IDF and e.SHIPPING_ADDRESS_ID is not null order by e.ID) WHERE SHIPPING_ADDRESS_ID is null

    SELECT * INTO CIOCSBK.DBO.SYM_ORGANIZATION_EXT FROM SYM_ORGANIZATION_EXT
    SELECT * INTO CIOCSBK.DBO.SYM_PERSON_EXT       FROM SYM_PERSON_EXT
    SELECT * INTO CIOCSBK.DBO.APX_USER_EXT         FROM APX_USER_EXT

END
ELSE
BEGIN
        INSERT INTO SYM_ORGANIZATION_EXT SELECT * FROM  CIOCSBK.DBO.SYM_ORGANIZATION_EXT
        INSERT INTO SYM_PERSON_EXT       SELECT * FROM  CIOCSBK.DBO.SYM_PERSON_EXT
        INSERT INTO APX_USER_EXT         SELECT * FROM  CIOCSBK.DBO.APX_USER_EXT
END
GO
------ fix GSS   temp
if OBJECT_ID('CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT') is NULL
BEGIN
   Select * into CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT from CIOCSBK.dbo.GSS_SOLUTION_PRODUCT

   ALTER TABLE CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT ADD DESCRIPTION VARCHAR(255) NULL
   UPDATE CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT set DESCRIPTION = OEM_PART_NUM, OEM_PART_NUM = NULL
   WHERE OEM_PART_NUM like '%include%' or OEM_PART_NUM like '%Integrate%' or OEM_PART_NUM like '%MSOffice%' or OEM_PART_NUM like '%MSOffice%'
   UPDATE CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT set OEM_PART_NUM = replace(replace(replace(replace(replace(OEM_PART_NUM,'PART#:',''),char(160),''),' ',''),',',';'),';;',';')
   WHERE isNull(OEM_PART_NUM,'') > ''
   Update CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT SET OEM_PART_NUM = dbo.fn_NewIDFExt('FAKE',default,default)
   WHERE isNull(OEM_PART_NUM,'') = ''

   Update CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT SET OEM_MFR_NAME = 'UNKNOWN:MFR'
   WHERE isNull(OEM_MFR_NAME,'') = ''

   Declare @tblOEM as Table(NUM varchar(128) NULL, NAME_CODE varchar(256) NULL, CNT INT NULL)
   INSERT INTO @tblOEM(NUM, NAME_CODE, CNT)
   Select OEM_PART_NUM, OEM_MFR_NAME, count(*)  FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT group by OEM_PART_NUM, OEM_MFR_NAME having count(*) > 1

   UPDATE e set e.OEM_PART_NUM = e.OEM_PART_NUM +':'+e.NITAAC_CLIN
   FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT e inner join @tblOEM o on o.NUM = e.OEM_PART_NUM AND o.NAME_CODE = e.OEM_MFR_NAME
END
Print '------------- Data Migration  [dbo].[sc_Pre_Initialization]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Base_Core_init]
Print '------------- Data Migration  [dbo].[sc_Base_Core_init]  -----START: ' + cast(GetDate() as varchar(24))
-------------
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)=NULL, @v_Code as varchar(16) = 'C_PARENT'

INSERT INTO [dbo].[CODE_APPLICATIONS]([IDF],[URL] ,[ADMIN_URL],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],
       [COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[EFFECTIVE_START_DATE],[POSITION_ORDER], VERSION)
SELECT dbo.fn_NEWIDFExt('NEOS',CREATED_WHEN,+cast([ID] as varchar(16))),[APP_URL],[IMAGE_PATH],[NAME],
       case ABBR
       when 'CIO-SP2i'                THEN 'C_SP2I'
       when 'ECS III'                 THEN 'C_ECS3'
       when 'LTASC'                   THEN 'C_LTASC'
       when 'IW2nd'                   THEN 'C_IW2ND'
       when 'CIO-SP3'                 THEN 'C_SP3'
       when 'CIO-SP3SB'               THEN 'C_SP3SB'
       when 'CIO-CS'                  THEN 'C_CS'
       else                           'C_OTHER' end,UPPER(replace(replace(replace([ABBR],'CIO-',''),' ',''),'III','3')),'C_NEOS','C_WEB',[NAME],[SUPPORT_EMAIL],
       @v_STATUS, @v_SDATE, 'Migrated From  SYM_GWAC: on Date:' + cast(@v_SDATE as varchar(24)),'SYM_GWAC:'+cast([ID] as varchar(16)),'SYM_GWAC',1,[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],1,744,[CREATED_WHEN],ID, 'VERSION:'+cast([VERSION] as varchar(16))
FROM CIOCSBK.dbo.SYM_GWAC

INSERT INTO [dbo].[CODE_APPLICATIONS]([IDF],[URL] ,[ADMIN_URL],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],
           [COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY] ,[ACCESS_LEVEL],[EFFECTIVE_START_DATE],[POSITION_ORDER]) VALUES
           (dbo.fn_NEWIDF('NEOS',default),'WWW.NEOS.NIH.GOV','ADMIN.NEOS.NIH.GOV','NEOS Enterprise Base','C_NEOS','NEOS','C_NEOS','C_ENTERPRISE', 'NEOS Default Enterprise Base','',@v_STATUS,@v_SDATE,'', '','',1,@v_SDATE,@v_User,744, @v_SDATE,1)
SELECT @v_IDF = IDF FROM [dbo].[CODE_APPLICATIONS] where VALUE_CODE = 'C_NEOS'
INSERT INTO [dbo].[CODE_APPLICATIONS]([IDF],[URL] ,[ADMIN_URL],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],
           [COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY] ,[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[EFFECTIVE_START_DATE],[POSITION_ORDER]) VALUES
           ('APP__'+RIGHT(@v_IDF,59),'WWW.NEOS.NIH.GOV','ADMIN.NEOS.NIH.GOV','NEOS Applications', 'C_NEOS_APP',      'APP', 'C_NEOS','C_APPLICATION',      'NEOS Applications over Cloud',        'NEOSSupport@NIH.GOV',@v_STATUS,@v_SDATE,'', '','',1, @v_SDATE,@v_User,744,@v_Code,@v_IDF, @v_SDATE,1),
           ('DB___'+RIGHT(@v_IDF,59),'WWW.NEOS.NIH.GOV','ADMIN.NEOS.NIH.GOV','NEOS Databases',    'C_NEOS_DATABASE', 'DB',  'C_NEOS','C_DATABAE',          'NEOS Databases over Cloud',           'NEOSSupport@NIH.GOV',@v_STATUS,@v_SDATE,'', '','',1, @v_SDATE,@v_User,744,@v_Code,@v_IDF, @v_SDATE,2),
           ('SVC__'+RIGHT(@v_IDF,59),'WWW.NEOS.NIH.GOV','ADMIN.NEOS.NIH.GOV','NEOS Services',     'C_NEOS_SERVICE',  'SVC', 'C_NEOS','C_SERVICE',          'NEOS Services over Cloud',            'NEOSSupport@NIH.GOV',@v_STATUS,@v_SDATE,'', '','',1, @v_SDATE,@v_User,744,@v_Code,@v_IDF, @v_SDATE,3)

SELECT @v_IDF = IDF FROM [dbo].[CODE_APPLICATIONS] where VALUE_CODE = 'C_NEOS_APP'
INSERT INTO [dbo].[CODE_APPLICATIONS]([URL] ,[ADMIN_URL],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],
           [COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY] ,[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[EFFECTIVE_START_DATE],[POSITION_ORDER]) VALUES
           ('WWW.NEOS.NIH.GOV',      'ADMIN.NEOS.NIH.GOV',  'NEOS GSS Application',       'C_GSS',         'GSS',    'C_NEOS','C_WEB',      'NEOS CHIEF INFORMATION OFFICER - GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) over Cloud',   'NITAACsupport@nih.gov',@v_STATUS,@v_SDATE,'', '','',1, @v_SDATE,@v_User,744,@v_Code,@v_IDF, @v_SDATE,1),
           ('WWW.ETIMS.OD.NIH.GOV',  'WWW.ETIMS.OD.NIH.GOV','NEOS ETIMS Web Application', 'C_ETIMS',       'ETIMS',  'C_NEOS','C_WEB',      'NEOS CHIEF INFORMATION OFFICER - SOLUTIONS AND PARTENERS 3 (CIO-SP3) over Cloud',         'NITAACsupport@nih.gov',@v_STATUS,@v_SDATE,'', '','',1, @v_SDATE,@v_User,744,@v_Code,@v_IDF, @v_SDATE,2)

UPDATE CODE_APPLICATIONS SET NAME_CODE = 'NEOS CS Application', DESCRIPTION =  'NEOS CHIEF INFORMATION OFFICER - COMMODITIES/SOLUTIONS (CS) over Cloud', PARENT_IDF = @v_IDF, PARENT_CODE = @v_Code, NOTE_TEXT = 'NITAACsupport@nih.gov'
WHERE VALUE_CODE = 'C_CS'
UPDATE CODE_APPLICATIONS SET URL = 'WWW.ECSIII.OD.NIH.GOV', ADMIN_URL = 'WWW.ECSIII.OD.NIH.GOV'
WHERE VALUE_CODE = 'C_ECS3'

UPDATE [dbo].[CODE_APPLICATIONS] SET PARENT_IDF = @v_IDF, PARENT_CODE = @v_Code, IDF =  left([ACRONYM_NAME]+'___',5) + RIGHT(IDF,59)
WHERE  TYPE_CODE = 'C_WEB'

INSERT INTO SYSTEM_MAINTENANCES([APPLICATION_IDF],[NOTE_TEXT],[PRIORITY_CODE],[ACTION_TYPE],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL])
       SELECT IDF, 'Sync Process for DB SYNC', 'C_NORMAL', 'C_SCHEDULE','SYNC PROCESS JOB', 'C_SYNC_PROCESS', 'SYNC','C_PROCESS','C_SYNC','C_MAINTAIN','Required to sync data acriss databases', [EFFECTIVE_START_DATE],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],1,[CREATED_DATE],[CREATED_BY],ACCESS_LEVEL
       FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS'

select @v_IDF = IDF from [dbo].[CODE_APPLICATIONS] where VALUE_CODE = 'C_NEOS_APP'
insert into dbo.REF_NITAAC_DEFINITIONS(NAME_CODE, ACRONYM_NAME, VALUE_CODE, [DESCRIPTION], CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, COMMENTS, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, VERSION, APPLICATION_IDF,  MASK_VALUE, POSITION_ORDER)
SELECT  [DESCRIPTION],
        CASE [CODE]
        WHEN 's'                THEN 'SB'
        WHEN 'o'                THEN 'NSB'
        WHEN 'b'                THEN 'NDIS'
        WHEN 'd'                THEN 'DIS'
        WHEN 'v'                THEN 'VO'
        WHEN 'w'                THEN 'WO'
        WHEN 'dv'               THEN 'SDVO'
        WHEN '8a'               THEN '8A'
        WHEN 'h'                THEN 'HUBZ'
        WHEN 'nao'              THEN 'NAO'
        WHEN 'ano'              THEN 'ANO'
        ELSE                         'OTH' END,
        case [Code]
        WHEN 's'                THEN 'C_SB'
        WHEN 'o'                THEN 'C_NON_SB'
        WHEN 'b'                THEN 'C_NON_DIS'
        WHEN 'd'                THEN 'C_DIS'
        WHEN 'v'                THEN 'C_VO'
        WHEN 'w'                THEN 'C_WO'
        WHEN 'dv'               THEN 'C_SDVO'
        WHEN '8a'               THEN 'C_8A'
        WHEN 'h'                THEN 'C_HUBZONE'
        WHEN 'nao'              THEN 'C_NAO'
        WHEN 'ano'              THEN 'C_ANO'
        ELSE                         'C_OTHER' END, [DESCRIPTION],
        'C_CONTRACTOR','C_SBA',@v_STATUS, @v_SDATE, 'Migrated From SYM_SBA_DESIGNATION on Date:'+cast(@v_SDATE as varchar(20)),'C_SBA','SYM_SBA_DESIGNATION:'+cast(ID as varchar(10)),'SYM_SBA_DESIGNATION:'+[CODE],[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],1, 'VERSION:' + CAST([VERSION] as varchar(12)), @v_IDF, ID, ROW_NUMBER() OVER(ORDER BY ID)
FROM [CIOCSBK].[dbo].[SYM_SBA_DESIGNATION]

INSERT INTO dbo.REF_NITAAC_DEFINITIONS(IDF,NAME_CODE, ACRONYM_NAME, VALUE_CODE, [DESCRIPTION], CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, COMMENTS, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, VERSION, APPLICATION_IDF,  MASK_VALUE, ACCESS_LEVEL, POSITION_ORDER)
SELECT  dbo.fn_NewIDFExt('CNTRT', t.Created_when,cast(t.ID as varchar(16))),  NAME,replace(t.ABBR,'-',''),'C_'+replace(replace(t.ABBR,'-','_'),'&','_'), t.Category, 'C_CONTRACT_TYPE',
        case WHEN t.CATEGORY = 'FIXED_PRICE' or t.ABBR = 'FFP'        THEN 'C_FIXED_PRICE'
             WHEN t.CATEGORY = 'COST_REIMBURSEMENT'                   THEN 'C_COST_REIMBUSE'
             WHEN t.CATEGORY = 'TIME_LABOR_LETTER' or t.ABBR = 'LH'   THEN 'C_TIME_LABOR'
             ELSE 'C_OTHER' END, a.STATUS_CODE, a.STATUS_DATE, 'Migrated From SYM_CONTRACT_TYPE on Date: ' + cast(@v_SDATE as varchar(16)),'','SYM_CONTRACT_TYPE:'+Cast(t.ID as varchar(16)),'SYM_CONTRACT_TYPE',  t.CREATED_WHEN, t.CREATED_BY, t.MODIFIED_WHEN, t.MODIFIED_BY, 1,   a.VERSION, a.IDF, t.Mask, 744, t.ID
FROM  [CIOCSBK].[dbo].[SYM_CONTRACT_TYPE] t INNER JOIN CODE_APPLICATIONS a on a.REFERENCE_ID = 'SYM_GWAC:'+cast(t.GWAC_ID as varchar(16))

INSERT INTO dbo.REF_NITAAC_DEFINITIONS(IDF,NAME_CODE, ACTION_CODE, VALUE_CODE, [DESCRIPTION], SOURCE, SOURCE_CODE, CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, COMMENTS, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, VERSION, APPLICATION_IDF,  MASK_VALUE, ACCESS_LEVEL, POSITION_ORDER)
SELECT  dbo.fn_NewIDFExt('DOCTY', t.Created_when,cast(t.ID as varchar(16))),  NAME, left(t.ABBR,64),
CASE ID
WHEN 1  THEN 'C_SOW'
WHEN 2  THEN 'C_SOW_ATTACH'
WHEN 3  THEN 'C_JUST'
WHEN 4  THEN 'C_FUNDING'
WHEN 5  THEN 'C_IGCE'
WHEN 6  THEN 'C_JUST_ITIRB'
WHEN 7  THEN 'C_JUST_BUNDLING'
WHEN 9  THEN 'C_LST_CLIN'
WHEN 11 THEN 'C_JUST_BRAND'
WHEN 12 THEN 'C_DNF'
WHEN 13 THEN 'C_JUST_DOD'
WHEN 14 THEN 'C_AMENDMENT'
WHEN 15 THEN 'C_AWD_AUTH'
WHEN 16 THEN 'C_PROPOSAL'
WHEN 17 THEN 'C_BNP_PRICE'
WHEN 18 THEN 'C_OTH_ATTACH'
WHEN 19 THEN 'C_REQUIREMENT'
WHEN 20 THEN 'C_SUPPORT'
WHEN 21 THEN 'C_SOW_ATTACH'     ---------------
WHEN 22 THEN 'C_SUPPORT_HID'
WHEN 23 THEN 'C_IGCE_HID'
WHEN 24 THEN 'C_BNP_COST'
WHEN 25 THEN 'C_BNP_TECH'
WHEN 26 THEN 'C_BNP_OTHER'
WHEN 27 THEN 'C_AMND_REQMNT'
WHEN 28 THEN 'C_AMND_SUPPORT'
WHEN 29 THEN 'C_AMND_EVALUATE'
WHEN 30 THEN 'C_AMND_PRICE'
WHEN 31 THEN 'C_AWARD'   -----------
WHEN 32 THEN 'C_AWARD'   -----------
WHEN 33 THEN 'C_QA'
WHEN 34 THEN 'C_QA'
WHEN 63 THEN 'C_QA'
WHEN 35 THEN 'C_SOW_ATTACH_HID'
WHEN 36 THEN 'C_BNP_REPONSE' ----
WHEN 70 THEN 'C_BNP_REPONSE' ----
WHEN 37 THEN 'C_FUNDING'      -----
WHEN 38 THEN 'C_BNP_COST_RVS'
WHEN 39 THEN 'C_BNP_TECH_RVS'
WHEN 40 THEN 'C_BNP_OTHER_RVS'
WHEN 41 THEN 'C_INVOICE'
WHEN 42 THEN 'C_SUPPORT_HID'
WHEN 43 THEN 'C_TO_REQMNT'
WHEN 44 THEN 'C_TO_SUPP'
WHEN 45 THEN 'C_TO_SUPP_HID'
WHEN 46 THEN 'C_TO_SHIPPING'
WHEN 47 THEN 'C_TRP'
WHEN 48 THEN 'C_TO_SUPPORT'
WHEN 49 THEN 'C_TO_SUPP_RVS'
WHEN 50 THEN 'C_AWARD'  -----
WHEN 51 THEN 'C_AWD_SUPPORT'
WHEN 52 THEN 'C_TO_FUNDING'
WHEN 53 THEN 'C_AMND_REQMNT'
WHEN 54 THEN 'C_AMND_SUPPORT'
WHEN 55 THEN 'C_TRP_SUPPORT'
WHEN 57 THEN 'C_INVOICE'    ----
WHEN 58 THEN 'C_TRP_REVIEW'
WHEN 59 THEN 'C_PAY_SUPPORT'   ------------
WHEN 60 THEN 'C_PAY_SUPPORT'   ------------
WHEN 61 THEN 'C_EVL_SUPP_HID'  ---?
WHEN 62 THEN 'C_TRP_RVS'
WHEN 64 THEN 'C_RFQ_REQMNT'  ---?
WHEN 65 THEN 'C_RFQ_REQMNT_RVS'  ---?
WHEN 66 THEN 'C_SOLE_SOURCE'  ---?
WHEN 67 THEN 'C_SRC_SHIPPING'  ---?
WHEN 68 THEN 'C_SRC_AWARD'  ---?
WHEN 69 THEN 'C_CONS_INVOICE'
WHEN 71 THEN 'C_QA_RVS_EQUEST' -------
WHEN 74 THEN 'C_QA_RVS_EQUEST' -------
WHEN 72 THEN 'C_RFQ_SUB_FIN'
WHEN 75 THEN 'C_SUB_FINANCE'
WHEN 76 THEN 'C_BNP_REQMNT'
WHEN 77 THEN 'C_BNP_SHIIPING'
WHEN 78 THEN 'C_AMND_SHIPPING'
ELSE        'C_OTHER' END,'Define the Document type for '+t.ABBR + ' : ' + t.Name + case t.SubType when 1 then ' (SOW)' ELSE ' (GENERAL)' END,t.File_Storage_Dir, 'C_LOCATION','C_DOCUMENT',
'C_' + cast( t.Type as varchar(4)), case WHEN t.ACTIVE_FLAG = 1 THEN @v_STATUS ELSE 'INACTIVE' END, a.STATUS_DATE, 'Migrated From SYM_DOCUMENT_TYPE on Date: ' + cast(@v_SDATE as varchar(16)),'C_SUBTYPE_'+cast(t.Subtype as varchar(4)),'SYM_DOCUMENT_TYPE:'+Cast(t.ID as varchar(16)),'SYM_DOCUMENT_TYPE:TYPE_'+cast(t.Type as varchar(16)),  t.CREATED_WHEN, t.CREATED_BY, t.MODIFIED_WHEN, t.MODIFIED_BY, 1, 'VERSION:'+cast(t.VERSION as varchar(10)), a.IDF, t.SUBTYPE, 744, t.SORT_ORDER
FROM  [CIOCSBK].[dbo].[SYM_DOCUMENT_TYPE] t INNER JOIN CODE_APPLICATIONS a on a.REFERENCE_ID = 'SYM_GWAC:'+cast(t.GWAC_ID as varchar(16))

UPDATE c SET c.TYPE_CODE = p.VALUE_CODE, c.PARENT_IDF = p.IDF, c.PARENT_CODE = 'C_MEMBER'
FROM dbo.REF_NITAAC_DEFINITIONS c INNER JOIN dbo.REF_NITAAC_DEFINITIONS p on 'SYM_DOCUMENT_TYPE:'+replace(c.TYPE_CODE,'C_','')  = p.REFERENCE_ID
WHERE p.TYPE_CODE <> c.TYPE_CODE

INSERT INTO dbo.REF_NITAAC_DEFINITIONS(IDF,ACRONYM_NAME, NAME_CODE, ACTION_CODE, VALUE_CODE, [DESCRIPTION], SOURCE, SOURCE_CODE, CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, COMMENTS, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, APPLICATION_IDF, POSITION_ORDER) VALUES
(dbo.fn_NewIDFExt('DOCTY',default,default), 'SOW',          'Statement of Work (SOW) Document',                'C_PRIMARYT',     'C_SOW',           'Customer SOW, SOO, POW, and other similar documents',                      'DOC/SOW/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW document type',                       'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 1),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'FUND',         'Funding Document',                                'C_DEPENDENT',    'C_FUNDING',       'Customer Funding for RFP, or RFQ documents',                               'DOC/FUNDING/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',            'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 2),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'IGCE',         'Indenpendent Government Cost Estimation (IGCE)',  'C_DEPENDENT',    'C_IGCE',          'Customer Independent government cost estimation (IGCE) documents',         'DOC/IGCE/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 4),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'SUPT',         'Support (SUPT) Document',                         'C_DEPENDENT',    'C_SUPPORT',       'Any Support documents',                                                    'DOC/SUPPORT/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',            'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 6),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'TO',           'Task Order (TO) Document',                        'C_PRIMARY',      'C_TASK_ORDER',    'Task Order (TO) documents',                                                'DOC/SOW/TASKORDER/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',      'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 8),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'REQ',          'Requirement (REQ) Document',                      'C_DEPENDENT',    'C_REQUIREMENT',   'Customer Requrement for Order documents',                                  'DOC/REQUIREMENT/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',       'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 10),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'TOD',          'Task Order Deliverable Document',                 'C_DEPENDENT',    'C_DELIVERABLE',   'Customer/Contractor Task order Deliverable (TOD)  documents',              'DOC/TOD/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 12),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'SOLE',         'Sole Source Document',                            'C_PRIMARY',      'C_SOLE_SOURCE',   'Customer Sole Source Documents',                                           'DOC/SOLE/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',              'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 14),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'JUST',         'Sole Source Justification Document',              'C_DEPENDENT',    'C_JUSTIFICAITON', 'Customer Justification for Sole Source Documents',                         'DOC/JUSTIFICATION/', 'C_LOCATION','C_DOCUMENT','C_TYPE', @v_Status, @v_SDate,'define a SOW Support document type',    'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 16),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'AMND',         'Amendment (AMND) Document',                       'C_PRIMARY',      'C_AMENDMENT',     'Customer Amendment for order documents',                                   'DOC/AMND/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 18),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'RELS',         'Release Document',                                'C_PRIMARY',      'C_RELEASE',       'Customer Release documents',                                               'DOC/AMND/','C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 20),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'QNA',          'Question and Answer (QNA) Document',              'C_PRIMARY',      'C_QNA',           'Customer/Contract Question and Answer (QNA) documents',                    'DOC/QNA/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 22),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'BNP',          'Bid and Proposal (BNP) Document',                 'C_PRIMARY',      'C_PROPOSAL',      'Contractor bid and proposal (BNP) documents',                              'DOC/BNP/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CONTRACTOR',   '','', @v_SDATE, @v_USER, @v_IDF, 24),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'EVAL',         'Evaluation (EVAL) Document',                      'C_DEPENDENT',    'C_EVALUATION',    'Customer Proppsal Evaluation/Selection documents',                         'DOC/BNP/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 26),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'AWD',          'Award Document',                                  'C_PRIMARY',      'C_AWARD',         'Customer award documents',                                                 'DOC/AWARD/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',             'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 28),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'MOD',          'Contract Modification (MOD) Document',            'C_PRIMARY',      'C_MOD',           'Customer Cotnract Modificatoin (MOD) documents',                           'DOC/MOD/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 30),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'PAY',          'Payment Document',                                'C_PRIMARY',      'C_PAYMENT',       'Contract payment documents',                                               'DOC/PAYMENT/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',           'C_CONTRACTOR',   '','', @v_SDATE, @v_USER, @v_IDF, 32),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'FIN',          'Finance Document',                                'C_PRIMARY',      'C_FINANCE',       'Contractor Finance documents',                                             'DOC/PAYMENT/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',           'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 34),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'INV',          'Invoice Document',                                'C_PRIMARY',      'C_INVOICE',       'NITAAC Invoice documents',                                                 'DOC/INVOICE/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',           'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 36),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'SNH',          'Shipping and Handling (SNH) Document',            'C_DEPENDENT',    'C_SHIPPING',      'Customer/Contractor shipping and handling (SNH) information documents',    'DOC/SNH/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',               'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 38),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'NOTN',         'Notification Attachement',                        'C_PRIMARY',      'C_NOTIFICATION',  'Notificaiton/message attaching documents',                                 'DOC/NOTIFICATION/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',      'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 40),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'ANNO',         'Announcement Attachement',                        'C_PRIMARY',      'C_ANNOUNCEMENT',  'Announcement/message attaching documents',                                 'DOC/ANNONCEMENT/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',       'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 42),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'RPT',          'Report Document/Attachement',                     'C_PRIMARY',      'C_Report',        'Report documents or attachements',                                         'DOC/REPORT/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',            'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 44),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'RVW',          'Review Document',                                 'C_DEPENDENT',    'C_REVIEW',        'Customer/Contractor Review Documents',                                     'DOC/REVIEW/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',            'C_CUSTOMER',     '','', @v_SDATE, @v_USER, @v_IDF, 46),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'RVS',          'Revision Document',                               'C_DEPENDENT',    'C_REVISION',      'Customer/Contractor Revised Documents',                                    'DOC/REVISION/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',          'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 48),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'JUST',         'Justification Document',                          'C_DEPENDENT',    'C_JUSTIFICAITON', 'Customer Justification for Sole Source Documents',                         'DOC/REVIEW/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',            'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 50),
(dbo.fn_NewIDFExt('DOCTY',default,default), 'OTH',          'Other Document',                                  'C_DEPENDENT',    'C_OTHER',         'Other additional documents',                                               'DOC/OTHER/', 'C_LOCATION','C_DOCUMENT','C_TYPE',@v_Status, @v_SDate,'define a SOW Support document type',             'C_ORGANIZATION', '','', @v_SDATE, @v_USER, @v_IDF, 100)

Select @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_GSS'
INSERT INTO dbo.REF_NITAAC_DEFINITIONS(IDF,ACRONYM_NAME, NAME_CODE, ACTION_CODE, VALUE_CODE, [DESCRIPTION], SOURCE, SOURCE_CODE, CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, COMMENTS, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, APPLICATION_IDF, MASK_VALUE, POSITION_ORDER) VALUES
(dbo.fn_NewIDFExt('CTRTQ',default,default), 'PC',              'NITAAC Approved LAPTOP/DESKTOP Qualified Contractor Group',     'C_CONTRACT',    'C_COMPUTER',     'A NITAAC Qualified and Approved Contractor OEM/VAR Group for the sale of LAPTOP/DESKTOP and related products',   '',    'C_GRP_CONTRACT','C_CONTRACT','C_COMPUTER',@v_Status, @v_SDate,'define a Computer Contract qualified Group',                       'C_GSS_CONTRACT',     '','', @v_SDATE, @v_USER, dbo.fn_GetMAPIDF('C_GSS','C_APPLICATION'),1, 1),
(dbo.fn_NewIDFExt('CTRTQ',default,default), 'SW',              'NITAAC Approved Software Qualified Contractor Group',           'C_CONTRACT',    'C_SOFTWARE',     'A NITAAC Qualified and Approved Contractor OEM/VAR Group for the sale of Software and related Products',         '',    'C_GRP_CONTRACT','C_CONTRACT','C_SOFTWARE',@v_Status, @v_SDate,'define a Software Contract qualified Group',                       'C_GSS_CONTRACT',     '','', @v_SDATE, @v_USER, dbo.fn_GetMAPIDF('C_GSS','C_APPLICATION'),2, 2),
(dbo.fn_NewIDFExt('CTRTQ',default,default), 'TELECOM',         'NITAAC Approved Telecommunication Qualified Contractor Group',  'C_CONTRACT',    'C_TELECOM',      'A NITAAC Qualified and Approved Contractor OEM/VAR Group for the sale of Telecommunication equipments',          '',    'C_GRP_CONTRACT','C_CONTRACT','C_TELECOM', @v_Status, @v_SDate,'define a Telecommunication Contract qualified Group',              'C_GSS_CONTRACT',     '','', @v_SDATE, @v_USER, dbo.fn_GetMAPIDF('C_GSS','C_APPLICATION'),4, 4)

UPDATE   dbo.REF_NITAAC_DEFINITIONS set REFERENCE_CODE = 'C_'+ Replace(left(APPLICATION_IDF,5),'__','') +'_CONTRACT', SOURCE_CODE = IsNull(SOURCE_CODE,'C_GRP_CONTRACT')
WHERE CATEGORY_CODE = 'C_CONTRACT' and isNUll(REFERENCE_CODE,'') = ''

Select @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS'
-------- for ID seeds
INSERT INTO REF_NITAAC_IDS(IDF, ID_NUMBER, NEXT_ID_NUMBER, VALUE_CODE, REFERENCE_CODE, PREFIX, SUFFIX, NAME_CODE, CATEGORY_CODE, TYPE_CODE, [DESCRIPTION], [VERSION], ACCESS_LEVEL, POSITION_ORDER, REFERENCE_ID, REFERENCE_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY, APPLICATION_IDF, ORGANIZATION_IDF, ACRONYM_NAME ) VALUES
(dbo.fn_NewIDFExt('RFQ', default,'0'), 100000, 100001,'RFQ100000','RFQ100000','RFQ','','Order ID of CS or GSS applications',  'C_CS',  'C_ORDER',  'Customer Request CS ORDER ID 100000','V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @V_sdate, @v_User, @v_IDF, Null,'C_DEF'),
(dbo.fn_NewIDFExt('RFP', default,'0'), 100000, 100001,'RFP100000','RFP100000','RFP','','Order ID of SP3 or SP3SB applcaitons','C_SP',  'C_ORDER',  'Customer Request SP ORDER ID 100000','V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @v_sdate, @v_User, @v_IDF, Null,'C_DEF'),
(dbo.fn_NewIDFExt('RFI', default,'0'), 100000, 100001,'RFI100000','RFI100000','RFI','','RFI ID of all applications ',         'C_ALL', 'C_RFI',    'Customer Request RFI ID 100000',     'V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @v_sdate, @v_User, @v_IDF, Null,'C_DEF'),
(dbo.fn_NewIDFExt('AWD', default,'0'), 100000, 100001,'AWD100000','AWD100000','AWD','','Award ID of SP3 or SP3SB applcaitons','C_SP',  'C_AWARD',  'Customer Request SP AWARD ID 100000','V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @v_sdate, @v_User, @v_IDF, Null,'C_DEF'),
(dbo.fn_NewIDFExt('DOA', default,'0'), 100000, 100001,'DOA100000','DOA100000','DOA','','Award ID of CS or GSS applications',  'C_CS',  'C_AWARD',  'Customer Request CS AWARD ID 100000','V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @v_sdate, @V_User, @v_IDF, Null,'C_DEF'),
(dbo.fn_NewIDFExt('MOD', default,'0'), 100000, 100001,'MOD100000','MOD100000','MOD','','MOD ID of All applcaitons',           'C_ALL', 'C_MOD',    'Customer Request SP MOD ID 100000',  'V_1.0:INITIAL',744, 1, 'DEFAULT','STARTED ID BASE', @v_STATUS, @v_sdate, @v_sdate, @v_User, @v_IDF, Null,'C_DEF')

Print '------------- Data Migration  [dbo].[sc_Base_Core_init]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Defaults]
----  for the purpose of install a set of default values for for data migration if missing data exists and there is a need to use default values
-------------
Print '------------- Data Migration  [dbo].[sc_Defaults]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)=dbo.fn_NewIDFExt('NEOS',default,'_DEF'), @v_Code as varchar(16) = 'C_PARENT'

select @v_IDF = IDF from [dbo].[CODE_APPLICATIONS] where VALUE_CODE = 'C_NEOS'
--- define a set of default data as NITTAC
INSERT INTO [dbo].[ADDRESSES](IDF, [NAME_CODE],[DIRECTION],[STREET_ONE],[STREET_TWO],[CITY],[COUNTY],[STATE_CODE],[STATE_PROVINCE],[COUNTRY],[ZIP_POSTAL_CODE],[ZIP_EXTENSION_CODE],[INTERNATIONAL_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[VERSION]) VALUES
(dbo.fn_NewIDFExt('ADDR',default,'_DEF'),'Default NITAAC Address','HelpDesk/Call Center','6011 Executive Boulevard, SUITE 500','','Rockville','','MD','MD','USA',20852,null,'','','C_DOMESTIC','C_PRIMARY' ,'Used for default purpose',@v_STATUS,@v_SDATE, 'Created as a default address on date: '+ cast(@v_SDATE as varchar(24)), 'DEFAULT:100000','A Default Address',@v_SDATE,@v_USER,'VERSION:0')

INSERT INTO CONTACTS(IDF,NAME_CODE, REFERENCE_ID, REFERENCE_NAME, CATEGORY_CODE,TYPE_CODE,[EFFECTIVE_START_DATE],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[DEFAULT_IDR],[DESCRIPTION], COMMENTS,[STATUS_DATE],[STATUS_CODE],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], OWNER_IDF,OWNER_TYPE)
SELECT 'CTAT_'+ RIGHT(IDF,59), 'Default NITAAC Contact', REFERENCE_ID, REFERENCE_NAME, CATEGORY_CODE,TYPE_CODE, CREATED_DATE, 1,1,1,1, '','Created as default NITAAC Contact',@v_SDATE,@v_STATUS,@v_SDATE,@v_USER,744, 'VERSION:1', @v_IDF, 'C_DEFAULT'
FROM ADDRESSES WHERE REFERENCE_ID =  'DEFAULT:100000'

INSERT INTO [dbo].[TELECOM_ADDRESSES]([IDF],[NAME_CODE],[PHONE],[MOBILE],[FAX],[EMAIL],[URL],[INTERNATIONAL_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY])
SELECT  'TADR_'+Right(IDF,59), 'Defaule NITAAC Telecom Address', '(888) 773-6542','(888) 773-6542','(888) 773-6542','nitaachelpdesk@mail.nih.gov','','',CATEGORY_CODE,TYPE_CODE,'C_PUBLIC',DESCRIPTION,[STATUS_CODE],[STATUS_DATE],COMMENTS,'C_DEFAULT', REFERENCE_ID,REFERENCE_NAME, 1,[CREATED_DATE],[CREATED_BY]
FROM CONTACTS WHERE REFERENCE_ID = 'DEFAULT:100000'


INSERT INTO CONTACT_ADDRESSES([CONTACT_IDF],[ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
SELECT c.IDF, a.IDF, @v_IDF, c.NAME_CODE + ' For ' + a.NAME_CODE, c.CATEGORY_CODE, c.TYPE_CODE, 'C_PUBLIC', a.DIRECTION, a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.VERSION
FROM CONTACTS c INNER JOIN ADDRESSES a on c.REFERENCE_ID = a.REFERENCE_ID
WHERE a.REFERENCE_ID =  'DEFAULT:100000'

INSERT INTO CONTACT_TELECOM_ADDRESSES([CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
SELECT c.IDF, a.IDF, a.IDF, c.NAME_CODE + ' For '+ a.NAME_CODE, c.CATEGORY_CODE, c.TYPE_CODE, 'C_PUBLIC', a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY,  c.VERSION
FROM CONTACTS c INNER JOIN TELECOM_ADDRESSES a on c.REFERENCE_ID = a.REFERENCE_ID
WHERE a.REFERENCE_ID =  'DEFAULT:100000'

---INSERT INTO REF_NITAAC_UPC_INFO

Print '------------- Data Migration  [dbo].[sc_Defaults]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Category_Type]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Category_Type]  -----START: ' + cast(GetDate() as varchar(24))
-- install Category Codes
Declare @v_Status as varchar(8) = 'ACTIVE', @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
Declare @PID as varchar(64) = NULL, @SDATE as DateTime = GETDATE(), @SUSER as varchar(128) = SUSER_NAME()

insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, POSITION_ORDER) values
('Base Category',              'BASE',  'C_BASE',         'C_BASE',     'Base Category as an internal one to link others.',                      'C_BASE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, 1),
('Common Category',            'COM',   'C_COMMON',       'C_BASE',     'Common Use Category as an internal one for Common Uses.',               'C_BASE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, 2),
('Business Category',          'BIZ',   'C_BUSINESS',     'C_BASE',     'Business Category as an internal one for Business Uses.',               'C_BASE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, 3),
('Technology Category',        'TEC',   'C_TECHNOLOGY',   'C_BASE',     'Technology/Information Category as an internal one for tech/info.',     'C_BASE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, 4),
('General/Default Category',   'DEF',   'C_DEFAULT',      'C_BASE',     'General/Default Category as an internal one to link other defaults.',   'C_BASE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, 5)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_DEFAULT'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Category',                   'CAT',      'C_CATEGORY',       'C_DEFAULT', 'Category defined in CTEP ESYS as Categories',                  'C_CATEGORY',        @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Sub Category',               'SUBCAT',   'C_SUBCATEGORY',    'C_DEFAULT', 'Sub category defined in CTEP ESYS as Subcategories.',          'C_SUBCATEGORY',     @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Type Category',              'TYP',      'C_TYPE',           'C_DEFAULT', 'Type Category defined in CTEP ESYS as Types',                  'C_TYPE',            @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Sub Type Category',          'SUBTYP',   'C_SUBTYPE',        'C_DEFAULT', 'Sub Type Category defined in CTEP ESYS as Subtypes.',          'C_SUBTYPE',         @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Definition Category',        'DFN',      'C_DEFINITION',     'C_DEFAULT', 'Definition Category defined in CTEP ESYS as Subtypes.',        'C_DEFINITION',      @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Relationship Category',      'REL',      'C_RELATIONSHIP',   'C_DEFAULT', 'Relationship Category defined in CTEP ESYS as Subtypes.',      'C_RELATIONSHIP',    @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('General Category',           'GEN',      'C_GENERAL',        'C_DEFAULT', 'General category defined in CTEP ESYS.',                       'C_GENERAL',         @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_RELATIONSHIP'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Membership Category',        'MBR',     'C_MEMBER',      'C_RELATIONSHIP', 'The Membership categories',      'C_MEMBER', @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Level/Depth Category',       'LVL',     'C_LEVEL',       'C_RELATIONSHIP', 'The Level/Depth categories',     'C_LEVEL',  @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Tree Node Category',         'NOD',     'C_NODE',        'C_RELATIONSHIP', 'The Tree Node categories',       'C_NODE',   @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Tree Tier Category',         'TIR',     'C_TIER',        'C_RELATIONSHIP', 'The Tree Tier categories',       'C_TIER',   @v_Status, @SDATE, '', 'C_DEFAULT', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_COMMON'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Status Category',        'STAT', 'C_STATUS',       'C_COMMON', 'Various Statuses defined in CTEP ESYS including study, org, person, review, process, etc.', 'C_STATUS',          @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Address Category',       'ADDR', 'C_ADDRESS',      'C_COMMON', 'Address Category defined in CTEP ESYS including physical and cyber addresses.',             'C_ADDRESS',         @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Type Category',          'TYP',  'C_TYPE',         'C_COMMON', 'Various Types defined in CTEP ESYS including study, org, person, review, process, etc.',    'C_TYPE',            @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Person Category',        'PER',  'C_PERSON',       'C_COMMON', 'Various Person defined in CTEP ESYS including study, org, person, review, process, etc.',   'C_PERSON',          @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Orgnization Category',   'ORG',  'C_ORGANIZATION', 'C_COMMON', 'Various Organizations defined in CTEP ESYS.',                                               'C_ORGANIZATION',    @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Group Category',         'GRP',  'C_GROUP',        'C_COMMON', 'Various Group defined in CTEP ESYS including study, org, person, review, process, etc.',    'C_GROUP',           @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Profile Category',       'PRF',  'C_PROFILE',      'C_COMMON', 'Profiles including person, application, service, module, database.',                        'C_PROFILE',         @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Document Category',      'DOC',  'C_DOCUMENT',     'C_COMMON', 'Documents for various objects.',                                                            'C_DOCUMENT',        @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Measurement Category',   'TMR',  'C_MEASUREMENT',  'C_COMMON', 'Measurement Category for various objects.',                                                 'C_MEASUREMENT',     @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Timer Category',         'TMR',  'C_TIMER',        'C_COMMON', 'Timer Category for various objects.',                                                       'C_TIMER',           @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',10),
('Scheduler Category',     'SCHR', 'C_SCHEDULER',    'C_COMMON', 'Scheduler Category for various objects.',                                                   'C_SCHEDULER',       @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',11),
('Registration Category',  'REG',  'C_REGISTRATION', 'C_COMMON', 'Registration including person, application, service, module, database.',                    'C_REGISTRATION',    @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',12)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ORGANIZATION'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE, [Description], CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) VALUES
('Federal Customer (FC) Category',      'FC',  'C_CUSTOMER',      'Federal Customer (FC) category for various objects.',                                                 'C_ORGANIZATION', 'C_CUSTOMER',        @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Contract Holder (CH) Category',       'CH',  'C_CONTRACTOR',     'Contractor Holder (CH) Category for various objects.',                                               'C_ORGANIZATION', 'C_CONTRACTOR',      @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2)

SELECT @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_CONTRACTOR'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE, [Description], CATEGORY_CODE,TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, VERSION, PARENT_IDF, PARENT_CODE, POSITION_ORDER)
SELECT  [DESCRIPTION],
        CASE [CODE]
        WHEN 's'                THEN 'SB'
        WHEN 'o'                THEN 'NSB'
        WHEN 'b'                THEN 'NDIS'
        WHEN 'd'                THEN 'DIS'
        WHEN 'v'                THEN 'VO'
        WHEN 'w'                THEN 'WO'
        WHEN 'dv'               THEN 'SDVO'
        WHEN '8a'               THEN '8A'
        WHEN 'h'                THEN 'HUBZ'
        WHEN 'nao'              THEN 'NAO'
        WHEN 'ano'              THEN 'ANO'
        ELSE                         'OTH' END,
        case [Code]
        WHEN 's'                THEN 'C_SB'
        WHEN 'o'                THEN 'C_NON_SB'
        WHEN 'b'                THEN 'C_NON_DIS'
        WHEN 'd'                THEN 'C_DIS'
        WHEN 'v'                THEN 'C_VO'
        WHEN 'w'                THEN 'C_WO'
        WHEN 'dv'               THEN 'C_SDVO'
        WHEN '8a'               THEN 'C_8A'
        WHEN 'h'                THEN 'C_HUBZONE'
        WHEN 'nao'              THEN 'C_NAO'
        WHEN 'ano'              THEN 'C_ANO'
        ELSE                         'C_OTHER' END, [DESCRIPTION],
        'C_ORGANIZATION','C_SBA',@v_STATUS, @SDATE, 'Migrated From SYM_SBA_DESIGNATION on Date:'+cast(@SDATE as varchar(20)),'C_SBA','SYM_SBA_DESIGNATION:'+cast(ID as varchar(10)),'SYM_SBA_DESIGNATION:'+[CODE],[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],1, 'VERSION:' + CAST([VERSION] as varchar(12)), @PID, @v_Code, ID
FROM [CIOCSBK].[dbo].[SYM_SBA_DESIGNATION]
UPDATE  CODE_CATEGORY_TYPES  set IDF = Left(ACRONYM_NAME+'___',5)+ RIGHT(IDF,59)
WHERE TYPE_CODE = 'C_SBA' AND CATEGORY_CODE = 'C_CONTRACTOR'

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_MEASUREMENT'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Size Category',                  'SIZ',  'C_SIZE',            'C_MEASUREMENT', 'Category for Size.',                               'C_SIZE',               @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Volume Category',                'VOL',  'C_VOLUME',          'C_MEASUREMENT', 'Category for Volume.',                             'C_VOLUME',             @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Amount Category',                'AMNT', 'C_AMOUNT',          'C_MEASUREMENT', 'Category for Amount.',                             'C_AMOUNT',             @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Unit of Measurement Category',   'UOM',  'C_UOM',             'C_MEASUREMENT', 'Category for Unit of Measurement.',                'C_UOM',                @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Sequence Category',              'SEQ',  'C_SEQUENCE',        'C_MEASUREMENT', 'Category for Sequence/order.',                     'C_SEQUENCE',           @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Frequency Category',             'FREQ', 'C_FREQUENCY',       'C_MEASUREMENT', 'Category for Frequency and how often.',            'C_FREQUENCY',          @v_Status, @SDATE, '', 'C_COMMON', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_BUSINESS'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Business Process Category',  'PRC',  'C_PROCESS',    'C_BUSINESS', 'Categories for Business Processes and Procedures.',                 'C_PRCOESS',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Business Knowledge Category','KNG',  'C_KNOWLEDGE',  'C_BUSINESS', 'Categories for Business Knowledge.',                                'C_KNOWLEDGE',  @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Business Workflow Category', 'WKF',  'C_WORKFLOW',   'C_BUSINESS', 'Categories for Business Workflows.',                                'C_WORKFLOW',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Business Task Category',     'TSK',  'C_TASK',       'C_BUSINESS', 'Categories for Business Tasks.',                                    'C_TASK',       @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Business Actvity Category',  'ACT',  'C_ACTIVITY',   'C_BUSINESS', 'Categories for Business Activities.',                               'C_ACTIVITY',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Business Finance Category',  'FIN',  'C_FINANCE',    'C_BUSINESS', 'Categories for Business Finances.',                                 'C_FINANCE',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Standard Category',          'STD',  'C_STANDARD',   'C_BUSINESS', 'Categories for various standards.',                                 'C_STANDARD',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Legality Category',          'LEG',  'C_LEGALITY',   'C_BUSINESS', 'Categories in accordance with the law.',                            'C_LEGALITY',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Domain Category',            'DOM',  'C_DOMAIN',     'C_BUSINESS', 'Categories for DOMAIN.',                                            'C_DOMAIN',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Procurement Category',       'PROU', 'C_PROCUREMENT','C_BUSINESS', 'Categories for Contract/Procurement.',                              'C_PROCUREMNT', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 10)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_STANDARD'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Code Category',              'CD',   'C_CODE',       'C_STANDARD', 'Categories for various codes.',                                     'C_CODE',       @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Practice Category',          'PRA',  'C_PRACTICE',   'C_STANDARD', 'Categories for various practicess.',                                'C_PRACTICE',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Term Category',              'TRM',  'C_TERM',       'C_STANDARD', 'Categories for various terms.',                                     'C_TERM',       @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Identifier Category',        'ID',   'C_IDENTIFIER', 'C_STANDARD', 'Categories for various Identifications (ID).',                      'C_IDENTIFIER', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Definition Category',        'DFN',  'C_DEFINITION', 'C_STANDARD', 'Categories for various definitions.',                               'C_DEFINITION', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Guideline Category',         'GDL',  'C_GUIDELINE',  'C_STANDARD', 'Categories for various Guidelines.',                                'C_GUIDELINE',  @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_KNOWLEDGE'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Information Category',       'INFO',   'C_INFORMATION',       'C_KNOWLEDGE', 'Categories for various Information.',                     'C_INFORMATON',       @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Fact Category',              'FCT',    'C_FACT',              'C_KNOWLEDGE', 'Categories for various Facts.',                           'C_FACT',             @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Experience Category',        'EXP',    'C_EXPERIENCE',        'C_KNOWLEDGE', 'Categories for various Experiences.',                     'C_EXPRIENCE',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Expertise Category',         'EPS',    'C_EXPERTISE',         'C_KNOWLEDGE', 'Categories for various Expertises.',                      'C_EXPERTISE',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Skill Category',             'SKL',    'C_SKILL',             'C_KNOWLEDGE', 'Categories for various Data.',                            'C_SKILL',            @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_PROCUREMENT'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Pre-Award Category',           'PAWD',  'C_PRE_AWARD',    'C_PROCUREMENT', 'Categories for Pre-Award',                                     'C_CONTRACT',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Award Category',               'AWD',   'C_AWARD',        'C_PROCUREMENT', 'Categories for Awards',                                        'C_AWARD',       @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Post-Award Category',          'SARD',  'C_POST_AWARD',   'C_PROCUREMENT', 'Categories for Post-Award',                                    'C_POST_AWARD',  @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Modification Category',        'MOD',   'C_MODIFICATION', 'C_PROCUREMENT', 'Categories for Contract Modification',                         'C_MODIFICATION',@v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Closure Category',             'CLS',   'C_CLOSURE',      'C_PROCUREMENT', 'Categories for Contract Close',                                'C_CLOSURE',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Termiate Category',            'TERM',  'C_TERMINATION',  'C_PROCUREMENT', 'Categories for Contract Termination.',                         'C_TERMINATION', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Option Category',              'OPT',   'C_OPTION',       'C_PROCUREMENT', 'Categories for Contract Option.',                              'C_OPTION',      @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_PRE_AWARD'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('TO Draft Category',           'ODRF',       'C_TO_DRAFT',         'C_DRAFT',         'Categories for Task Order Draft.',                                  'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('TO Review Category',          'ORVW',       'C_TO_REVIEW',        'C_REVIEW',        'Categories for Task Order Review.',                                 'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('TO Revision Category',        'OREV',       'C_TO_REVISION',      'C_REVISION',      'Categories for Task Order Reivision.',                              'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('TO Release Category',         'OREL',       'C_TO_RELEASE',       'C_RELEASE',       'Categories for Task Order release publically.',                     'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('TO Question Category',        'OQUST',      'C_TO_QUESTION',      'C_QUESTION',      'Categories for Questions to Task Order from Contractors.',          'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('TO Answer Category',          'OANSW',      'C_TO_ANSWSER',       'C_ANSWSER',       'Categories for Task Order Anwser/response from Customer.',          'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('TO Withdraw Category',        'OWDR',       'C_TO_WITHDRAW',      'C_WITHDRAW',      'Categories for Task Order Withdraw from Customer.',                 'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('TO Document Category',        'ODOC',       'C_TO_DOCUMENT',      'C_DOCUMENT',      'Categories for Task Order Documentation.',                          'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('TO Response Category',        'ORESP',      'C_TO_RESPONSE',      'C_RESPONSE',      'Categories for Response to Task Order.',                            'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('TO Clarification Category',   'OCLAR',      'C_TO_CLARIFICATION', 'C_CLARIFICATION', 'Categories for Task Order Clarification',                           'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',10),
('TO Pending Category',         'OPEND',      'C_TO_PENDING',       'C_PENDING',       'Categories for Task Order Pending.',                                'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',11),
('TO Cancellation Category',    'OCANC',      'C_TO_CANCEL',        'C_CANCEL',        'Categories for Task Order Cancellation.',                           'C_TASK_ORDER',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',12),
('BP Draft Category',           'PDRF',       'C_BP_DRAFT',         'C_DRAFT',         'Categories for B&P Draft.',                                         'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',13),
('BP Withdraw Category',        'PWDR',       'C_BP_WITHDRAW',      'C_WITHDRAW',      'Categories for B&P Withdraw.',                                      'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',14),
('BP Revision Category',        'PREV',       'C_BP_REVISION',      'C_REVISION',      'Categories for B&P Revision.',                                      'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',15),
('BP Review Category',          'PRVW',       'C_BP_REVIEW',        'C_REVIEW',        'Categories for B&P Reviews.',                                       'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',16),
('BP Assessment Category',      'PEVAL',      'C_BP_ASSESSMENT',    'C_ASSESSMENT',    'Categories for B&P Assessment/Evaluation.',                         'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',17),
('BP Readiness Category',       'PREDY',      'C_BP_READINESS',     'C_READINESS',     'Categories for B&P readiness.',                                     'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',18),
('BP Document Category',        'PDOC',       'C_BP_DOCUMENT',      'C_DOCUMENT',      'Categories for B&P Documentation.',                                 'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',19),
('BP Submission Category',      'PSUB',       'C_BP_SUBMISSION',    'C_SUBMISSION',    'Categories for B&P Submission/',                                    'C_BID_PROPOSAL',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',20)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_AWARD'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Award Negotiation Category',     'ANEGO',   'C_AW_NEGOTIATION',  'C_NEGOTIATION', 'Categories for Award Negotiation for the contract awarding.',           'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Award Revision Category',        'ARVW',    'C_AW_REVISION',     'C_REVISION',    'Categories for Award term/condition revisions.',                        'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Awarding Award Category',        'AAWD',    'C_AW_AWARDING',     'C_AWARD',       'Categories for Process of awarding the contract awards from customer.', 'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Award Term/Condition Category',  'ATRM',    'C_AW_TERM',         'C_TERM',        'Categories for Award terms/conditions.',                                'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Award Deliverables Category',    'ADLV',    'C_AW_DELIVERABLE',  'C_DELIVERABLE', 'Categories for Award Deliverables for Contractors.',                    'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Award Pending/On Hold Category', 'APEND',   'C_AW_ONHOLD',       'C_ONHOLD',      'Categories for Award pending/onhold during the awards.',                'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Award Cancellation Category',    'ACAN',    'C_AW_CANCEL',       'C_CANCEL',      'Categories for Award cancellation.',                                    'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Award Acceptance Category',      'AACP',    'C_AW_ACCEPT',       'C_ACCEPT',      'Categories for Award acceptance from contractor(s).',                   'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Award Reject Category',          'AREJ',    'C_AW_REJECT',       'C_REJECT',      'Categories for Award rejection from contractor(s).',                    'C_AWARD',        @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_POST_AWARD'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Deliverable Category',         'SDELV',  'C_PA_DELIVER',         'C_DELIVERABE',   'Category for Awarded task/order delivables.',                                'C_STATEMENT',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Fee Invoice Category',         'SFEE',   'C_PA_INVOICE',         'C_INVOICE',      'Category for fee invoices for NITAAC.',                                      'C_AGREEMENT',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Shipment Category',            'SSHP',   'C_PA_SHIPMENT',        'C_SHIPMENT',     'Category for Shipment as a part of deliverables from Contractor.',           'C_COMPLIANCE',  @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Modification Category',        'SMOD',   'C_PA_MODIFICATION',    'C_MODIFICATION', 'Category for Contract Modification.',                                        'C_CONTRACT',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Payment Category',             'SPAY',   'C_PA_PAYMENT',         'C_PAYMENT',      'Category for Award/Fee Payment from Contractor.',                            'C_DISPOSITION', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Finance Report Category',      'SFIN',   'C_PA_FIN_REPORT',      'C_REPORT',       'Category for Contract Report for the fee payment.',                          'C_PROPROERTARY',@v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Q/A Category',                 'SQNA',   'C_PA_QUESTION',        'C_LEGALITY',     'Category for Question/Answer after contract awards.',                        'C_QUESTION',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Request Category',             'SREST',  'C_PA_REQUEST',         'C_LEGALITY',     'Category for Requests from both customers/contractors.',                     'C_REQUEST',     @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Implementation Category',      'SIMPL',  'C_PA_IMPLEMENT',       'C_LEGALITY',     'Category for Implementation of awarded tasks.',                              'C_RESPONSE',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Record Category',              'SREC',   'C_PA_RECORD',          'C_RECORD',       'Category for Award records.',                                                'C_RECORD',      @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',10),
('Kick-Off Category',            'SKCK',   'C_PA_KICKOFF',         'C_STARTUP',      'Category for contract Kickoff/startup.',                                     'C_KICKOFF',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',11)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_TECHNOLOGY'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Enterprise Category',                      'ENT',     'C_ENTERPRISE',    'C_TECHNOLOGY', 'Enterprise Category as an internal one to link others.',               'C_ENTERPRISE',     @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Software Category',                        'SW',      'C_SOFTWARE',      'C_TECHNOLOGY', 'Software Category as an internal one to link others.',                 'C_SOFTWARE',       @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Service Category',                         'SVC',     'C_SERVICE',       'C_TECHNOLOGY', 'Service Category as an internal one to link Services.',                'C_SERVICE',        @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Module Category',                          'MOD',     'C_MODULE',        'C_TECHNOLOGY', 'Module/Component Category as an internal one to link Services.',       'C_MODULE',         @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Database Category',                        'DB',      'C_DATABASE',      'C_TECHNOLOGY', 'Database Category as an internal one to link Services.',               'C_DATABASE',       @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Data/Service Category',                    'DAT',     'C_DATA',          'C_TECHNOLOGY', 'Data/Service as an internal one to link Services.',                    'C_DATA',           @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Application Category',                     'APP',     'C_APPLICATION',   'C_TECHNOLOGY', 'Application Category as an internal one to link Applications.',        'C_APPLICATION',    @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Communication Category',                   'CMM',     'C_COMMUNICATION', 'C_TECHNOLOGY', 'Communiction Category as an internal one to link data exchange.',      'C_COMMUNICATION',  @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Configuration Category',                   'CFG',     'C_CONFIGURATION', 'C_TECHNOLOGY', 'Various Configuration Category.',                                      'C_CONFIGURATIION', @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Information Technology(IT) Category',      'IT',      'C_IT',            'C_TECHNOLOGY', 'Information Techonoly (IT) Category.',                                 'C_IT',             @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',10),
('Infrastructure Category',                  'INFR',    'C_INFRASTRUCTURE','C_TECHNOLOGY', 'Infrastructure Category as an internal one to link environment.',      'C_INFRASTRUCTURE', @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',11),
('Graphical User Interface(GUI) Category',   'GUI',     'C_GUI',           'C_TECHNOLOGY', 'Graphical User Interface (GUI) defines all GUI controls and others',   'C_GUI',            @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',12),
('Trigger Category',                         'TRI',     'C_TRIGGER',       'C_TECHNOLOGY', 'Notification Category.',                                               'C_NOTIFICATION',   @v_Status, @SDATE,   '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',13)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ENTERPRISE'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('NEOS Enterprise Systems Category',                                      'NES',     'C_NES',                 'C_ENTERPRISE', 'NEOS Program IT Enterprise System as a default defines all categories',         'C_NES',               @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Registration Enterprise Category',                                      'REG',     'C_REGISTRATION',        'C_ENTERPRISE', 'Registration Enterprise defines all categories',                                'C_REGISTRATION',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Identity Access Management(IAM) Enterprise Category',                   'IAM',     'C_IAM',                 'C_ENTERPRISE', 'Identity Access Management(IAM) Enterprise defines all categories',             'C_IAM',               @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',14)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_APPLICATION'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER ) values
('Registration Application Category',                                   'APPREG',      'C_APP_REG',       'C_APPLICATION', 'Registration Credential Repository(RCR) Application defines all categories',                                             'C_APP_REG',    @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_REGISTRATION',   '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Identity Access Management(IAM) Application Category',                'APPIAM',      'C_APP_IAM',       'C_APPLICATION', 'Identity Access Management(IAM) Application defines all categories',                                                     'C_APP_IAM',    @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_IAM',            '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',12),
('API System Application Category',                                     'APPAPI',      'C_APP_API',       'C_APPLICATION', 'External API System as an external Application defines all categories',                                                  'C_APP_API',    @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_API',            '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',15)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_SERVICE'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Common Services Category',                                     'SVCCOM',          'C_SVC_COMMON',    'C_SERVICE', 'Common Service defines all Shared Common Services for Applications and domain based services defines all categories',         'C_SVC_COMMON',  @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_COMMON',         '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('NEOS Enterprise Services Category',                            'CES',             'C_SVC_NES',       'C_SERVICE', 'NEOS Enterprise Service (NES) defines all Shared domain based services for domain based services defines all categories',     'C_SVC_NES',     @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_NES',            '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Registration Service Category',                                'SVCREG',          'C_SVC_REG',       'C_SERVICE', 'Registration Service defines all categories.',                                                                                'C_SVC_REG',     @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_REGISTRATION',   '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Extenal API Service Category',                                 'SVCAPI',          'C_SVC_API',       'C_SERVICE', 'External APIs Service defines all categories',                                                                                'C_SVC_API',     @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_API',            '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('NEOS Event Service Category',                                  'SVCEVT',          'C_SVC_EVENT',     'C_SERVICE', 'NEOS Event Service for data exchange as an external Service defines all categories',                                          'C_SVC_EVENT',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_EVENT',          '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',15),
('General Service Category',                                     'SVCGEN',          'C_SVC_GENERAL',   'C_SERVICE', 'General Service for data exchange as an external Service defines all categories',                                             'C_SVC_GENERAL', @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_GENERAL',        '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',16)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_SVC_COMMON'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Notification Services Category',          'SVCNOTE',         'C_SVC_NOTE',       'C_SVC_COMMON', 'Defines all Notification and related Service categories',     'C_NOTIFICATION',  @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_NOTE',        '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Email Service Category',                  'SVCEML',          'C_SVC_EMAIL',      'C_SVC_COMMON', 'Defines all Email and related Service categories.',           'C_EMAIL',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_EMAIL',       '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Task Service Category',                   'SVCTSK',          'C_SVC_TASK',       'C_SVC_COMMON', 'Defines all Task and related Service categories',             'C_TASK',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_TASK',        '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Reporting Service Category',              'SVCRPT',          'C_SVC_REPORT',     'C_SVC_COMMON', 'Defines all Reporting and related Service categories',        'C_REPORT',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_REPORT',      '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Messaging Service Category',              'SVCMSG',          'C_SVC_MESSAGE',    'C_SVC_COMMON', 'Defines all Messaging and related Service categories',        'C_MESSAGE',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_MESSAGE',     '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Workflow Service Category',               'SVCWKF',          'C_SVC_WORKFLOW',   'C_SVC_COMMON', 'Defines all Workflow and related Service categories',         'C_WORKFLOW',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_WORKFLOW',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Event Service Category',                  'SVCEVT',          'C_SVC_EVENT',      'C_SVC_COMMON', 'Defines all Event and related Service categories.',           'C_EVENT',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_EVENT',       '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Error Service Category',                  'SVCERR',          'C_SVC_ERROR',      'C_SVC_COMMON', 'Defines all Error and related Service categories.',           'C_ERROR',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_ERROR',       '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Log Service Category',                    'SVCLOG',          'C_SVC_LOG',        'C_SVC_COMMON', 'Defines all Loging/Auding and related Service categories',    'C_LOG',           @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_LOG',         '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Scheduling Service Category',             'SVCSCHL',         'C_SVC_SCHEDULE',   'C_SVC_COMMON', 'Defines all Scheduling and related Service categories',       'C_SCHEDULE',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_SCHEDULE',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 10),
('Configuration Service Category',          'SVCCFG',          'C_SVC_SVC',        'C_SVC_COMMON', 'Defines all Configuration and related Service categories',    'C_CONFIGURATION', @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_TASK',        '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 11),
('List Service Category',                   'SVCLST',          'C_SVC_LIST',       'C_SVC_COMMON', 'Defines all List and related Servic categories',              'C_LIST',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', 'C_SVC_LIST',        '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 12)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_SVC_CES'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Person Service Category',               'SVCPER',          'C_SVC_PERSON',       'C_SVC_CES', 'Defines all Person and related Service categories',               'C_PERSON',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Organization Service Category',         'SVCORG',          'C_SVC_ORG',          'C_SVC_CES', 'Defines all Organization and related Service categories.',        'C_ORGANIZATION', @v_Status, @SDATE, '', 'C_TECHNOLOGY', '',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Correlated Service Category',           'SVCCOR',          'C_SVC_CORRELATE',    'C_SVC_CES', 'Defines all Correlated Entities and related Service categories',  'C_RELATION',     @v_Status, @SDATE, '', 'C_TECHNOLOGY', '',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Domain Core Service Category',          'SVCCOE',          'C_SVC_DOMAIN',       'C_SVC_CES', 'Defines all Domain core and related Service categories',          'C_DOMAIN',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Association Service Category',          'SVCASO',          'C_SVC_ASSOCIATE',    'C_SVC_CES', 'Defines all Association and related Service categories',          'C_ASSOCIATE',    @v_Status, @SDATE, '', 'C_TECHNOLOGY', '',    '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_CONFIGURATION'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Configuration Item Category',           'ITM',   'C_CFG_ITEM',           'C_CONFIGURATION', 'Defines Configuation contents By Item (Abstract).',         'C_CFG_ITEM',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Configuration Unit Category',           'UNT',   'C_CFG_UNIT',           'C_CONFIGURATION', 'Defines Configuation contents By Unit (Biz Domain).',       'C_CFG_UNIT',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Configuration Value Category',          'VAL',   'C_CFG_VALUE',          'C_CONFIGURATION', 'Defines Configuation Pair Values.',                         'C_CFG_VALUE',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Configuration Parementers Category',    'PAR',   'C_CFG_PARAMETER',      'C_CONFIGURATION', 'Defines Configuation Parameters',                           'C_CFG_PARAMETER',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_GUI'
Insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Screen/Page Category',   'SCR',      'C_SCREEN',        'C_GUI',    'Defines all GUI Screen Category',                     'C_SCREEN',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Dashbord Category',      'DSB',      'C_DASHBOARD',     'C_GUI',    'Defines all GUI Dashboard Category.',                 'C_DASHBOARD',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Page Category',          'PG',       'C_PAGE',          'C_GUI',    'Defines all GUI Page Category.',                      'C_PAGE',           @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('UI Control Category',    'CTL',      'C_CONTROL',       'C_GUI',    'Defines all GUI UI Control Category',                 'C_CONTROL',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Form Category',          'FRM',      'C_FORM',          'C_GUI',    'Defines all GUI Form Category',                       'C_FORM',           @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Field Category',         'FLD',      'C_FIELD',         'C_GUI',    'Defines all GUI Field Category.',                     'C_FIELD',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_COMMUNICATION'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER ) values
('Message Category',       'MSG',     'C_MESSAGE',       'C_COMMUNICATION', 'Message Category.',       'C_MESSAGE',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Alert Category',         'ALT',     'C_ALERT',         'C_COMMUNICATION', 'Alert Category.',         'C_ALERT',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Email Category',         'EML',     'C_EMAIL',         'C_COMMUNICATION', 'Email Category.',         'C_EMAIL',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Event Category',         'EVNT',    'C_EVENT',         'C_COMMUNICATION', 'Event Category.',         'C_EVENT',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Notification Category',  'NOTE',    'C_NOTIFICATION',  'C_COMMUNICATION', 'Notification Category.',  'C_NOTIFICATION', @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_INFRASTRUCTURE'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Identifier Category',        'ID',    'C_IDENTIFIER',  'C_INFRASTRUCTURE',  'Identifier.',                 'C_IDENTIFIER', @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Network Category',           'NTWK',  'C_NETWORK',     'C_INFRSTRUCTURE',   'Network Category.',           'C_NEXTWORK',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Platform Category',          'PLTM',  'C_PLATFORM',    'C_INFRSTRUCTURE',   'Platform Category.',          'C_PLATFORM',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Operating System Category',  'OS',    'C_OS',          'C_INFRSTRUCTURE',   'Operating System Category.',  'C_OS',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Server Category',            'SRV',   'C_SERVER',      'C_INFRSTRUCTURE',   'Server Category.',            'C_SERVER',     @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Storage Category',           'STGE',  'C_STORAGE',     'C_INFRSTRUCTURE',   'Storage Category.',           'C_STORAGE',    @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Database Category',          'DB',    'C_DATABASE',    'C_INFRSTRUCTURE',   'Database Category.',          'C_DATABASE',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Security Category',          'SEC',   'C_SECURITY',    'C_INFRSTRUCTURE',   'Security Category.',          'C_SECURITY',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_SECURITY'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Role Category',                      'RLE',      'C_ROLE',          'C_SECURITY', 'Roles.',                       'C_ROLE',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Access Category',                    'ACS',      'C_ACCESS',        'C_SECURITY', 'Accesses.',                    'C_ACCESS',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Application Security Category',      'SECAPP',   'C_SEC_APP',       'C_SECURITY', 'Application Security.',        'C_APPLICATION',   @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Service Security Category',          'SECSVC',   'C_SEC_SERVICE',   'C_SECURITY', 'Service Security.',            'C_SERVICE',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Module/Component Security Category', 'SECMOD',   'C_SEC_MODULE',    'C_SECURITY', 'Module Security.',             'C_MODULE',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Database Security Category',         'SECDB',    'C_SEC_DATABASE',  'C_SECURITY', 'Database Security.',           'C_DATABASE',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Data Security Category',             'SECDATA',  'C_SEC_DATA',      'C_SECURITY', 'Data Security.',               'C_DATA',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Network Security Category',          'SECNTWK',  'C_SEC_NETWORK',   'C_SECURITY', 'Network Security.',            'C_NETWORK',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ROLE'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Role Type Category',              'RLETPY',   'C_ROLE_TYPE',     'C_ROLE', 'Defines Role Types.',          'C_TYPE',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Profile Role Category',           'PRFRLE',   'C_PRF_ROLE',      'C_ROLE', 'Profile Roles.',               'C_PROIFLE',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Group Role Category',             'GRPRLE',   'C_GRP_ROLE',      'C_ROLE', 'Group Roles.',                 'C_GROUP',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Orgnizational Role Category',     'ORGRLE',   'C_ORG_ROLE',      'C_ROLE', 'Organizational Roles.',        'C_ORGANIZATION',  @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Personal Role Category',          'PERROLE',  'C_PER_ROLE',      'C_ROLE', 'Personal Roles.',              'C_PERSON',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ACCESS'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Access Level Category',           'ACSLVL',   'C_ACCESS_LEVEL',  'C_ACCESS', 'Access Level Category.',            'C_ACCESS_LEVEL',  @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Role Access Category',            'RLEACS',   'C_RLE_ACCESS',    'C_ACCESS', 'Role Access Category.',              'C_ROLE',          @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Security Access Category',        'SECACS',   'C_SEC_ACCESS',    'C_ACCESS', 'Secruity Access Category.',          'C_SECURITY',      @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Profile Access Category',         'PRFACS',   'C_PRF_ACCESS',    'C_ACCESS', 'Profile Access Category.',           'C_PROFILE',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Group Access Category',           'GRPACS',   'C_GRP_ACCESS',    'C_ACCESS', 'Group Access Category.',             'C_GROUP',         @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Orgnizational Access Category',   'ORGACS',   'C_ORG_ACCESS',    'C_ACCESS', 'Organizational Access Category.',    'C_ORGANIZATION',  @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Personal Access Category',        'PERACS',   'C_PER_ACCESS',    'C_ACCESS', 'Personal Access Category.',          'C_PERSON',        @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_RLE_ACCESS'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Multiple Role Access Category',   'MLTIRLES',   'C_MLTI_ROLE',       'C_RLE_ACCESS', 'Multiple Role Access Category.',     'C_ACCESS',       @v_Status, @SDATE, '', 'C_TECHNOLOGY', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1)


Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ORGANIZATION'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Laboratory Category',                   'LAB',      'C_LABORATORY',   'C_ORGANIZATION', 'Laboratory for various agents.',                      'C_LABORATORY',      @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Manufactor Category',                   'MFR',      'C_MANUFACTURER', 'C_ORGANIZATION', 'Manufactures for various agents.',                    'C_MANUFACTURER',    @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Research Category',                     'RSH',      'C_RESEARCH',     'C_ORGANIZATION', 'Research Organization for various agents.',           'C_RESEACH',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Department Category',                   'DEPT',     'C_DEPARTMENT',   'C_ORGANIZATION', 'US Governmental Department .',                        'C_DEPARTMENT',      @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Agency Category',                       'AGNY',     'C_AGENCY',       'C_ORGANIZATION', 'US Governmental Agency under Department .',           'C_AGENCY',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Institute Category',                    'INST',     'C_INSTITUTE',    'C_ORGANIZATION', 'Institute under Agency.',                             'C_INSTITUTE',       @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Center Category',                       'CTR',      'C_CENTER',       'C_ORGANIZATION', 'Center under Organization.',                          'C_CENTER',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Division Category',                     'DIV',      'C_DIVISION',     'C_ORGANIZATION', 'Division within Organization.',                       'C_DIVISION',        @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8),
('Branch Category',                       'BRNH',     'C_BRANCH',       'C_ORGANIZATION', 'Branch within Organization.',                         'C_BRANCH',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 9),
('Office Category',                       'OFC',      'C_OFFICE',       'C_ORGANIZATION', 'Office within Organization.',                         'C_OFFICE',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',10),
('Program Category',                      'PRG',      'C_PROGRAM',      'C_ORGANIZATION', 'Program within Organization.',                        'C_PROGRAM',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',11),
('University Category',                   'UNIV',     'C_UNIVERSITY',   'C_ORGANIZATION', 'University Organization.',                            'C_UNIVERSITY',      @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',12),
('Hospital Category',                     'HOSP',     'C_HOSPITAL',     'C_ORGANIZATION', 'Hospital Organization.',                              'C_HOSPITAL',        @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',13),
('Clinics Category',                      'CLC',      'C_CLINICS',      'C_ORGANIZATION', 'Clinics Organization.',                               'C_CLINICS',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',14),
('Organization Program Category',         'ORGPRG',   'C_ORG_PROGRAM',  'C_ORGANIZATION', 'Organizational Program.',                             'C_PROGRAM',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',15),
('Organization Network Category',         'ORGNTWK',  'C_ORG_NETWORK',  'C_ORGANIZATION', 'Organizational Network.',                             'C_NETWORK',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',15),
('Organization Person Category',          'ORGPER',   'C_ORG_PERSON',   'C_ORGANIZATION', 'Organization Person Category.',                       'C_PERSON',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',16),
('Organization Type Category',            'ORGTYP',   'C_ORG_TYPE',     'C_ORGANIZATION', 'Organization Type Category.',                         'C_TYPE',            @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',17),
('Organization Role Category',            'ORGROLE',  'C_ORG_ROLE',     'C_ORGANIZATION', 'Organization Role Category.',                         'C_ROLE',            @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',18),
('Organization To Organization Category', 'ORGORG',   'C_ORG_ORG',      'C_ORGANIZATION', 'Organizations To Organizations Category.',            'C_ORGANIZATION',    @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',19),
('Organization Group Category',           'ORGGRP',   'C_ORG_GROUP',    'C_ORGANIZATION', 'Organizations for Groups Category.',                  'C_GROUP',           @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',20),
('Group To Organization Category',        'GRPORG',   'C_GRP_ORG',      'C_ORGANIZATION', 'Groups To Organizations Category.',                   'C_ORGANIZATION',    @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',21),
('Group To Group Category',               'GRPGRP',   'C_GRP_GROUP',    'C_ORGANIZATION', 'Groups To Groups Category.',                          'C_ORGANIZATION',    @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',22),
('Site Category',                         'STE',      'C_SITE',         'C_ORGANIZATION', 'Site with Postcode Address for Organization.',        'C_ADDRESS',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY',23)


Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_CENTER'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Medical Center Category',               'MEDCTR',   'C_CTR_MEDICAL',  'C_CENTER', 'Medical Center for Treatment.',                       'C_MEIDCAL',          @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Research Center Category',              'RSHCTR',   'C_CTR_RESEARCH', 'C_CENTER', 'Reseach Center for Studies.',                         'C_RESEARCH',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Clinical Center Category',              'CLCCTR',   'C_CTR_CLINICAL', 'C_CENTER', 'Medical and Reseach Center.',                         'C_CLINICAL',         @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('IT/Information Center Category',        'ITCTR',    'C_CTR_IT',       'C_CENTER', 'IT/Information Center.',                              'C_IT',               @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Ticket/Helpdesk/Call Center Category',  'TKTCTR',   'C_CTR_TICKET',   'C_CENTER', 'Ticket/Helpdesk/Call Center.',                        'C_TICKET',           @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Operation/Support Center Category',     'OPSCTR',   'C_CTR_OPS',      'C_CENTER', 'Operation/Support Center.',                           'C_OPERATION',        @v_Status, @SDATE, '', 'C_ORGANIZATION', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_DOCUMENT'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Document Version Category',             'DOCVER',   'C_DOC_VERSION',  'C_DOCUMENT',     'Document Versions.',                                  'C_VERSION',         @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Report Category',                       'RPT',      'C_REPORT',       'C_DOCUMENT',     'Variosu Reports.',                                    'C_REPORT',          @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Document Location Category',            'DOCLOC',   'C_DOC_LOCATION', 'C_DOCUMENT',     'Document Locations.',                                 'C_LOCATION',        @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_PROCESS'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_CODE, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Procedure Category',         'PROC',   'C_PROCEDURE',   'C_PROCESS',   'Procedure Category.',                     'C_PROCEDURE', @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Submission Category',        'SUBM',   'C_SUBMISSION',  'C_PROCESS',   'Category for various Submissions.',       'C_SUBMISSION',@v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Revision Category',          'REV',    'C_REVISE',      'C_PROCESS',   'Revision Category.',                      'C_REVISE',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Comment Category',           'CMT',    'C_COMMENT',     'C_PROCESS',   'Comment Category.',                       'C_COMMENT',   @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Approval Category',          'APRL',   'C_APPROVAL',    'C_PROCESS',   'Category for various Approvals.',         'C_APPROVAL',  @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Denial Category',            'DENL',   'C_DENIAL',      'C_PROCESS',   'Category for various Denials.',           'C_DENIAL',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Review Category',            'RVW',    'C_REVIEW',      'C_PROCESS',   'Review Category.',                        'C_REVIEW',    @v_Status, @SDATE, '', 'C_BUSINESS', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7)


Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_PERSON'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Client/Customer Category',   'CUS',     'C_CLIENT',        'C_PERSON', 'Client/Customer.', 'C_CLIENT',         @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Manager Category',           'MGR',     'C_MANAGER',       'C_PERSON', 'Manager.',         'C_MANAGER',        @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Supervisor Category',        'SUPR',    'C_SUPERVISOR',    'C_PERSON', 'Supervisor.',      'C_SUPERVISOR',     @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Leading Person Category',    'LEAD',    'C_LEAD',          'C_PERSON', 'Leading Person.',  'C_LEAD',           @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('User Category',              'USR',     'C_USER',          'C_PERSON', 'Users.',           'C_USER',           @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Adminsitrator Category',     'ADM',     'C_ADMINISTRATOR', 'C_PEESON', 'Administrators.',  'C_ADMINISTRATOR',  @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_ADDRESS'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Contact Address Category',   'CNTADDR', 'C_ADDR_CONTACT',  'C_ADDRESS', 'Contact Address.',    'C_CONTACT',  @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Telecom Address Category',   'TELADDR', 'C_ADDR_TELECOM',  'C_ADDRESS', 'Telecom Address.',    'C_TELECOM',  @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Postcode Address Category',  'PSTADDR', 'C_ADDR_POSTCODE', 'C_ADDRESS', 'Postcode Address.',   'C_POSTCODE', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3)

Select @PID = IDF from CODE_CATEGORY_TYPES where VALUE_CODE = 'C_GROUP'
insert into CODE_CATEGORY_TYPES (NAME_CODE, ACRONYM_NAME, VALUE_CODE,CATEGORY_CODE, [Description], TYPE_CODE, STATUS_CODE, STATUS_DATE, Comments, REFERENCE_ID, REFERENCE_NAME, CREATED_DATE, CREATED_BY, PARENT_IDF, PARENT_CODE, POSITION_ORDER) values
('Organization Group Category',           'GRPORG',   'C_GRP_ORG',        'C_GROUP', 'Group Organizations.',              'C_ORGANIZATION', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 1),
('Application Group Category',            'GRPAPP',   'C_GRP_APP',        'C_GROUP', 'Group Applications.',               'C_APPLICATION',  @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 2),
('Service Group Category',                'GRPSVC',   'C_GRP_SERVICE',    'C_GROUP', 'Group Servics.',                    'C_SERVICE',      @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 3),
('Role Group Category',                   'GRPROLE',  'C_GRP_ROLE',       'C_GROUP', 'Group Organizations.',              'C_ROLE',         @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 4),
('Notification Group Category',           'GRPNOTN',  'C_GRP_NOTIFY',     'C_GROUP', 'Notification Group.',               'C_NOTIFICATION', @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 5),
('Message Group Category',                'GRPMSG',   'C_GRP_MESSAGE',    'C_GROUP', 'Message Group.',                    'C_MESSAGE',      @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Document Group Category',               'GRPDOC',   'C_GRP_DOCUMENT',   'C_GROUP', 'Document Group.',                   'C_DOCUMENT',     @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('User Group Category',                   'GRPUSR',   'C_GRP_USER',       'C_GROUP', 'User Group.',                       'C_USER',         @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Contact Group Category',                'GRPCTA',   'C_GRP_CONTACT',    'C_GROUP', 'Contact Group.',                    'C_CONTACT',      @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 6),
('Task Order (TO) Group Category',        'GRPTO',    'C_GRP_TASKORDER',  'C_GROUP', 'Task Order (TO) Group.',            'C_TASKORDER',    @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('CLIN Group Category',                   'GRPCLIN',  'C_GRP_CLIN',       'C_GROUP', 'CLIN Group.',                       'C_CLIN',         @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 7),
('Person Group Category',                 'GRPPER',   'C_GRP_PERSON',     'C_GROUP', 'Person Group.',                     'C_PERSON',       @v_Status, @SDATE, '', '', '', @SDATE, @SUSER, @PID, 'C_SUBCATEGORY', 8)

Print '------------- Data Migration  [dbo].[sc_Category_Type]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_ErrorEvents]
----
-------------
Print '------------- Data Migration  [dbo].[sc_ErrorEvents]  -----START: ' + cast(GetDate() as varchar(24))
-- install Default CODE_ERRORS and CodedEvents
declare @SDATE as DateTime = GetDATE(), @SUSER as varchar(128) = SUSER_Name(), @PID as varchar(64) = ''
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

SELECT @v_IDF = IDF FROM [dbo].[CODE_APPLICATIONS] WHERE VALUE_CODE = 'C_NEOS'
INSERT INTO [dbo].[CODE_ERRORS] ([NAME_CODE], [VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE] ,[SEVERITY_CODE],[Description],[STATUS_CODE],[STATUS_DATE],[Comments],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME] ,[CREATED_DATE] ,[CREATED_BY],[APPLICATION_IDF], [POSITION_ORDER]) VALUES
   ('Enterpise Error Set',            'C_ERR_NEOS',    'C_DEFAULT',  'C_ENTERPRISE',  '',       'A set of errors at Enterprise Level.',                                          @v_Status, @SDATE,'','C_ERR', 'C_ENTERPRISE',      'ExceptionNEOS',            @SDATE, @SUSER, @v_IDF, 41000),
   ('Application Error Set',          'C_ERR_APP',     'C_DEFAULT',  'C_APPLICATOIN', '',       'A set of errors at Application Level.',                                         @v_Status, @SDATE,'','C_ERR', 'C_APPLICATION',     'ExceptionApplication',     @SDATE, @SUSER, @v_IDF, 42000),
   ('Service Error Set',              'C_ERR_SERVICE', 'C_DEFAULT',  'C_SERVICE',     '',       'A set of errors at Service Level.',                                             @v_Status, @SDATE,'','C_ERR', 'C_SERVICE',         'ExceptionService',         @SDATE, @SUSER, @v_IDF, 43000),
   ('Database Error Set',             'C_ERR_DATABASE','C_DEFAULT',  'C_DATABASE',    '',       'A set of errors at Database Level.',                                            @v_Status, @SDATE,'','C_ERR', 'C_DATABASE',        'ExceptionDatabase',        @SDATE, @SUSER, @v_IDF, 44000),
   ('Data Sharing Error Set',         'C_ERR_DATA',    'C_DEFAULT',  'C_DATA',        '',       'A set of errors at Data sharing Level.',                                        @v_Status, @SDATE,'','C_ERR', 'C_DATA',            'ExceptionData',            @SDATE, @SUSER, @v_IDF, 45000),
   ('Module Error Set',               'C_ERR_MODULE',  'C_DEFAULT',  'C_MODULE',      '',       'A set of errors at Module Level.',                                              @v_Status, @SDATE,'','C_ERR', 'C_MODULE',          'ExceptionModule',          @SDATE, @SUSER, @v_IDF, 46000),
   ('General Error Set',              'C_ERR_DEFAULT', 'C_DEFAULT',  'C_OTHER',       '',       'A set of general errors.',                                                      @v_Status, @SDATE,'','C_ERR', 'C_DEFAULT',         'ExceptionDefault',         @SDATE, @SUSER, @v_IDF, 47000),
   ('Message Error Set',              'C_ERR_MESSAGE', 'C_DEFAULT',  'C_MESSAGE',     '',       'A set of errors at Messages Level.',                                            @v_Status, @SDATE,'','C_ERR', 'C_MESSAGE',         'ExceptionMessage',         @SDATE, @SUSER, @v_IDF, 48000),
   ('Validation Error Set',           'C_ERR_VALIDATE','C_DEFAULT',  'C_VALIDATION',  '',       'A set of errors various Validation.',                                           @v_Status, @SDATE,'','C_ERR', 'C_VALIDATION',      'ExceptionValidation',      @SDATE, @SUSER, @v_IDF, 48500),
   ('Notification Error Set',         'C_ERR_NOTE',    'C_DEFAULT',  'C_NOTIFICATION','',       'A set of errors at Notification Level.',                                        @v_Status, @SDATE,'','C_ERR', 'C_NOTIFICATION',    'ExceptionNotification',    @SDATE, @SUSER,@v_IDF,  49100),
   ('SP3 Application Error Set',      'C_ERR_APP_SP',  'C_NEOS_SP',  'C_APPLICATION', '',       'A set of errors in SOLUTIONS AND PARTENERS 3 (SP3) Application Level.',         @v_Status, @SDATE,'','C_SP',  'C_SP_APP',          'ExceptionAppSP',           @SDATE, @SUSER,@v_IDF,  49200),
   ('SP3 Service Error Set',          'C_ERR_SVC_SP',  'C_NEOS_SP',  'C_SERVICE',     '',       'A set of errors in SOLUTIONS AND PARTENERS 3 (SP3) Service Level.',             @v_Status, @SDATE,'','C_SP',  'C_SP_SERVICE',      'ExceptionSvcSP',           @SDATE, @SUSER,@v_IDF,  49210),
   ('SP3 Data Error Set',             'C_ERR_DAT_SP',  'C_NEOS_SP',  'C_DATA',        '',       'A set of errors in SOLUTIONS AND PARTENERS 3 (SP3) Data Level.',                @v_Status, @SDATE,'','C_SP',  'C_SP_DATA',         'ExceptionDataSP',          @SDATE, @SUSER,@v_IDF,  49220),
   ('SP3 Module Error Set',           'C_ERR_MOD_SP',  'C_NEOS_SP',  'C_MODULE',      '',       'A set of errors in SOLUTIONS AND PARTENERS 3 (SP3) Module Level.',              @v_Status, @SDATE,'','C_SP',  'C_SP_MODULE',       'ExceptionModuleSP',        @SDATE, @SUSER,@v_IDF,  49230),
   ('SP3 Error Set',                  'C_ERR_OTH_SP',  'C_NEOS_SP',  'C_OTHER',       '',       'A set of errors in SOLUTIONS AND PARTENERS 3 (SP3) General Ones.',              @v_Status, @SDATE,'','C_SP',  'C_SP_OTHER',        'ExceptionSP',              @SDATE, @SUSER,@v_IDF,  49250),
   ('GSS Application Error Set',      'C_ERR_APP_GS',  'C_NEOS_GS',  'C_APPLICATION', '',       'A set of errors in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Application Level.',  @v_Status, @SDATE,'','C_GS',  'C_GS_APP',       'ExceptionAppGS',           @SDATE, @SUSER,@v_IDF,  49310),
   ('GSS Service Error Set',          'C_ERR_SVC_GS',  'C_NEOS_GS',  'C_SERVICE',     '',       'A set of errors in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Service Level.',      @v_Status, @SDATE,'','C_GS',  'C_GS_SERVICE',   'ExceptionSvcGS',           @SDATE, @SUSER,@v_IDF,  49320),
   ('GSS Data Error Set',             'C_ERR_DAT_GS',  'C_NEOS_GS',  'C_DATA',        '',       'A set of errors in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Data Level.',         @v_Status, @SDATE,'','C_GS',  'C_GS_DATA',      'ExceptionDataGS',          @SDATE, @SUSER,@v_IDF,  49330),
   ('GSS Module Error Set',           'C_ERR_MOD_GS',  'C_NEOS_GS',  'C_MODULE',      '',       'A set of errors in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Module Level.',       @v_Status, @SDATE,'','C_GS',  'C_GS_MODULE',    'ExceptionModGS',           @SDATE, @SUSER,@v_IDF,  49340),
   ('GSS Error Set',                  'C_ERR_OTH_GS',  'C_NEOS_GS',  'C_OTHER',       '',       'A set of errors in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) General Ones.',       @v_Status, @SDATE,'','C_GS',  'C_GS_OTHER',     'ExceptionGS',              @SDATE, @SUSER,@v_IDF,  49350),
   ('CS Application Error Set',       'C_ERR_APP_CS',  'C_NEOS_CS',  'C_APPLICATION', '',       'A set of errors in COMMODITIES/SOLUTIONS (CS) Application Level.',                 @v_Status, @SDATE,'','C_CS',  'C_CS_APP',       'ExceptionAppCS',           @SDATE, @SUSER,@v_IDF,  49410),
   ('CS Service Error Set',           'C_ERR_SVC_CS',  'C_NEOS_CS',  'C_SERVICE',     '',       'A set of errors in COMMODITIES/SOLUTIONS (CS) Service Level.',                     @v_Status, @SDATE,'','C_CS',  'C_CS_SERVICE',   'ExceptionSvcCS',           @SDATE, @SUSER,@v_IDF,  49420),
   ('CS Data Error Set',              'C_ERR_DAT_CS',  'C_NEOS_CS',  'C_DATA',        '',       'A set of errors in COMMODITIES/SOLUTIONS (CS) Data Level.',                        @v_Status, @SDATE,'','C_CS',  'C_CS_DATA',      'ExceptionDataCS',          @SDATE, @SUSER,@v_IDF,  49430),
   ('CS Module Error Set',            'C_ERR_MOD_CS',  'C_NEOS_CS',  'C_MODULE',      '',       'A set of errors in COMMODITIES/SOLUTIONS (CS) Module Level.',                      @v_Status, @SDATE,'','C_CS',  'C_CS_MODULE',    'ExceptionModCS',           @SDATE, @SUSER,@v_IDF,  49440),
   ('CS Error Set',                   'C_ERR_OTH_CS',  'C_NEOS_CS',  'C_OTHER',       '',       'A set of errors in COMMODITIES/SOLUTIONS (CS) General Ones.',                      @v_Status, @SDATE,'','C_CS',  'C_CS_OTHER',     'ExceptionCS',              @SDATE, @SUSER,@v_IDF,  49450)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_ERR_DATABASE'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Stored Procedure (SP) Failure',                 'C_SP_DEFAULT',     'C_PROCEDURE', 'C_ERR_DATABASE',  'C_NORMAL',  'SPDEF',   'Stored Procedure (SP) failure (default).',           '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,50100),
         ('Trigger (TRI) Failure',                         'C_TRI_DEFAULT',    'C_TRIGGER',   'C_ERR_DATABASE',  'C_NORMAL',  'TRIDEF',  'Trigger (TRI) failure (default).',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,50200),
         ('Constraint(CN) Failure',                        'C_CON_DEFAULT',    'C_CONSTRAINT','C_ERR_DATABASE',  'C_NORMAL',  'CONDef',  'Constraints (CON) failure (default).',               '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,50300),
         ('Invalid Record',                                'C_REC_INVALID',    'C_INVALID',   'C_ERR_DATABASE',  'C_NORMAL',  'INVALID', 'Invalid Record during DB operaion.',                 '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60000),
         ('Duplicated Record Existence',                   'C_REC_DUPLICATE',  'C_DUPLICATE', 'C_ERR_DATABASE',  'C_NORMAL',  'DUPREC',  'There exists duplicated records.',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60001),
         ('No Existence of the Parent Record',             'C_REC_NO_PARENT',  'C_PARENT',    'C_ERR_DATABASE',  'C_NORMAL',  'NOPARNT', 'Could not allocate the existence of parent record.', '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60002),
         ('No Record Found',                               'C_REC_NO_FOUND',   'C_FOUND',     'C_ERR_DATABASE',  'C_NORMAL',  'NOREC',   'Could not allocate the records.',                    '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60003),
         ('No Data Record',                                'C_REC_NO_DATA',    'C_DATA',      'C_ERR_DATABASE',  'C_NORMAL',  'NODATA',  'No Data is found in records.',                       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60004),
         ('No Acces Record',                               'C_REC_NO_ACCESS',  'C_ACCESS',    'C_ERR_DATABASE',  'C_NORMAL',  'NOACS',   'No Access is allowed to record.',                    '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60005),
         ('Other Illegal Record',                          'C_REC_DEFAULT',    'C_DEFAULT',   'C_ERR_DATABASE',  'C_NORMAL',  'ILLREC',  'Illegal/Bad records.',                               '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,60006),
         ('Error Record',                                  'C_REC_ERROR',      'C_ERROR',     'C_ERR_DATABASE',  'C_NORMAL',  'ERRREC',  'Any Error/corrupted/Bad record.',                    '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',        'ExceptionCS', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,61000)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_ERR_VALIDATE'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Business Rule Validation Failure',               'C_VLD_BUSINESS',   'C_VALIDATION', 'C_BUSINESS',      'C_NORMAL',  'BIZERR',  'Business rule failure (default).',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_BUSINESS',   'ExceptionBIZ',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48510),
         ('Data Validation Failure',                        'C_VLD_DATA',       'C_VALIDATION', 'C_DATA',          'C_NORMAL',  'DATERR',  'Data failure (default).',                            '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DATA',       'ExceptionData',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48610),
         ('Format Validation Failure',                      'C_VLD_FORMAT',     'C_VALIDATION', 'C_FORMAT',        'C_NORMAL',  'FMTERR',  'Format failure (default).',                          '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_FORMAT',     'ExceptionFormat',  @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48710),
         ('Other Validation Failure',                       'C_VLD_ERROR',      'C_VALIDATION', 'C_OTHER',         'C_NORMAL',  'OTHERR',  'Any Other failed validation.',                       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',      'ExceptionOther',   @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48900)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_VLD_DATA'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Possible Missing Data, Must not be Blank',       'C_WRN_NO_BLNK',    'C_VLD_WARNING', 'C_BUSINESS',      'C_NORMAL',  'WBLNK',     'Possible bad data, Must not be blank.',                                                   '', @v_STATUS, @SDATE,'','C_VALIDATION',  'C_DATA',       'ExceptionData',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48611),
         ('Bad Data format, Must be numeric',               'C_ERR_NUM',        'C_VLD_ERROR',   'C_DATA',          'C_NORMAL',  'ENUMFMT',   'Bad Data Format, Must be numeric.',                                                       '', @v_STATUS, @SDATE,'','C_VALIDATION',  'C_FORMAT',     'ExceptionFormat',  @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48612),
         ('Missing Data, Must not be blank',                'C_ERR_NO_BLNK',    'C_VLD_ERROR',   'C_NO_BLANK',      'C_NORMAL',  'EBLNK',     'Missing Data, Must not be blank',                                                         '', @v_STATUS, @SDATE,'','C_VALIDATION',  'C_DATA',       'ExceptionData',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48613),
         ('Configuration Type Error',                       'C_ERR_CFG',        'C_VLD_ERROR',   'C_CONFIGURATION', 'C_NORMAL',  'ECFGTYP',   'Only Configuration Type: For Base product and Only Configuration SubType: For Add On.',   '', @v_STATUS, @SDATE,'','C_VALIDATION',  'C_MATCH',      'ExceptionCFG',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,48614)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_REC_INVALID'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Bad or Invalid Email',                       'C_BAD_EMAIL',         'C_VALIDATION', 'C_EMAIL',        'C_NORMAL',  'EMLERR',  'Bad/Invalid Email entered in the record.',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_TELECOM',      'ExceptionEmail',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80001),
         ('Bad or Invalid Name',                        'C_BAD_NAME',          'C_VALIDATION', 'C_NAME',         'C_NORMAL',  'NMERR',   'Bad/Invalid Name entered in the record.',                    '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_PERSON',       'ExceptionName',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80002),
         ('Bad or Invalid Phone',                       'C_BAD_PHONE',         'C_VALIDATION', 'C_PHONE',        'C_NORMAL',  'PHNERR',  'Bad/Invalid Phone entered in the record.',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_TELECOM',      'ExceptionPhone',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80003),
         ('Bad or Invalid Fax',                         'C_BAD_FAX',           'C_VALIDATION', 'C_FAX',          'C_NORMAL',  'FAXERR',  'Bad/Invalid Fax entered in the record.',                     '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_TELECOM',      'ExceptionFax',       @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80004),
         ('Bad or Invalid Password',                    'C_BAD_PASSWORD',      'C_VALIDATION', 'C_PASSWORD',     'C_NORMAL',  'PWDERR',  'Bad/Invalid Password entered in the record.',                '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_SECURITY',     'ExceptionPasword',   @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80005),
         ('Bad or Invalid UserName',                    'C_BAD_USERNAME',      'C_VALIDATION', 'C_USERNAME',     'C_NORMAL',  'UNMERR',  'Bad/Invalid UserName entered in the record.',                '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_SECURITY',     'ExceptionUserName',  @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80006),
         ('Bad or Invalid Organizaton Name',            'C_BAD_ORG_NAME',      'C_VALIDATION', 'C_NAME',         'C_NORMAL',  'ORGERR',  'Bad/Invalid organization Name entered in the record.',       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_ORGANIZATION', 'ExceptionOrgName',   @SDATE, @SUSER,@v_Code, @PID,@v_IDF,80007),
         ('Bad or Invalid Input',                       'C_BAD_INPUT',         'C_VALIDATION', 'C_INPUP',        'C_NORMAL',  'FMTERR',  'Bad/Invalid entry/input is entered.',                        '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_INPUT',        'ExceptionInput',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,81000),
         ('Bad or Invalid Action',                      'C_BAD_ACTION',        'C_VALIDATION', 'C_ACTION',       'C_NORMAL',  'ACTERR',  'Bad/Invalid Action is performed.',                           '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_ACTION',       'ExceptionAction',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82000),
         ('Bad or Invalid Format',                      'C_BAD_FORMAT',        'C_VALIDATION', 'C_FORMAT',       'C_NORMAL',  'FMTERR',  'Bad/Invalid Format is entered in the record.',               '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_FORMAT',       'ExceptionFormat',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,83000),
         ('Bad or Invalid Record',                      'C_BAD_RECORD',        'C_VALIDATION', 'C_RECORD',       'C_NORMAL',  'RECERR',  'Bad/Invalid Record is occurred.',                            '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_RECORD',       'ExceptionRecord',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,85000)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_BAD_ACTION'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Bad Insertion',                       'C_BAD_INSERT',          'C_ACTION', 'C_INSERT',        'C_NORMAL',  'ADDERR',  'Fail to Insert/add/create a record.',                   '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_ADD',      'ExceptionInsert',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82001),
         ('Bad Deletion',                        'C_BAD_DELETE',          'C_ACTION', 'C_DELETE',        'C_NORMAL',  'DELERR',  'Fail to delete/remove a record.',                       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DELETE',   'ExceptionDelete',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82002),
         ('Bad Update',                          'C_BAD_UPDATE',          'C_ACTION', 'C_UPDATE',        'C_NORMAL',  'UPDERR',  'Fail to Update/Modify a record.',                       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_UPDATE',   'ExceptionUpdate',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82003),
         ('Bad Delivery',                        'C_BAD_DELIVER',         'C_ACTION', 'C_DELIVER',       'C_NORMAL',  'DLVERR',  'Fail to Deliver/Distribute Deliveries.',                '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DELIVER',  'ExceptionDeliver',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82004),
         ('Bad Installation',                    'C_BAD_INSTALL',         'C_ACTION', 'C_INSTALLATION',  'C_NORMAL',  'INSERR',  'Fail to install package/application.',                  '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_INSTALL',  'ExceptionInstall',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82005),
         ('Bad Notification',                    'C_BAD_NOTIFY',          'C_ACTION', 'C_NOTIFICATION',  'C_NORMAL',  'NTNERR',  'Fail to Notify a group.',                               '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_NOTIFY',   'ExceptionNotify',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82006),
         ('Bad Post',                            'C_BAD_POST',            'C_ACTION', 'C_POST',          'C_NORMAL',  'PSTERR',  'Fail to Post information.',                             '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_POST',     'ExceptionPost',        @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82007),
         ('Bad Receive',                         'C_BAD_RECEIVE',         'C_ACTION', 'C_RECEIVE',       'C_NORMAL',  'REVERR',  'Fail to Receive information.',                          '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_RECEVE',   'ExceptionReceive',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82008),
         ('Bad Release',                         'C_BAD_RELEASE',         'C_ACTION', 'C_RELEASE',       'C_NORMAL',  'RELERR',  'Fail to Release information.',                          '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_RELEASE',  'ExceptionRelease',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82009),
         ('Bad Send',                            'C_BAD_SEND',            'C_ACTION', 'C_SEND',          'C_NORMAL',  'SNDERR',  'Fail to Send information.',                             '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_SEND',     'ExceptionSend',        @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82010),
         ('Bad Validation',                      'C_BAD_VERIFY',          'C_ACTION', 'C_VERIFICATION',  'C_NORMAL',  'VLDERR',  'Fail to validate/verify Information.',                  '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_VALIDATE', 'ExceptionValidate',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82011),
         ('Bad other Action',                    'C_BAD_ACT_OTHER',       'C_ACTION', 'C_OTHER',         'C_NORMAL',  'OTHERR',  'Fail to perform other action on a record.',             '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_OTHER',    'ExceptionOtherAction', @SDATE, @SUSER,@v_Code, @PID,@v_IDF,82090)

SELECT @PID = IDF   FROM [dbo].[CODE_ERRORS] WHERE VALUE_CODE = 'C_BAD_FORMAT'
INSERT INTO [dbo].[CODE_ERRORS]([NAME_CODE],[VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE],[SEVERITY_CODE],[ACRONYM_NAME],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
         ('Bad Length',                         'C_BAD_LENGTH',          'C_FORMAT', 'C_LENGTH',         'C_NORMAL',  'LENERR',  'Bad and Invalid length is entered in a record.',       '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DATA',      'ExceptionLength',      @SDATE, @SUSER,@v_Code, @PID,@v_IDF,83001),
         ('Bad Type',                           'C_BAD_TYPE',            'C_FORMAT', 'C_TYPE',           'C_NORMAL',  'TYPERR',  'Bad and Invalid Type is entered in a record.',         '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DATA',      'ExceptionType',        @SDATE, @SUSER,@v_Code, @PID,@v_IDF,83002),
         ('Bad Content',                        'C_BAD_CONTENT',         'C_FORMAT', 'C_CONTENT',        'C_NORMAL',  'CNTERR',  'Bad and Invalid Content is entered in a record.',      '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DATA',      'ExceptionContent',     @SDATE, @SUSER,@v_Code, @PID,@v_IDF,83003),
         ('Bad other format',                   'C_BAD_FMT_OTHER',       'C_FORMAT', 'C_CONTENT',        'C_NORMAL',  'CNTERR',  'Bad and Invalid other format is entered in a record.', '', @v_STATUS, @SDATE,'','C_DATABASE',  'C_DATA',      'ExceptionFmtOther',    @SDATE, @SUSER,@v_Code, @PID,@v_IDF,83090)

INSERT INTO [dbo].[CODE_EVENTS] ([NAME_CODE], [VALUE_CODE],[TYPE_CODE],[CATEGORY_CODE], [Description],[STATUS_CODE],[STATUS_DATE],[Comments],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME] ,[CREATED_DATE] ,[CREATED_BY], [PARENT_IDF], [POSITION_ORDER]) VALUES
   ('Application Event Set',          'C_EVT_APP',     'C_DEFAULT',     'C_APPLICATION',        'A set of events at Application Level.',                                         @v_Status, @SDATE,'','C_EVT', 'C_APPLICATION',     '',@SDATE, @SUSER, NULL, 1),
   ('Service Event Set',              'C_EVT_SERVICE', 'C_DEFAULT',     'C_SERVICE',            'A set of events at Service Level.',                                             @v_Status, @SDATE,'','C_EVT', 'C_SERVICE',         '',@SDATE, @SUSER, NULL, 2),
   ('Database Event Set',             'C_EVT_DATABASE','C_DEFAULT',     'C_DATABASE',           'A set of events at Database Level.',                                            @v_Status, @SDATE,'','C_EVT', 'C_DATABASE',        '',@SDATE, @SUSER, NULL, 3),
   ('Data Share Event Set',           'C_EVT_DATA',    'C_DEFAULT',     'C_DATA',               'A set of events at Data Share Level.',                                          @v_Status, @SDATE,'','C_EVT', 'C_DATA',            '',@SDATE, @SUSER, NULL, 4),
   ('Module Event Set',               'C_EVT_MODULE',  'C_DEFAULT',     'C_MODULE',             'A set of events at Module Level.',                                              @v_Status, @SDATE,'','C_EVT', 'C_MODULE',          '',@SDATE, @SUSER, NULL, 5),
   ('General Event Set',              'C_EVT_DEFAULT', 'C_DEFAULT',     'C_OTHER',              'A set of General events.',                                                      @v_Status, @SDATE,'','C_EVT', 'C_DEFAULT',         '',@SDATE, @SUSER, NULL, 6),
   ('Message Event Set',              'C_EVT_MESSAGE', 'C_DEFAULT',     'C_MESSAGE',            'A set of events at Message Level.',                                             @v_Status, @SDATE,'','C_EVT', 'C_MESSAGE',         '',@SDATE, @SUSER, NULL, 7),
   ('Notification Event Set',         'C_EVT_NOTE',    'C_DEFAULT',     'C_NOTIFICATION',       'A set of events at Notification Level.',                                        @v_Status, @SDATE,'','C_EVT', 'C_NOTIFICATION',    '',@SDATE, @SUSER, NULL, 8),
   ('GSS Application Event Set',      'C_EVT_PDD_APP', 'C_NEOS_GS',     'C_APPLICATION',        'A set of events in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Application Level.',  @v_Status, @SDATE,'','C_GS',  'C_GS_APP',          '',@SDATE, @SUSER, NULL, 9),
   ('GSS Service Event Set',          'C_EVT_PDD_SVC', 'C_NEOS_GS',     'C_SERVICE',            'A set of events in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Service Level.',      @v_Status, @SDATE,'','C_GS',  'C_GS_SERVICE',      '',@SDATE, @SUSER, NULL, 10),
   ('GSS Data Event Set',             'C_EVT_PDD_DAT', 'C_NEOS_GS',     'C_DATA',               'A set of events in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Data Level.',         @v_Status, @SDATE,'','C_GS',  'C_GS_DATA',         '',@SDATE, @SUSER, NULL, 11),
   ('GSS Module Event Set',           'C_EVT_PDD_MOD', 'C_NEOS_GS',     'C_MODULE',             'A set of events in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) Module Level.',       @v_Status, @SDATE,'','C_GS',  'C_GS_MODULE',       '',@SDATE, @SUSER, NULL, 12),
   ('GSS Event Set',                  'C_EVT_PDD_OTH', 'C_NEOS_GS',     'C_OTHER',              'A set of events in GOVERNMENT-WIDE STRATEGIC SOLUTIONS (GSS) General Ones.',       @v_Status, @SDATE,'','C_GS',  'C_GS_OTHER',        '',@SDATE, @SUSER, NULL, 13),
   ('CS Application Event Set',       'C_EVT_PAE_APP', 'C_NEOS_CS',     'C_APPLICATION',        'A set of events in COMMODITIES/SOLUTIONS (CS) Application Level.',                 @v_Status, @SDATE,'','C_CS',  'C_CS_APP',          '',@SDATE, @SUSER, NULL, 14),
   ('CS Service Event Set',           'C_EVT_PAE_SVC', 'C_NEOS_CS',     'C_SERVICE',            'A set of events in COMMODITIES/SOLUTIONS (CS) Service Level.',                     @v_Status, @SDATE,'','C_CS',  'C_CS_SERVICE',      '',@SDATE, @SUSER, NULL, 15),
   ('CS Data Event Set',              'C_EVT_PAE_DAT', 'C_NEOS_CS',     'C_DATA',               'A set of events in COMMODITIES/SOLUTIONS (CS) Data Level.',                        @v_Status, @SDATE,'','C_CS',  'C_CS_DATA',         '',@SDATE, @SUSER, NULL, 16),
   ('CS Module Event Set',            'C_EVT_PAE_MOD', 'C_NEOS_CS',     'C_MODULE',             'A set of events in COMMODITIES/SOLUTIONS (CS) Module Level.',                      @v_Status, @SDATE,'','C_CS',  'C_CS_MODULE',       '',@SDATE, @SUSER, NULL, 17),
   ('CS Event Set',                   'C_EVT_PAE_OTH', 'C_NEOS_CS',     'C_OTHER',              'A set of events in COMMODITIES/SOLUTIONS (CS) General Ones.',                      @v_Status, @SDATE,'','C_CS',  'C_CS_OTHER',        '',@SDATE, @SUSER, NULL, 18),
   ('SP3 Application Event Set',      'C_EVT_PDA_APP', 'C_NEOS_SP',     'C_APPLICATION',        'A set of events in SOLUTIONS AND PARTENERS 3 (SP3) Application Level.',            @v_Status, @SDATE,'','C_SP',  'C_SP_APP',          '',@SDATE, @SUSER, NULL, 19),
   ('SP3 Service Event Set',          'C_EVT_PDA_SVC', 'C_NEOS_SP',     'C_SERVICE',            'A set of events in SOLUTIONS AND PARTENERS 3 (SP3) Service Level.',                @v_Status, @SDATE,'','C_SP',  'C_SP_SERVICE',      '',@SDATE, @SUSER, NULL, 20),
   ('SP3 Data Event Set',             'C_EVT_PDA_DAT', 'C_NEOS_SP',     'C_DATA',               'A set of events in SOLUTIONS AND PARTENERS 3 (SP3) Data Level.',                   @v_Status, @SDATE,'','C_SP',  'C_SP_DATA',         '',@SDATE, @SUSER, NULL, 21),
   ('SP3 Module Event Set',           'C_EVT_PDA_MOD', 'C_NEOS_SP',     'C_MODULE',             'A set of events in SOLUTIONS AND PARTENERS 3 (SP3) Module Level.',                 @v_Status, @SDATE,'','C_SP',  'C_SP_MODULE',       '',@SDATE, @SUSER, NULL, 22),
   ('SP3 Event Set',                  'C_EVT_PDA_OTH', 'C_NEOS_SP',     'C_OTHER',              'A set of events in SOLUTIONS AND PARTENERS 3 (SP3) General Ones.',                 @v_Status, @SDATE,'','C_SP',  'C_SP_OTHER',        '',@SDATE, @SUSER, NULL, 23)

Select @PID = IDF from [dbo].[CODE_EVENTS] Where VALUE_CODE = 'C_EVT_SERVICE'
SET @v_Code = 'C_MEMBER'
INSERT INTO [dbo].[CODE_EVENTS] ([NAME_CODE], [VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE], [Description],[STATUS_CODE],[STATUS_DATE],[Comments],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME] ,[CREATED_DATE] ,[CREATED_BY], PARENT_IDF, PARENT_CODE) VALUES
   ('Service for Expiration Date Event',       'C_EVT_EXPIRE',  'C_SERVICE',        'C_EXPIRATIOM',        'A System of Date Expiration Check-up Service Event using SerivceList .',        @v_Status, @SDATE,'2:C_MINUTE',  'C_EVT_SERVICE', 'C_EXPIRATION',      '',@SDATE, @SUSER, @PID, @v_Code),
   ('Service for Reminder/Nocitce Event',      'C_EVT_REMIND',  'C_SERVICE',        'C_REMIND',            'A System of Send-Out reminder/notice Service Event.',                           @v_Status, @SDATE,'2:C_MINUTE',  'C_EVT_SERVICE', 'C_REMIND',          '',@SDATE, @SUSER, @PID, @v_Code),
   ('Service for Lock Check Event',            'C_EVT_LOCK',    'C_SERVICE',        'C_LOCK',              'A System of Lock Validation Service Event.',                                    @v_Status, @SDATE,'2:C_MINUTE',  'C_EVT_SERVICE', 'C_LOCK',            '',@SDATE, @SUSER, @PID, @v_Code),
   ('Service for Date Validation Event',       'C_EVT_DATE',    'C_SERVICE',        'C_DATE',              'A System of Date Validation Service Event.',                                    @v_Status, @SDATE,'1:C_DAILY',   'C_EVT_SERVICE', 'C_DATE',            '',@SDATE, @SUSER, @PID, @v_Code),
   ('Service for Configuration Sync Event',    'C_EVT_CFG',     'C_SERVICE',        'C_SVC_CFG',           'A System of Configuraiton Sync Service Event.',                                 @v_Status, @SDATE,'1:C_DAILY',   'C_EVT_SERVICE', 'C_CONFIGURATION',   '',@SDATE, @SUSER, @PID, @v_Code),
   ('Maintenance Shutdown Event',              'C_EVT_MAIN',    'C_MAINTENANCE',    'C_SHUTDOWN',          'A System Shutdown Maintenance Event.',                                          @v_Status, @SDATE,'1:C_WEEKLY',  'C_EVT_SERVICE', 'C_SHUTDOWN',        '',@SDATE, @SUSER, @PID, @v_Code),
   ('Maintenance Deployment Event',            'C_EVT_DEPLOY',  'C_MAINTENANCE',    'C_DEPLOYMENT',        'A System Deployment/Release Event.',                                            @v_Status, @SDATE,'1:C_MONTHLY', 'C_EVT_SERVICE', 'C_DEPLOYMENT',      '',@SDATE, @SUSER, @PID, @v_Code),
   ('A HelpDesk Ticket Event',                 'C_EVT_TICKET',  'C_MAINTENANCE',    'C_TICKET',            'A System Helpdesk Ticket Event.',                                               @v_Status, @SDATE,'8:C_HOURLY',  'C_EVT_SERVICE', 'C_TICKET',          '',@SDATE, @SUSER, @PID, @v_Code)

Print '------------- Data Migration  [dbo].[sc_ErrorEvents]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Group]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Group]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_PIDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

select @v_IDF = IDF FROM [dbo].CODE_APPLICATIONS WHERE VALUE_CODE ='C_NEOS'

INSERT INTO [dbo].[CODE_GROUPS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER]) VALUES
           (@v_IDF, 'Activity List/Group',        'C_GRO_ACTIVITY',   'GRPACT',     'C_GROUP', 'C_ACTIVITY',     'Activity List/Groups for various Activity categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                         'C_ACTIVITY',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 101),
           (@v_IDF, 'Application List/Group',     'C_GRO_APP',        'GRPAPP',     'C_GROUP', 'C_APPLICATION',  'Application List/Groups for various Applicaiton categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                   'C_APPLICATION',    'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 102),
           (@v_IDF, 'Business Rule List/Group',   'C_GRO_BUSINESS',   'GRPBIZ',     'C_GROUP', 'C_BUSINESS',     'Business List/Groups for various Business Rules categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                   'C_ACTIVITY',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 103),
           (@v_IDF, 'CLIN List/Group',            'C_GRP_CLIN',       'GRPCLIN',    'C_GROUP', 'C_CLIN',         'CLIN List/Groups  for various CLIN categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                                'C_CLIN',           'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 104),
           (@v_IDF, 'Contact List/Group',         'C_GRP_CONTACT',    'GRPCTA',     'C_GROUP', 'C_CONTACT',      'Contact List/Groups for various Contractd categories/types in Application',@v_STATUS,@v_SDATE,'Created as s default Group',                                 'C_CONTACT',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 106),
           (@v_IDF, 'Contractor List/Group',      'C_GRP_VENDOR',     'GRPVNR',     'C_GROUP', 'C_CONTRACTOR',   'Contractor List/Groups for various Contractor categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                     'C_CONTRACTOR',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 108),
           (@v_IDF, 'Contract List/Group',        'C_GRP_CONTRACT',   'GRPCTR',     'C_GROUP', 'C_CONTRACT',     'Contract List/Groups for various Contractd categories/types in Application',@v_STATUS,@v_SDATE,'Created as s default Group',                                'C_CONTRACT',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 110),
           (@v_IDF, 'Customer List/Group',        'C_GRP_CUSTOMER',   'GRPCUS',     'C_GROUP', 'C_CUSTOMER',     'Customer List/Groups for various Customer categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                         'C_CUSTOMER',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 112),
           (@v_IDF, 'Definition List/Group',      'C_GRP_DEFINITION', 'GRPSTA',     'C_GROUP', 'C_DEFINITION',   'Definition List/Groups for various definition categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                     'C_DEFINITION',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 114),
           (@v_IDF, 'Delivery List/Group',        'C_GRP_DELIVERY',   'GRPDLV',     'C_GROUP', 'C_DELIVERY',     'Delivery/shipment List/Groups for various delivery/shipment categories/types for Application',@v_STATUS,@v_SDATE,'Created as default',                      'C_DEPLIVERY',      'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 116),
           (@v_IDF, 'Document List/Group',        'C_GRP_DOCUMENT',   'GRPDOC',     'C_GROUP', 'C_DOCUMENT',     'Documentation List/Groups for various Document categories/types for Application',@v_STATUS,@v_SDATE,'Created as default',                                   'C_DOUCMENT',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 118),
           (@v_IDF, 'Event List/Group',           'C_GRP_EVENT',      'GRPEVT',     'C_GROUP', 'C_EVENT',        'Event List/Groups for various Event categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                               'C_EVENT',          'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 120),
           (@v_IDF, 'Invoice List/Group',         'C_GRP_INVOICE',    'GRPINV',     'C_GROUP', 'C_INVOICE',      'Invoice List/Groups for various Invoice categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                           'C_INVOICE',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 122),
           (@v_IDF, 'Message List/Group',         'C_GRP_MESSAGE',    'GRPMSG',     'C_GROUP', 'C_MESSAGE',      'Message List/Groups for various message categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                           'C_MESSAGE',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 124),
           (@v_IDF, 'Notification List/Group',    'C_GRP_NOTN',       'GRPNOTN',    'C_GROUP', 'C_NOTIFICATION', 'Notification List/Groups for various notification categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                 'C_NOTIFICATION',   'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 126),
           (@v_IDF, 'Order List/Group',           'C_GRP_ORDER',      'GRPODR',     'C_GROUP', 'C_ORDER',        'Orders List/Groups for various orders (task order/TO, RFQ, and RFI) categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',               'C_ORDER',          'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 128),
           (@v_IDF, 'Order Award List/Group',     'C_GRP_ORDER',      'GRPODR',     'C_GROUP', 'C_ORDER',        'Orders Award List/Groups for various order Awards (task order/TO, RFQ, and RFI) categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',   'C_AWARD',          'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 130),
           (@v_IDF, 'Order Answer List/Group',    'C_GRP_ANSWER',     'GRPODR',     'C_GROUP', 'C_ANSWER',       'Orders Answer List/Groups for various order Anwsers (task order/TO, RFQ, and RFI) categories/types in Application',@v_STATUS,@v_SDATE,'Created as default', 'C_ANSWER',         'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 132),
           (@v_IDF, 'Order Proposal List/Group',  'C_GRP_PROPOSAL',   'GRPPOS',     'C_GROUP', 'C_PROPOSAL',     'Order Proposal List/Groups for various proposal categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                   'C_PROPOSAL',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 134),
           (@v_IDF, 'Order Question List/Group',  'C_GRP_QUESTION',   'GRPQUS',     'C_GROUP', 'C_QUESTION',     'Orders Question List/Groups for various order questions (task order/TO, RFQ, and RFI) categories/types in Application',@v_STATUS,@v_SDATE,'Created as default', 'C_QUESTION',   'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 136),
           (@v_IDF, 'Order Response List/Group',  'C_GRP_RESPONSE',   'GRPRSP',     'C_GROUP', 'C_RESPONSE',     'Orders Response List/Groups for various order responses (task order/TO, RFQ, and RFI) categories/types in Application',@v_STATUS,@v_SDATE,'Created as default', 'C_RESPONSE',   'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 138),
           (@v_IDF, 'Organization List/Group',    'C_GRP_ORG',        'GRPORG',     'C_GROUP', 'C_ORGANIZATION', 'Organization List/Groups for various orgainzation categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                 'C_ORGANIZATION',   'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 140),
           (@v_IDF, 'Payment List/Group',         'C_GRP_PAYMENT',    'GRPPAY',     'C_GROUP', 'C_PAYMENT',      'Payment List/Groups for various payment categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                           'C_PAYMENT',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 142),
           (@v_IDF, 'Person List/Group',          'C_GRP_PERSON',     'GRPPER',     'C_GROUP', 'C_PERSON',       'Person List/Groups for various categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                                    'C_PERSON',         'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 146),
           (@v_IDF, 'Report List/Group',          'C_GRP_REPORT',     'GRPRPT',     'C_GROUP', 'C_REPORT',       'Report List/Groups for various report categories/types Application',@v_STATUS,@v_SDATE,'Created as default',                                                'C_REPORT',         'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 148),
           (@v_IDF, 'Service List/Group',         'C_GRP_SERVICE',    'GRPSVC',     'C_GROUP', 'C_SERVICE',      'Service List/Groups for various Service categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                           'C_SERVICE',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 150),
           (@v_IDF, 'Task List/Group',            'C_GRP_TASK',       'GRPTSK',     'C_GROUP', 'C_TASK',         'Task List/Groups for various Task categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                                 'C_TASK',           'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 152),
           (@v_IDF, 'User List/Group',            'C_GRP_USER',       'GRPUSR',     'C_GROUP', 'C_USER',         'User List/Groups for various user categories/types of natures in Application',@v_STATUS,@v_SDATE,'Created as default',                                      'C_USER',           'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 154),
           (@v_IDF, 'ValueSet List/Group',        'C_GRP_VALUESET',   'GRPVST',     'C_GROUP', 'C_VALUESET',     'ValueSet List/Groups for various Valuesets categories/types in Application such as status, menu sets, LOVs, etc. ',@v_STATUS,@v_SDATE,'Created as default', 'C_VALUESET',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 156),
           (@v_IDF, 'Workflow List/Group',        'C_GRP_WORKFLOW',   'GRPWKF',     'C_GROUP', 'C_WORKFLOW',     'Workflow List/Groups for various Workflow categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                         'C_WORKFLOW',       'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 198),
           (@v_IDF, 'General/Default Group',      'C_GRP_DEFAULT',    'GRPDEF',     'C_GROUP', 'C_DEFAULT',      'A Gneral/Default Groups for various categories/types in Application',@v_STATUS,@v_SDATE,'Created as default',                                               'C_DEFAULT',        'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 1000000)

Select @v_PIDF = IDF From [dbo].[CODE_GROUPS] WHERE VALUE_CODE = 'C_GRP_ORG'
INSERT INTO [dbo].[CODE_GROUPS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE) VALUES
(@v_IDF, 'Contract Organization Group',          'C_ORG_CONTRACT',   'GRPCTR',     'C_ORGANIZATION', 'C_CONTRACT',       'Organizations grouped by contract for various types of contract category in Application',@v_STATUS,@v_SDATE, 'Created for orgainzation contract',   'C_CONTRACT',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 1, @v_PIDF,'C_ORGANIZATION'),
(@v_IDF, 'SBA Organization Group',               'C_ORG_SBA',        'GRPSBA',     'C_ORGANIZATION', 'C_SBA',            'Organizations grouped by SBA for various types of SBA category in Application',@v_STATUS,@v_SDATE,           'Created for orgainzation SBA',        'C_SBA',          'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 1, @v_PIDF,'C_ORGANIZATION')

Select @v_PIDF = IDF From [dbo].[CODE_GROUPS] WHERE VALUE_CODE = 'C_GRP_VALUESET'
INSERT INTO [dbo].[CODE_GROUPS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE) VALUES
(@v_IDF, 'Status Valueset Group',          'C_VST_STATUS',   'GRPSTA',     'C_VALUESET', 'C_STATUS',       'ValueSet grouped by Status for various types of Status category in Application',@v_STATUS,@v_SDATE, 'Created for valueset status',   'C_STATUS',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 1, @v_PIDF,'C_VALUESET')

Select @v_PIDF = IDF From [dbo].[CODE_GROUPS] WHERE VALUE_CODE = 'C_GRP_PERSON'
INSERT INTO [dbo].[CODE_GROUPS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE) VALUES
(@v_IDF, 'Contract Person Group',          'C_PER_CONTRACT',   'GRPSTA',     'C_PERSON', 'C_CONTRACT',       'Persons grouped by Contract for various types of PERSON category in Application',@v_STATUS,@v_SDATE, 'Created for valueset status',   'C_CONTRACT',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 1, @v_PIDF,'C_PERSON')


Select @v_PIDF = IDF From [dbo].[CODE_GROUPS] WHERE VALUE_CODE = 'C_GRP_NOTN'
INSERT INTO [dbo].[CODE_GROUPS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE) VALUES
(@v_IDF, 'Customer Notification List/Group',              'C_NTN_CUSTOMER',   'NTNCUS',     'C_NOTIFICATION', 'C_CUSTOMER',          'Various notifications to Cusomer/Organization list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',      'C_ORGANIZATION',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 302, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Customer User Notification List/Group',         'C_NTN_FC_USER',    'CURUSR',     'C_NOTIFICATION', 'C_USER',              'Various notifications to Cusomer User list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',              'C_USER',             'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 304, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Contact Notification List/Group',               'C_NTN_CONTACT',    'NTNCTA',     'C_NOTIFICATION', 'C_CONTACT',           'Various notifications to Contact (telecom/address list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',  'C_CONTACT',          'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 306, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Contract Notification List/Group',              'C_NTN_CONTRACT',   'NTNCNT',     'C_NOTIFICATION', 'C_CONTRACT',          'Various notifications to Contract list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',                  'C_CONTRACT',         'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 308, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Contractor Notification List/Group',            'C_NTN_CONTRACTOR', 'NTNCTR',     'C_NOTIFICATION', 'C_CONTRACTOR',        'Various notifications to Contractor/Organization list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',   'C_ORGANIZATION',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 310, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Contractor User Notification List/Group',       'C_NTN_CH_USER',    'CTRUSR',     'C_NOTIFICATION', 'C_USER',              'Various notifications to Contractor user list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',           'C_USER',             'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 312, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Organization Notification List/Group',          'C_NTN_ORG',        'NTNORG',     'C_NOTIFICATION', 'C_ORANIZATION',       'Various notifications to Organization list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',              'C_ORGANIZATION',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 314, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Person Notification List/Group',                'C_NTN_PERSON',     'NTNPER',     'C_NOTIFICATION', 'C_PERSON',            'Various notifications to Person list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',                    'C_PERSON',           'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 316, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'Point of Contact Notification List/Group',      'C_NTN_POC',        'NTNPOC',     'C_NOTIFICATION', 'C_POC',               'Various notifications to POC/Organization/Person list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',   'C_ORGANIZATION',     'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 318, @v_PIDF,'C_NTN_LIST'),
(@v_IDF, 'User Notification List/Group',                  'C_NTN_USER',       'NTNUSR',     'C_NOTIFICATION', 'C_USER',              'Various notifications to User list/group in Application',@v_STATUS,@v_SDATE, 'Created as a list root to cover organizational notifications',                      'C_USER',             'Applicable in all C_NEOS APPLICATIONS', @v_SDATE, @v_USER,1, 744, 'VERSION:0', 320, @v_PIDF,'C_NTN_LIST')

Print '------------- Data Migration  [dbo].[sc_Group]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_ValueSet]
----
-------------
Print '------------- Data Migration  [dbo].[sc_ValueSet]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_CHILD', @PID as varchar(64)=''

select @v_IDF = IDF FROM [dbo].CODE_APPLICATIONS WHERE VALUE_CODE ='C_NEOS'

INSERT INTO [dbo].[CODE_VALUESETS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER]) VALUES
           (@v_IDF,  'STATUS SET',                'C_STATUS',     'STATUS',             10000, 10000,   'STA',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for STATUSes in Application',@v_STATUS,@v_SDATE,'Created as default',                'C_STATUS',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10),
           (@v_IDF,  'TYPE SET',                  'C_TYPE',       'TYPE',               20000, 20000,   'TYP',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for TYPEs in Application',@v_STATUS,@v_SDATE,'Created as default',                   'C_TYPE',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20),
           (@v_IDF,  'ENTITY SET',                'C_ENTITY',     'ENTITY',             30000, 30000,   'ETY',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for for ENTITIES in Application',@v_STATUS,@v_SDATE,'Created as default',            'C_ACTIVE',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30),
           (@v_IDF,  'DEFINITION SET',            'C_DEFINITION', 'DEFINITION',         40000, 40000,   'DEF',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for definitions in Application',@v_STATUS,@v_SDATE,'Created as default',             'C_DEFINITION',     'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 40),
           (@v_IDF,  'COMMON SET',                'C_COMMON',     'COMMON',             50000, 50000,   'CMM',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for Common in Application',@v_STATUS,@v_SDATE,'Created as default',                  'C_COMMON',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 50),
           (@v_IDF,  'TASK SET',                  'C_TASK',       'TASK',               60000, 60000,   'TSK',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for TASKS in Application',@v_STATUS,@v_SDATE,'Created as default',                   'C_TASK',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 60),
           (@v_IDF,  'WORKFLOW SET',              'C_WORKFLOW',   'WORKFLOW',           70000, 70000,   'WKF',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for WORKFLOWS in Application',@v_STATUS,@v_SDATE,'Created as default',               'C_WORKFLOW',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 70),
           (@v_IDF,  'ACTION SET',                'C_ACTION',     'ACTION',             80000, 80000,   'ACT',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for Actions in Application',@v_STATUS,@v_SDATE,'Created as default',                 'C_ACTION',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 80),
           (@v_IDF,  'Data Migration Mapping',    'C_DM_MAP',     'DM MAPPING',         90000, 90000,   'DMM',    'C_CONCEPT','C_VALUE','Define a set of Pair Values for data mapping during NEOS data migration',@v_STATUS,@v_SDATE,'Created as root',   'C_MAPPING',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 90),
           (@v_IDF,  'Genearl/Default Value Set', 'C_DEFAULT',    'DEFAULT',        1000000, 1000000,   'DEF',    'C_CONCEPT','C_VALUE','Define a set of General/Default Pair Values for various reason',@v_STATUS,@v_SDATE,'Created default root',   'C_DEFAULT',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 1000000)

Select @PID = IDF FROM [dbo].[CODE_VALUESETS] WHERE VALUE_CODE = 'C_STATUS'
INSERT INTO [dbo].[CODE_VALUESETS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER], [PARENT_IDF],[PARENT_CODE]) VALUES
           (@v_IDF,  'ACTIVE STATUS',   'C_ACTIVE',   'ACTIVE',     2, 2,   'ACT',    'C_STATUS','C_VALUE','STATUS Pair Value of ACTIVE STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',                'C_ACTIVE',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 1,  @PID, @v_Code),
           (@v_IDF,  'AMEND STATUS',    'C_AMEND',    'AMEND',      4, 4,   'AMD',    'C_STATUS','C_VALUE','STATUS Pair Value of AMENDMEnt STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',             'C_ACTIVE',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'CLOSE STATUS',    'C_CLOSE',    'CLOSE',      6, 6,   'CLS',    'C_STATUS','C_VALUE','STATUS Pair Value of CLOSE/D STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_CLOSE',          'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 3,  @PID, @v_Code),
           (@v_IDF,  'DELETE STATUS',   'C_DELETE',   'DELETE',     8, 8,   'DEL',    'C_STATUS','C_VALUE','STATUS Pair Value of DELETE STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',                'C_DELETE',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 5,  @PID, @v_Code),
           (@v_IDF,  'EXPIRED STATUS',  'C_EXPIRE',   'EXPIRED',   10,10,   'EXP',    'C_STATUS','C_VALUE','STATUS Pair Value of EXPIRED STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_EXPIRE',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 7,  @PID, @v_Code),
           (@v_IDF,  'INACTIVE STATUS', 'C_INACTIVE', 'INACTIVE',  12,12,   'INA',    'C_STATUS','C_VALUE','STATUS Pair Value of INACTIVE STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',              'C_INACTIVE',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 9,  @PID, @v_Code),
           (@v_IDF,  'INITIAL STATUS',  'C_INITIAL',  'INITIAL',   14,14,   'INI',    'C_STATUS','C_VALUE','STATUS Pair Value of INITIAL STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_INIITAL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 11, @PID, @v_Code),
           (@v_IDF,  'LOCKED STATUS',   'C_LOCK',     'LOCKED',    16,16,   'LCK',    'C_STATUS','C_VALUE','STATUS Pair Value of LOCKED STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',                'C_LOCK',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 13, @PID, @v_Code),
           (@v_IDF,  'OPEN STATUS',     'C_OPEN',     'OPEN',      18,18,   'OPN',    'C_STATUS','C_VALUE','STATUS Pair Value of OPEN STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',                  'C_OPEN',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 15, @PID, @v_Code),
           (@v_IDF,  'PENDING STATUS',  'C_PENDING',  'PENDING',   20,20,   'PND',    'C_STATUS','C_VALUE','STATUS Pair Value of PENDING STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_PENDING',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 17, @PID, @v_Code),
           (@v_IDF,  'REQUST ADD INFO', 'C_RAI',      'RAI',       22,22,   'RAI',    'C_STATUS','C_VALUE','STATUS Pair Value of Request Additional Info for Application',@v_STATUS,@v_SDATE,'Created as default',      'C_RAI',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 19, @PID, @v_Code),
           (@v_IDF,  'RELEASE STATUS',  'C_RELEASE',  'RELEASE',   24,24,   'RLS',    'C_STATUS','C_VALUE','STATUS Pair Value of RELEASE/D POST/ED STATUS  for Application',@v_STATUS,@v_SDATE,'Created as default',    'C_RESET',          'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 21, @PID, @v_Code),
           (@v_IDF,  'REVIEW STATUS',   'C_REVIEW',   'REVIEW',    26,26,   'RVW',    'C_STATUS','C_VALUE','STATUS Pair Value of PENDING STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_PENDING',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 23, @PID, @v_Code),
           (@v_IDF,  'RESET STATUS',    'C_RESET',    'RESET',     28,28,   'SET',    'C_STATUS','C_VALUE','STATUS Pair Value of RESET STATUS  for Application',@v_STATUS,@v_SDATE,'Created as default',                'C_RELEASE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 25, @PID, @v_Code),
           (@v_IDF,  'PROGRESS STATUS', 'C_PROGRESS', 'PROGRESS',  30,30,   'PRG',    'C_STATUS','C_VALUE','STATUS Pair Value of In-Progress STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',           'C_PROGRESS',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 27, @PID, @v_Code),
           (@v_IDF,  'RUNNING STATUS',  'C_RUNNING',  'RUNNING',   32,32,   'RUN',    'C_STATUS','C_VALUE','STATUS Pair Value of Running STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',               'C_RUNNING',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 29, @PID, @v_Code),
           (@v_IDF,  'SAVE STATUS',     'C_SAVE',     'SAVE',      34,34,   'SAV',    'C_STATUS','C_VALUE','STATUS Pair Value of Save/d STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',                'C_SAVE',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 31, @PID, @v_Code),
           (@v_IDF,  'SUSPEND STATUS',  'C_SUSPEND',  'SUSPEND',   36,36,   'SPN',    'C_STATUS','C_VALUE','STATUS Pair Value of SUSPENDED STATUS for Application',@v_STATUS,@v_SDATE,'Created as default',             'C_SUSPEND',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 33, @PID, @v_Code)

Select @PID = IDF FROM [dbo].[CODE_VALUESETS] WHERE VALUE_CODE = 'C_ENTITY'
INSERT INTO [dbo].[CODE_VALUESETS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER], [PARENT_IDF],[PARENT_CODE]) VALUES
           (@v_IDF,  'Individual Person',              'C_PERSON',       'PERSON',              2, 2,    'PER',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Persons in Application',@v_STATUS,@v_SDATE,'Created as default',                     'C_PERSON',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 1,  @PID, @v_Code),
           (@v_IDF,  'Organization',                   'C_ORGANIZATION', 'ORGANIZATION',        4, 4,    'ORG',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various organizations in Application',@v_STATUS,@v_SDATE,'Created as default',               'C_ORGANIZATION',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'Group',                          'C_GROUP',        'GROUP',               6, 6,    'GRP',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Groups in Application',@v_STATUS,@v_SDATE,'Created as default',                      'C_GROUP',                'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 3,  @PID, @v_Code),
           (@v_IDF,  'Customer',                       'C_CUSTOMER',     'CUSTOMER',            8, 8,    'CUS',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Customer/Organizations in Application',@v_STATUS,@v_SDATE,'Created as default',      'C_ORGANIZATION',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 5,  @PID, @v_Code),
           (@v_IDF,  'Contractor',                     'C_CONTRACTOR',   'CONTRACTOR',          10,10,   'CTR',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Contractor/Organizations in Application',@v_STATUS,@v_SDATE,'Created as default',    'C_ORGANIZATION',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 7,  @PID, @v_Code),
           (@v_IDF,  'Task Order (TO)',                'C_TO',           'TO',                  12,12,   'TO',     'C_ENTITY','C_VALUE','STATUS Pair Value defines various task orders(TO)s in Application',@v_STATUS,@v_SDATE,'Created as default',            'C_CONTRACT',             'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 9,  @PID, @v_Code),
           (@v_IDF,  'Request for Proposal (RFP)',     'C_RFP',          'RFP',                 14,14,   'RFP',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various RFPs in Application',@v_STATUS,@v_SDATE,'Created as default',                        'C_CONTRACT',             'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 11, @PID, @v_Code),
           (@v_IDF,  'Request for Quote (RFQ)',        'C_RFQ',          'RFQ',                 16,16,   'RFQ',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various RFQs in Application',@v_STATUS,@v_SDATE,'Created as default',                        'C_CONTRACT',             'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 13, @PID, @v_Code),
           (@v_IDF,  'Request for Information (RFI)',  'C_RFI',          'RFI',                 18,18,   'RFI',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various RFIs in Application',@v_STATUS,@v_SDATE,'Created as default',                        'C_CONTRACT',             'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 15, @PID, @v_Code),
           (@v_IDF,  'Bid And Proposal',               'C_BNP',          'B&P',                 20,20,   'BP',     'C_ENTITY','C_VALUE','STATUS Pair Value defines various Contractor B&Ps in Application',@v_STATUS,@v_SDATE,'Created as default',             'C_ACTION',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 17, @PID, @v_Code),
           (@v_IDF,  'Contractor Response',            'C_RESPONSE',     'RESPONSE',            22,22,   'RSRP',   'C_ENTITY','C_VALUE','STATUS Pair Value defines various Contractor Reponses in Application',@v_STATUS,@v_SDATE,'Created as default',         'C_ACTION',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 19, @PID, @v_Code),
           (@v_IDF,  'Customer Award',                 'C_AWARD',        'AWARD',               24,24,   'AWD',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Customer Awards in Application',@v_STATUS,@v_SDATE,'Created as default',             'C_ORGANIZATION',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 21, @PID, @v_Code),
           (@v_IDF,  'Question And Answer',            'C_QA',           'QA',                  26,26,   'QA',     'C_ENTITY','C_VALUE','STATUS Pair Value defines various Question/Answers between Customers and Contracts in Application',@v_STATUS,@v_SDATE,'Created as default', 'C_PENDING', 'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 23, @PID, @v_Code),
           (@v_IDF,  'Reviewer',                       'C_REVIEWEr',     'REVIEWEER',           28,28,   'RVWR',   'C_ENTITY','C_VALUE','STATUS Pair Value defines various Reviewers in Application',@v_STATUS,@v_SDATE,'Created as default',                   'C_PERSON',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 25, @PID, @v_Code),
           (@v_IDF,  'User',                           'C_USER',         'USER',                30,30,   'USR',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Users in Application',@v_STATUS,@v_SDATE,'Created as default',                       'C_PERSON',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 27, @PID, @v_Code),
           (@v_IDF,  'Approver',                       'C_APPROVER',     'APPROVER',            32,32,   'APR',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Approvers in Application',@v_STATUS,@v_SDATE,'Created as default',                   'C_PERSON',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 29, @PID, @v_Code),
           (@v_IDF,  'Evaluation',                     'C_EVALUEATE',    'EVALUATION',          34,34,   'EVL',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Evaluations in Application',@v_STATUS,@v_SDATE,'Created as default',                 'C_ACTION',               'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 31, @PID, @v_Code),
           (@v_IDF,  'Contract',                       'C_CONTRACT',     'CONTRACT',            36,36,   'CTR',    'C_ENTITY','C_VALUE','STATUS Pair Value defines various Contracts in Application',@v_STATUS,@v_SDATE,'Created as default',                   'C_CONTRACT',             'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 33, @PID, @v_Code)


Select @PID = IDF FROM [dbo].[CODE_VALUESETS] WHERE VALUE_CODE = 'C_DM_MAP'
INSERT INTO [dbo].[CODE_VALUESETS]([APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER], [PARENT_IDF],[PARENT_CODE]) VALUES
--- Order status
           (@v_IDF,  'Order Created Status',                       'CREATED',       'DEFINITION',                        0,    2,     'DEFN',   'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'DEFN',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,    @PID, @v_Code),
           (@v_IDF,  'Order Submitted without assignment',         'SUBMIT',        'SUBMITTED, UNASSIGED',              10,   4,     'SUBUA',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFRL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,    @PID, @v_Code),
           (@v_IDF,  'Order Submitted with assignment status',     'ASSIGNED',      'SUBMITTED, ASSIGNED',               11,   8,     'SUBAN',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVA',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,    @PID, @v_Code),
           (@v_IDF,  'Order Approved status',                      'APPROVED',      'SUBMITTED, APPROVED BYREVIEWER',    15,  10,     'SUBV',   'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVS',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,    @PID, @v_Code),
           (@v_IDF,  'Order Pending status',                       'PENDING',       'APPROVED, PENDING RELEASES',        20,  12,     'VPBNP',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Order Pending Questions Status',             'QUESTION',      'RELEASED, PENDING QUESTIONS',       30,  14,     'RPQUS',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PQUE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Order pending Proposals',                    'PROPOSE',       'RELEASED, PENDING PROPOSALS',       40,  16,     'RPBNP',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PRES',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 14,   @PID, @v_Code),
           (@v_IDF,  'Order Revision Status',                      'REVISE',        'EVALUATED, PENDING REVISIONS',      45,  18,     'EPRVS',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREV',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
           (@v_IDF,  'Order Pending Evaluations status',           'EVALUATE',      'EVALUATION',                        50,  20,     'EVALN',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Order Selected',                             'SELECTED',      'SELECTION MADE',                    60,  22,     'ADSEL',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFAW',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20,   @PID, @v_Code),
           (@v_IDF,  'Order Awarded Status',                       'AWARDED',       'AWARDED',                           70,  24,     'AWARD',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'AWRD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 22,   @PID, @v_Code),
           (@v_IDF,  'Order Funded Status',                        'FUNDED',        'FUNDED -STATUS',                   100,  26,     'FNDAD',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 24,   @PID, @v_Code),
           (@v_IDF,  'Order Completed Status',                     'COMPLETE',      'COMPLETED -STATUS',                110,  30,     'CMPLD',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 28,   @PID, @v_Code),
           (@v_IDF,  'Order Closed Status',                        'CLOSE',         'CLOSED -STATUS',                   -110, 32,     'CLOSE',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CLSD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30,   @PID, @v_Code),
           (@v_IDF,  'Order Cancelled Status',                     'CANCEL',        'CANCELLED -STATUS',                -100, 34,     'TERMD',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CNCL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 32,   @PID, @v_Code),
           (@v_IDF,  'Archved Contract',                           'ARCHIVE',       'ARCHIVED -STATUS',                 -120, 36,     'ARCVD',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'ARC',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 34,   @PID, @v_Code),
           (@v_IDF,  'Other Contract Mode',                        'OTEHR',         'OTHER -STATUS',                    -120, 1000,   'OTHER',  'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Unknown Order Status',                       'UNKNOWN',       'UNKNOWN -STATUS',                  -99,  1001,   'UNKN',   'C_ORDER',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
---- Contract Status
           (@v_IDF,  'Define/Create/Develop RFP/RFQ/RFI (RRR)',    'CREATION',       'DEFINITION',                        0,    2,     'DEFN',   'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'DEFN',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,    @PID, @v_Code),
           (@v_IDF,  'Submitted RFP/RFQ/RFI with no assignment',   'SUBMIT',         'SUBMITTED, UNASSIGED',              10,   4,     'SUBUA',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFRL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,    @PID, @v_Code),
           (@v_IDF,  'Submitted RFP/RFQ/RFI with assignment',      'ASSIGNED',       'SUBMITTED, ASSIGNED',               11,   8,     'SUBAN',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVA',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,    @PID, @v_Code),
           (@v_IDF,  'Submitted RFP/RFQ/RFI approved by Reviewer', 'APPROVE',        'SUBMITTED, APPROVED BYREVIEWER',    15,  10,     'SUBV',   'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVS',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,    @PID, @v_Code),
           (@v_IDF,  'Approved Pending RFP/RFQ/RFI Releases',      'RELEASE',        'APPROVED, PENDING RELEASES',        20,  12,     'VPBNP',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Relased Pending RFP/RFQ/RFI Questions',      'QUESTION',       'RELEASED, PENDING QUESTIONS',       30,  14,     'RPQUS',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PQUE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Relased Pending RFP/RFQ/RFI Proposals',      'PROPOSE',        'RELEASED, PENDING PROPOSALS',       40,  16,     'RPBNP',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PRES',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 14,   @PID, @v_Code),
           (@v_IDF,  'Evaluated Pending Proposal/Revisions',       'REVISE',         'EVALUATED, PENDING REVISIONS',      45,  18,     'EPRVS',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREV',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
           (@v_IDF,  'Evaluations for Pre-Selection of Proposals', 'EVALUTE',        'EVALUATION',                        50,  20,     'EVALN',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Proposal Selection Made',                    'SELECT',         'SELECTION MADE',                    60,  22,     'ADSEL',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFAW',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20,   @PID, @v_Code),
           (@v_IDF,  'Proposal Awarded Contract',                  'AWARD',          'AWARDED',                           70,  24,     'AWARD',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'AWRD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 22,   @PID, @v_Code),
           (@v_IDF,  'Funded Award Contract',                      'FUND',           'FUNDED -STATUS',                   100,  26,     'FNDAD',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 24,   @PID, @v_Code),
           (@v_IDF,  'Modify Award Contract',                      'MOD',            'MOD -STATUS',                      100,  28,     'MOD',    'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'FUND',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 26,   @PID, @v_Code),
           (@v_IDF,  'Completed Awarded Contract',                 'COMPLETE',       'COMPLETED -STATUS',                110,  30,     'CMPLD',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 28,   @PID, @v_Code),
           (@v_IDF,  'Closed Awarded Contract',                    'CLOSE',          'CLOSED -STATUS',                   -110, 32,     'CLOSE',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CLSD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30,   @PID, @v_Code),
           (@v_IDF,  'Terminated Awarded Contract',                'TERMINATE',      'CANCELLED -STATUS',                -100, 34,     'TERMD',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CNCL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 32,   @PID, @v_Code),
           (@v_IDF,  'Archved Contract',                           'ARCHIVE',        'ARCHIVED -STATUS',                 -120, 36,     'ARCVD',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'ARC',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 34,   @PID, @v_Code),
           (@v_IDF,  'Other Contract Mode',                        'OTEHR',          'OTHER -STATUS',                    -120, 1000,   'OTHER',  'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Unknown Contract Mode',                      'UNKNOWN',        'UNKNOWN -STATUS',                  -99,  1001,   'UNKN',   'C_CONTRACT',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
----- Contract Action
           (@v_IDF,  'Define/Create/Develop order action',                'C_ORD_CREATE',     'DEFINE ORDER BY CUSTOMER',               2,    2,     'DEFN',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'DEFN',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,    @PID, @v_Code),
           (@v_IDF,  'Submit order/contract without assignment',          'C_ORD_SUBMIT',     'SUBMIT ORDER BY CUSTOMER',               4,    4,     'OSUB',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFRL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,    @PID, @v_Code),
           (@v_IDF,  'Submit order/contract with assignment',             'C_ORD_ASSIGN',     'ASSIGN ORDER TO NITAAC',                 6,    6,     'OASSN',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVA',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,    @PID, @v_Code),
           (@v_IDF,  'Approve order/contract by Reviewer',                'C_ORD_APPROVE',    'APPROVE ORDER BY NITAACT',               8,    8,     'OAPRO',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'REVS',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,    @PID, @v_Code),
           (@v_IDF,  'Release order/contract action',                     'C_ORD_RELEASE',    'RELEASE ORDER TO CONTRACTORS',           10,  10,     'ORLS',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Cancel order/contract action',                      'C_ORD_CANCEL',     'CANCEL RELEASED ORDER BY CUSTOMER',      12,  12,     'OCNCL',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Amend order/contract action',                       'C_ORD_AMEND',      'AMEND RELEASED ORDER BY CUSTOMER',       14,  14,     'OAMND',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Response order/contact action',                     'C_ORD_RESPONSE',   'RESPONSE TO ORDER BY CONTRACTOR',        16,  16,     'ORSPS',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PQUE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Question/answer order/contact action',              'C_ORD_QA',         'QUESTION TO ORDER BY CONTRACTOR',        18,  18,     'OQA',    'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PQUE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Submit proposal/contract action',                   'C_BNP_SUBMIT',     'SUBMIT PROPOSALS BY CONTRACTOR',         20,  20,     'PSUB',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PRES',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 14,   @PID, @v_Code),
           (@v_IDF,  'Revise proposal/contract action',                   'C_BNP_REVISE',     'REVISE PROPOSAL BY CONTRACTOR',          22,  22,     'PRVS',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREV',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
           (@v_IDF,  'Revise proposal/contract action',                   'C_BNP_CANCEL',     'CANCEL PROPOSAL BY CONTRACTOR',          24,  24,     'PCNCL',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PREV',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
           (@v_IDF,  'Evaluate/Pre-Select proposal/contract action',      'C_BNP_EVALUE',     'EVALUATE PROPOSAL BY CUSTOMER',          26,  26,     'PEVAL',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Question/Anwser Pre-Selection/contract action',     'C_BNP_QA',         'QUESTION/ANSWER PRE-SELECTION',          28,  28,     'PQA',    'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Negotiate Pre-Selection/contract action',           'C_BNP_NEGOTIATE',  'NEGOTIATE PRE-SELECTION',                30,  30,     'PNEGO',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Selecrt proposal/contract action',                  'C_BNP_SELECT',     'SELECT PROPOSAL BY CUSTOMER',            32,  32,     'PSEL',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFAW',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20,   @PID, @v_Code),
           (@v_IDF,  'Award Proposal/Contract action',                    'C_AWARD',          'AWARDED PROPOSAL BY CUSTOMER',           34,  34,     'PAWRD',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'AWRD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 22,   @PID, @v_Code),
           (@v_IDF,  'Fund award/contract action',                        'C_AWD_FUND',       'FUND AWARDED PROPOSAL BY CUSTOMER',      36,  36,     'PFND',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 24,   @PID, @v_Code),
           (@v_IDF,  'Modify awarded/contract action',                    'C_AWD_MOD',        'MOD AWARD BY CUSTOMER',                  38,  38,     'PMOD',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'FUND',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 26,   @PID, @v_Code),
           (@v_IDF,  'Complete awarded/mod Contract action',              'C_COMPLETE',       'COMPLETE CONTRACT',                      40,  40,     'CMPLD',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'PSEL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 28,   @PID, @v_Code),
           (@v_IDF,  'Close awardedc/ontract action',                     'C_CLOSE',          'CLOSED CONTRACT',                        42,  42,     'CLSD',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CLSD',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30,   @PID, @v_Code),
           (@v_IDF,  'Terminated awarded/contract action',                'C_TERMINATE',      'TERMINATED CONTRACT',                    44,  44,     'TERMD',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CNCL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 32,   @PID, @v_Code),
           (@v_IDF,  'Cancell contract action',                           'C_CANCEL',         'CANCEL CONTRACT',                        46,  46,     'CNCLD',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CNCL',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 32,   @PID, @v_Code),
           (@v_IDF,  'Archved contract action',                           'C_ARCHIVE',        'ARCHIVE CONTRACT',                       48,  48,     'ARCVD',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'ARC',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 34,   @PID, @v_Code),
           (@v_IDF,  'Other contract action',                             'C_OTEHR',          'OTHER TO CONTRACT',                     1000, 1000,   'OTHER',  'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Unknown contract action',                           'C_UNKNOWN',        'UNKNOWN TO CONTRACT',                   1001, 1001,   'UNKN',   'C_CONTRACT',   'C_ACTION',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
---- Application
           (@v_IDF,  'NITAAC Electricl Order Systems  (NEOS) Application',             'C_NEOS',           '',                                 1,    1,      'NEOS',   'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 1,  @PID, @v_Code),
           (@v_IDF,  'Electronic Commodities Store III(ECS3) Application',             'C_ECS3',           'ECS III',                          2,    2,      'ECS3',   'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'ECS3',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'Image World-2 New Dimensions (IW2nd) Application',               'C_IW2ND',          'IW2ND',                            3,    3,      'IW2ND',  'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'IW2nd',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 3,  @PID, @v_Code),
           (@v_IDF,  'Long-Term Amdinistrative Support Contract (LTASC) Application',  'C_LTASC',          'LTASC',                            4,    4,      'LTASC',  'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'LTASC',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,  @PID, @v_Code),
           (@v_IDF,  'IT Services/Solutions (SP3) Application',                        'C_SP3',            'CIO-SP3',                          5,    5,      'SP3',    'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'SP3',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 5,  @PID, @v_Code),
           (@v_IDF,  'IT Services/Solutions for Small Business (SP3SB) application',   'C_SP3SB',          'CIO-SP3SB',                        6,    6,      'SP3SB',  'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'SP3SB',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,  @PID, @v_Code),
           (@v_IDF,  'IT Commodity/Solutions (CS) Application',                        'C_CS',             'CIO-CS',                           7,    7,      'CS',     'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          'CS',          'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 7,  @PID, @v_Code),
           (@v_IDF,  'Government-Wide Strategic Solutions (GSS) Application',          'C_GSS',            '',                                 8,    8,      'GSS',    'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,  @PID, @v_Code),
           (@v_IDF,  'Enhanced Technical Information Management System (eTIMS) Application', 'C_ETIMS',    '',                                 9,    9,      'ETIMS',  'C_NEOS',       'C_APPLICATION',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'Created as default',          '',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 9,  @PID, @v_Code),
-------  Order type
           (@v_IDF,  'Unknown Order Type',                                             'C_UNKNOWN',      'UNKNOWN',               -1,  0,      'UNKN',   'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'UNKNOWN',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 0,   @PID, @v_Code),
           (@v_IDF,  'Request for Quota (RFQ) Delvery Order (DO) Type',                'C_RFQ',          'DELVERY_ORDER',         0,   2,      'RFQ',    'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFQ',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,   @PID, @v_Code),
           (@v_IDF,  'Request for Proposal (RFP) Task Order (TO) Type',                'C_RFP',          'TASK_ORDER',            1,   4,      'RFP',    'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFP',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,   @PID, @v_Code),
           (@v_IDF,  'Request for Information (RFI) Order Type',                       'C_RFI',          'RFI_ORDER',             2,   8,      'RFI',    'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFI',            'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,   @PID, @v_Code),
           (@v_IDF,  'Request for Propoal Draft (RFP_DRT) Order Type',                 'C_RFP_DRAFT',    'DRAFT_TASK ORDER',      3,   10,     'RFPDRT', 'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFP Draft',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Request for Information Source (RFI_SRC) Order Type',            'C_RFI_SOURCE',   'SOURCE_SOUGHT_RFI',     4,   12,     'RFISRC', 'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFI Source',     'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Request for Information Notice (RFI_NOCE) Order Type',           'C_RFI_NOTICE',   'SPECIAL_NOTICE_RFI',    5,   14,     'RFINOCE','C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFI Notice',     'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 14,   @PID, @v_Code),
           (@v_IDF,  'Request for Quota Draft (RFQ_DRT) Order Type',                   'C_RFQ_DRAFT',    'DRAFT_DELIVERY_ORDER',  6,   16,     'RFQDRT', 'C_ORDER',   'C_TYPE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'RFI Draft',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
------------  shipping percentage
           (@v_IDF,  '0 Percent/Shipping',                                                 'C_P000',           '0%',                0,   0,      'P0',    'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 0,    @PID, @v_Code),
           (@v_IDF,  '10 Percent/Shipping',                                                'C_P010',           '10%',               1,  10,      'P10',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P10',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  '20 Percent/Shipping',                                                'C_P020',           '20%',               2,  20,      'P20',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P20',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20,   @PID, @v_Code),
           (@v_IDF,  '30 Percent/Shipping',                                                'C_P030',           '30%',               3,  30,      'P30',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P30',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30,   @PID, @v_Code),
           (@v_IDF,  '40 Percent/Shipping',                                                'C_P040',           '40%',               4,  40,      'P40',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P40',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 40,   @PID, @v_Code),
           (@v_IDF,  '50 Percent/Shipping',                                                'C_P050',           '50%',               5,  50,      'P50',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P50',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 50,   @PID, @v_Code),
           (@v_IDF,  '60 Percent/Shipping',                                                'C_P060',           '60%',               6,  60,      'P60',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P60',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 60,   @PID, @v_Code),
           (@v_IDF,  '70 Percent/Shipping',                                                'C_P070',           '70%',               7,  70,      'P70',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P70',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 70,   @PID, @v_Code),
           (@v_IDF,  '80 Percent/Shipping',                                                'C_P080',           '80%',               8,  80,      'P80',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P80',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 80,   @PID, @v_Code),
           (@v_IDF,  '90 Percent/Shipping',                                                'C_P090',           '90%',               9,  90,      'P90',   'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'P90',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 90,   @PID, @v_Code),
           (@v_IDF,  '100 Percent/Shipping',                                               'C_P100',           '100%',              10, 100,     'P100',  'C_SHIPPING',   'C_PERCENTAGE',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        '',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
--------     TRP Review Status
           (@v_IDF,  'NITAAC Contract Specialist (CS) Review',                             'C_CO_REVIEW',      'Needs NITAAC CS Review',                  1, 2,     'CORVW',  'C_TRP',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CS_REVIEW',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Contract Officer (CO) Review',                                'C_CS_REVIEW',      'Needs NITAAC CO Review',                  2, 4,     'CSRVW',  'C_TRP',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CO_REVIEW',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,  @PID, @v_Code),
           (@v_IDF,  'Contractor Correction/Revision',                                     'C_CH_CORRECT',     'Needs Contract Holder Correction',        3, 6,     'CHRVS',  'C_TRP',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'ERROR',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,  @PID, @v_Code),
           (@v_IDF,  'Contractor Cancellation',                                            'C_CH_CANCEL',      'Cancel',                                  4, 8,     'CNCL',   'C_TRP',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'CANCEL',          'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,  @PID, @v_Code),
-----       user role
           (@v_IDF,  'NITAAC Finance User',                                                'C_N_FINANANCER',          'NITAAC_FA',                        3,    2,     'NFIN',   'C_ROLE',  'C_FINANCE',      'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Contract Officer (CO)',                                       'C_N_CO',           'NITAAC_CO',                               4,    4,     'NCO',    'C_ROLE',  'C_CO',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Contract Specialist (CS)',                                    'C_N_CS',           'NITAAC_CS',                               5,    6,     'NCS',    'C_ROLE',  'C_CS',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Contract Officer (CO)',                             'C_FC_CO',          'CUST_CO',                                 6,    8,     'FCCO',   'C_ROLE',  'C_CO',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Specialist (CS)',                                   'C_FC_CS',          'CUST_CS',                                 0,   10,     'FCCS',   'C_ROLE',  'C_CS',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Assistant Officer (AO)',                            'C_FC_AMO',         'CUST_AO',                                 7,   12,     'FCAO',   'C_ROLE',  'C_AO',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Staff',                                             'C_FC_USER',        'CUST_STAFF',                              8,   14,     'FCSTF',  'C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Project Officer (PO)',                              'C_FC_PO',          'CUST_PO',                                 9,   16,     'FCPO',   'C_ROLE',  'C_PO',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer Information Systems Security Officer (ISSO)',       'C_FC_ISSO',        'CUST_ISSO',                               10,  18,     'FCISSO', 'C_ROLE',  'C_ISSO',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Contract Holder Promgram Manager (PM)',                              'C_CH_PM',          'CONT_PM',                                 11,  20,     'CHPM',   'C_ROLE',  'C_PM',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Contract Holder User',                                               'C_CH_USER',        'CONT_STAFF',                              12,  22,     'CHUSR',  'C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer NIH User',                                          'C_FC_NIH',         'CUST_NIH',                                13,  24,     'FCNIH',  'C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Federal Customer DHHS User',                                         'C_FC_DHHS',        'CUST_DHHS',                               14,  26,     'FCDOD',  'C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Contract Holder CIOSP2I User',                                       'C_CH_CIOSP2I',     'CONT_CIOSP2I',                            15,  28,     'CHSP2I', 'C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Contract Holder LTASC User',                                         'C_CH_LTASC',       'CONT_LTASC',                              16,  30,     'CHLTASC','C_ROLE',  'C_USER',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC System Administrator (SA)',                                   'C_N_ADMIN',        'NITAAC_SA_USER',                          27,  32,     'NADM',   'C_ROLE',  'C_ADMIN',        'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Enterprise System Administrator (SA)',                        'C_N_ADMIN_SR',     'NITAAC_SA_USER_SUPER',                    28,  34,     'NSUER',  'C_ROLE',  'C_EUSER',        'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User for Task Orders (TO) Processes',                         'C_N_REVIEWER',     'NITAAC_SA_ORDER',                         29,  36,     'NORD',   'C_ROLE',  'C_ORDER',        'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User for Reports (RPT)',                                      'C_N_REPORTER',     'NITAAC_SA_REPORT',                        30,  38,     'NRPT',   'C_ROLE',  'C_REPORT',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User for Contracts',                                          'C_N_ADMIN_CTRT',   'NITAAC_SA_CONTRACT',                      31,  40,     'NCTRT',  'C_ROLE', 'C_CONTRACT',      'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Admin User for Customer/Contractor Organizations',            'C_N_ADMIN_ORG',    'NITAAC_SA_FED_ORG',                       32,  44,     'NFCUSR',  'C_ROLE', 'C_FC',           'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC Business Admin User for Annoncements',                        'C_N_ADMIN_BIZ',    'NITAAC_SA_ANNOUNCE',                      34,  48,     'NANNO',   'C_ROLE', 'C_ANNOUNCE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User for Configuration',                                      'C_N_ADMIN_CFG',    'NITAAC_SA_CONFIG',                        35,  50,     'NCFG',    'C_ROLE', 'C_CONFIGURATION','Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User/Developer for Index',                                    'C_N_DEVELOPER',    'NITAAC_SA_INDEX',                         33,  46,     'NCTRT',   'C_ROLE', 'C_CONTRACT',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'NITAAC User for Edit',                                               'C_ADMIN',          'NITAAC_SA_EDIT_ADMIN',                    36,  52,     'NFCUSR',  'C_ROLE', 'C_EDIT',         'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
--- User Status
           (@v_IDF,  'Initial Status',                                                     'C_INITIAL',            'Initial',                              0,  2,     'INITIAL',    'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Reset Status',                                                       'C_RESET',              'Reset',                                1,  4,     'RESET',      'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Pending Status',                                                     'C_PENDING',            'Pending',                              2,  6,     'PENDING',    'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Active Status',                                                      'C_ACTIVE',             'Active',                               3,  8,     'ACTOVE',     'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Suspended Status',                                                   'C_SUSPEND',            'Suspended',                            4,  10,    'SUSPEND',    'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Delete',                                                             'C_DELETE',             'Delete',                               5,  12,    'DELETE',     'C_USER',   'C_STATUS',  'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
--- Approval Results Types
           (@v_IDF,  'Approval for Request for more Information',                          'C_REQUEST',            'REQUEST',                              1,  2,     'RQST',       'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval for Selection Process',                                     'C_SELECTION',          'SELECTION',                            2,  4,     'SEL',        'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval for Response/Answer to questions',                          'C_REPONSE',            'ANSWER',                               3,  6,     'RSP',        'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval for the completion',                                        'C_COMPLETION',         'COMPLETION',                           4,  8,     'CMPL',       'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval for close out',                                             'C_CLOSEOUT',           'CLOSEOUT',                             5, 10,     'CLSOUT',     'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval for contract mod',                                          'C_MOD',                'MODIFICAITON',                         6, 12,     'CMOD',       'C_APROVAL', 'C_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
--- Approval Action
           (@v_IDF,  'Approval Action of approved',                                        'C_APR_APPROVE',            'APPROVED',                          1,    2,     'APRD',    'C_APROVAL', 'C_ACTION',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval Action of pending',                                         'C_APR_PENDING',            'PENDING',                           0,    4,     'PNDG',    'C_APROVAL', 'C_ACTION',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval Action of deleted',                                         'C_APR_DELETE',             'CLOSEOUT',                          -110, 6,     'DEL',     'C_APROVAL', 'C_ACTION',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Approval Action of denied',                                          'C_APR_DENY',               'DENIED',                            -1,   8,     'DND',     'C_APROVAL', 'C_ACTION',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NITAAC_FA',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
--- Amendment status
           (@v_IDF,  'Initial Status',                                                     'C_AMND_INITIAL',           'INIT',                              0,  2,     'INIT',      'C_AMENDMENT', 'C_STATUS',    'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Not Submitted',   'Applicable in all C_NEOS APPLICATIONS',1,2, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'Submitted Status',                                                   'C_AMND_SUBMIT',            'SUBMITTED',                         1,  4,     'SUBD',      'C_AMENDMENT', 'C_STATUS',    'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Submitted',       'Applicable in all C_NEOS APPLICATIONS',1,4, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,  @PID, @v_Code),
           (@v_IDF,  'Released Status',                                                    'C_AMND_RELEASE',           'RELEASED',                          2,  6,     'RLSD',      'C_AMENDMENT', 'C_STATUS',    'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Released',        'Applicable in all C_NEOS APPLICATIONS',1,6, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,  @PID, @v_Code),
           (@v_IDF,  'Revised Status',                                                     'C_AMND_REVISE',            'REVISE',                           -1,  8,     'RVSD',      'C_AMENDMENT', 'C_STATUS',    'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Revise',          'Applicable in all C_NEOS APPLICATIONS',1,8, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,  @PID, @v_Code),
           (@v_IDF,  'Undefined Status',                                                   'C_AMND_UNDEFINE',          'UNDEFINED',                       -99,  10,    'UNDEF',     'C_AMENDMENT', 'C_STATUS',    'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Underfined',      'Applicable in all C_NEOS APPLICATIONS',1,10, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,  @PID, @v_Code),
-- Amendment Type

--- Proposal status
           (@v_IDF,  'Proposal Created Status',                    'CREATE',        'DEFINITION',                        2,    2,     'ADD',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ADD',           'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,    @PID, @v_Code),
           (@v_IDF,  'Proposal Submitted Status',                  'SUBMIT',        'SUBMITTED PROPOSAL',                4,    4,     'SUBUA',  'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_SUBMIT',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,    @PID, @v_Code),
           (@v_IDF,  'Proposal in Validating Status',              'VALIDATE',      'VALIDATING PROPOSAL',               8,    8,     'VALD',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_VALIDATE',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,    @PID, @v_Code),
           (@v_IDF,  'Proposal PendingStatus',                     'PENDING',       'PROPOSAL IN PENDING',               10,  10,     'PND',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_PENDING',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,    @PID, @v_Code),
           (@v_IDF,  'Proposal in Review status',                  'REVIEW',        'PROPOSAL IN REVIEW',                12,  12,     'RVW',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_REVIEW',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,   @PID, @v_Code),
           (@v_IDF,  'Proposal Ready status',                      'ACTIVE',        'PROPOSAL READY',                    14,  14,     'ACT',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ACTIVE',        'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 12,   @PID, @v_Code),
           (@v_IDF,  'Proposal Request for addtional info Status', 'REQUEST',       'REQUEST ADDITIONAL INFO',           16,  16,     'RQST',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_REQUEST',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 14,   @PID, @v_Code),
           (@v_IDF,  'Proposal Evalatution status',                'EVALUATE',      'PROPOSAL IN EVALUATION',            18,  18,     'EVAL',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_EVALUATION',    'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 16,   @PID, @v_Code),
           (@v_IDF,  'Proposal In Selection Status',               'SELECT',        'PROPOSAL IN SELECTION',             20,  20,     'SEL',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_SELECTION',     'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 18,   @PID, @v_Code),
           (@v_IDF,  'Proposal Awarded Status',                    'AWARD',         'PROPOSAL AWARDED',                  22,  22,     'AWD',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_AWARD',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 20,   @PID, @v_Code),
           (@v_IDF,  'Proposal Withdrawn Status',                  'WITHDRAW',      'PROPOSAL WITHDRAWN',                24,  24,     'WHDR',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_WITHDRAW',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 22,   @PID, @v_Code),
           (@v_IDF,  'Proposal Completed Status',                  'COMPLETE',      'COMPLETED PROPOSAL',                26,  26,     'CMPLD',  'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_COMPLETE',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 24,   @PID, @v_Code),
           (@v_IDF,  'Proposal Error Status',                      'ERROR',         'ERROR IN PROPOSAL',                 28,  28,     'ERR',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ERROR',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 26,   @PID, @v_Code),
           (@v_IDF,  'Proposal Inactive Status',                   'INACTIVE',      'INACTIVE PROPOSAL',                 30,  30,     'INACT',  'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_INACTIVE',      'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 28,   @PID, @v_Code),
           (@v_IDF,  'Proposal Suspended status',                  'SUSPEND',       'SUSPENDED PROPOSAL',                32,  32,     'SUSP',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_SUSPEND',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 30,   @PID, @v_Code),
           (@v_IDF,  'Other Status',                               'OTEHR',         'OTHER PROPOSAL',                   1000, 1000,   'OTH',    'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_OTHER',         'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Unknown Status',                             'UNKNOWN',       'UNKNOWN PROPOSAL',                 1001, 1001,   'UNKN',   'C_PROPOSAL',   'C_STATUS',       'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_UNKNOWN',       'Applicable in all C_NEOS APPLICATIONS',1,1, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
-- Proposal Delivery Methold
           (@v_IDF,  'By Email',                                                           'C_BNP_EMAIL',              'EMAIL',                              1,  2,     'EML',       'C_DELIVERY', 'C_BNP',     'Deliver Proposal/Response by Email to provided Email Address.', @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_EMAIL',      'Applicable in all C_NEOS APPLICATIONS',1,2, @v_SDATE, @v_USER, 744, 'VERSION:0', 2,  @PID, @v_Code),
           (@v_IDF,  'By Mail',                                                            'C_BNP_MAIL',               'MAIL',                               2,  4,     'ML',        'C_DELIVERY', 'C_BNP',     'Deliver Proposal/Response by mail to provided Mail Address.',   @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_MAIL',       'Applicable in all C_NEOS APPLICATIONS',1,4, @v_SDATE, @v_USER, 744, 'VERSION:0', 4,  @PID, @v_Code),
           (@v_IDF,  'Online Upload',                                                      'C_BNP_ONLINE',             'UPLOAD TO URL',                      4,  6,     'ML',        'C_DELIVERY', 'C_BNP',     'Upload Proposal/Response online to provided Web Side.',         @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ONLINE',     'Applicable in all C_NEOS APPLICATIONS',1,4, @v_SDATE, @v_USER, 744, 'VERSION:0', 6,  @PID, @v_Code),
           (@v_IDF,  'All Three',                                                          'C_BNP_ALL',                'ALL',                                7,  8,     'ALL',       'C_DELIVERY', 'C_BNP',     'Deliver Proposal/Response by Email, Mail, and online.',         @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ALL',        'Applicable in all C_NEOS APPLICATIONS',1,6, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,  @PID, @v_Code),
           (@v_IDF,  'Email, Mail, online (Any)',                                          'C_BNP_ANY',                'ANY',                               10,  6,     'ANY',       'C_DELIVERY', 'C_BNP',     'Deliver Proposal/Response either Email, Mail, or Online.',      @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_ANY',        'Applicable in all C_NEOS APPLICATIONS',1,6, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,  @PID, @v_Code),
           (@v_IDF,  'Other Deliery',                                                      'C_BNP_OTHER',              'OTHER',                            100,  8,     'OTH',       'C_DELIVERY', 'C_BNP',     'Deliver Proposal/Response through other specified method',      @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_OTHER',      'Applicable in all C_NEOS APPLICATIONS',1,8, @v_SDATE, @v_USER, 744, 'VERSION:0', 100,  @PID, @v_Code),
           (@v_IDF,  'Undefined',                                                          'C_BNP_UNDEFINE',           'UNDEFINED',                        -99,  10,    'UNDEF',     'C_DELIVERY', 'C_BNP',     'Proposal/Response are not defined yet',                         @v_STATUS,@v_SDATE,'DM userd for Mapping',        'C_UNDEFINE',   'Applicable in all C_NEOS APPLICATIONS',1,10, @v_SDATE, @v_USER, 744, 'VERSION:0', 1000,  @PID, @v_Code),

 --- reason list type
           (@v_IDF,  'No Bid for the order',                                               'C_RSN_NOBID',              'NOBID',                             1,  2,     'NOBID',      'C_REASON', 'C_LIST_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'NoBid',          'Applicable in all C_NEOS APPLICATIONS',1,2, @v_SDATE, @v_USER, 744, 'VERSION:0', 8,  @PID, @v_Code),
           (@v_IDF,  'Cancelled Order ',                                                   'C_RSN_CANCEL',             'CANCELLATION',                      2,  4,     'CNCL',       'C_REASON', 'C_LIST_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Cancellation',   'Applicable in all C_NEOS APPLICATIONS',1,4, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,  @PID, @v_Code),
           (@v_IDF,  'Other',                                                              'C_RSN_OTHER',              '',                                  0, 100,    'OTH',        'C_REASON', 'C_LIST_TYPE',     'Mapping Value reuse of term from EGOS in NEOS Applications',@v_STATUS,@v_SDATE,'DM userd for Mapping',        'Other',          'Applicable in all C_NEOS APPLICATIONS',1,100, @v_SDATE, @v_USER, 744, 'VERSION:0', 10,  @PID, @v_Code)

/*
INSERT INTO dbo.CODE_VALUESETS(IDF, [APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY], [UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('FAR',CREATED_WHEN,cast(ID as varchar(16))), @v_IDF, [TYPE], 'C_'+upper(replace(replace(dbo.fn_Parse(NEOS.dbo.fn_Parse([TYPE],-1,'(FAR ','C_RIGHT'),-1,')','C_LEFT_DEF'),' ',''),'.','_')),[TYPE], ID,ID, 'FAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: ' + [TYPE], @v_STATUS, @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:'+cast(ID as varchar(16)), 'SYM_FO_EXCEPTION_TYPE',1, 1,CREATED_WHEN, CREATED_BY, MODIFIED_WHEN, MODIFIED_BY,VERSION,744,'VERSION:0'
FROM CIOCSBK.dbo.SYM_FO_EXCEPTION_TYPE
*/
INSERT INTO dbo.CODE_VALUESETS(IDF, [APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY], [UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], POSITION_ORDER) VALUES
(dbo.fn_NewIDFExt('FAR',default,'1'),  @v_IDF, 'None',                                                                         'C_NONE',        'NONE',                     1,1,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: None',                                                                         'INACTIVE', @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:1', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',1),
(dbo.fn_NewIDFExt('FAR',default,'2'),  @v_IDF, 'Urgent Need (FAR 16.505 b2i)',                                                 'C_16_505B2I',   'URGENT_NEED',              2,2,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Urgent Need (FAR 16.505 b2i)',                                                 'INACTIVE', @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:2', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',2),
(dbo.fn_NewIDFExt('FAR',default,'3'),  @v_IDF, 'Capability (FAR 16.505 b2ii)',                                                 'C_16_505B2II',  'CAPABILITY',               3,3,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Capability (FAR 16.505 b2ii)',                                                 'INACTIVE', @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:3', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',3),
(dbo.fn_NewIDFExt('FAR',default,'4'),  @v_IDF, 'Logical Follow-on (FAR 16.505 b2iii)',                                         'C_16_505B2III', 'LOGICAL_FOLLOW_ON',        4,4,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Logical Follow-on (FAR 16.505 b2iii)',                                         'INACTIVE', @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:4', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',4),
(dbo.fn_NewIDFExt('FAR',default,'5'),  @v_IDF, 'Unacceptable Delay (FAR 16.505 (b)(2)(i)(A))',                                 'C_16_505B2IA',  'UNACCEPTABLE_DELAY',       5,5,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Unacceptable Delay (FAR 16.505 (b)(2)(i)(A))',                                 'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:5', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',5),
(dbo.fn_NewIDFExt('FAR',default,'6'),  @v_IDF, 'Unique/Highly Specialized Source (FAR 16.505 (b)(2)(i)(B))',                   'C_16_505B2IB',  'SPECIALIZED_SOURCE',       6,6,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Unique/Highly Specialized Source (FAR 16.505 (b)(2)(i)(B))',                   'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:6', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',6),
(dbo.fn_NewIDFExt('FAR',default,'7'),  @v_IDF, 'Logical Follow-On (FAR 16.505 (b)(2)(i)(C))',                                  'C_16_505B2IC)', 'LOGICAL_FOLLOW_ON_C',      7,7,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Logical Follow-On (FAR 16.505 (b)(2)(i)(C))',                                  'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:7', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',7),
(dbo.fn_NewIDFExt('FAR',default,'8'),  @v_IDF, 'Minimum Guarantee (FAR 16.505 (b)(2)(i)(D))',                                  'C_16_505B2ID',  'MINIMUM_GUARANTEE',        8,8,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Minimum Guarantee (FAR 16.505 (b)(2)(i)(D))',                                  'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:8', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',8),
(dbo.fn_NewIDFExt('FAR',default,'9'),  @v_IDF, 'Authorized/Required by Statute (FAR 16.505 (b)(2)(i)(E))',                     'C_16_505B2IA',  'AUTHORIZED_BY_STATUTE',    9,9,   'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Authorized/Required by Statute (FAR 16.505 (b)(2)(i)(E))',                     'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:9', 'SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',9),
(dbo.fn_NewIDFExt('FAR',default,'10'), @v_IDF, 'Set Aside Orders as identified in FAR 19.000 (a)(3) (FAR 16.505(b)(2)(i)(F))', 'C_16_505B2IF',  'SMALL_BUSINESS_SET_ASIDE', 10,10, 'FOFAR', 'C_FO_EXCEPTION', 'C_TYPE', 'EXCEPTION to FAR: Set Aside Orders as identified in FAR 19.000 (a)(3) (FAR 16.505(b)(2)(i)(F))', 'ACTIVE',   @v_SDATE, 'Migrated From SYM_FO_EXCEPTION_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_FO_EXCEPTION_TYPE:10','SYM_FO_EXCEPTION_TYPE',1, 1,@v_SDATE, @v_USER, @v_SDATE, @v_USER,0,744,'VERSION:0',10)

INSERT INTO dbo.CODE_VALUESETS(IDF, [APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY], [UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('CTRT',t.CREATED_WHEN,cast(t.ID as varchar(16))), a.IDF, t.[NAME], 'C_'+upper(replace(replace(t.ABBR,'-','_'),'&','')),IsNULL(t.CATEGORY,Upper(replace(t.NAME,' ','_'))),t.MASK, t.ID,'C_MASK', t.ABBR, 'C_CONTRACT', 'C_TYPE', 'CONTRACT TYPE: ' + t.[NAME], @v_STATUS, @v_SDATE, 'Migrated From SYM_CONTRACT_TYPE on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_CONTRACT_TYPE:'+cast(t.ID as varchar(16)), 'SYM_CONTRACT_TYPE',1, 1,t.CREATED_WHEN, t.CREATED_WHEN, t.MODIFIED_WHEN, t.MODIFIED_BY, t.VERSION,744,'VERSION:0'
FROM CIOCSBK.dbo.SYM_CONTRACT_TYPE t inner join CODE_APPLICATIONS a on a.REFERENCE_ID = 'SYM_GWAC:'+cast(t.GWAC_ID as varchar(10))

INSERT INTO dbo.CODE_VALUESETS(IDF, [APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER])
SELECT dbo.fn_NewIDFExt('RSN',default,cast(ID as varchar(16))), @v_IDF, reason,  'C_NOBID_'+cast(ID as varchar(16)),'Contractor No Bid Response Reason: '+reason,  ID, LIST_TYPE, 'NOBID', 'C_NOBID',   'C_REASON',  'Reasons for No-BID Order Response from contract holder :' + reason, @v_STATUS, @v_SDATE, 'Migrated From Reason_List on Date: ' + cast(@v_SDATE as varchar(24)), 'REASON_LIST:'+cast(ID as varchar(16)), 'REASON_LIST',1, 1,@v_SDATE, @v_User,744,'VERSION:0', Sort_Order
FROM CIOCSBK.dbo.Reason_List WHERE LIST_TYPE = 1

INSERT INTO dbo.CODE_VALUESETS([IDF],[APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER])
SELECT dbo.fn_NewIDFExt('RSN',default,cast(ID as varchar(16))), @v_IDF, reason,  'C_ORD_CNCL_'+cast(ID as varchar(16)),'Customer Cancel Order Reason:' + reason,  ID,  LIST_TYPE, 'CANCEL', 'C_CANCEL',  'C_REASON',  'Reasons for Order Cancellation from federal customer: '+reason, @v_STATUS, @v_SDATE, 'Migrated From Reason_List on Date: ' + cast(@v_SDATE as varchar(24)), 'REASON_LIST:'+cast(ID as varchar(16)), 'REASON_LIST',1, 1,@v_SDATE, @v_User,744,'VERSION:0', Sort_Order
FROM CIOCSBK.dbo.Reason_List WHERE LIST_TYPE = 2

INSERT INTO dbo.CODE_VALUESETS([IDF],[APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[VALUE_UOM],[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[ACCESS_LEVEL],[VERSION], [POSITION_ORDER])
SELECT dbo.fn_NewIDFExt('EXP',Created_When,cast(ID as varchar(16))), @v_IDF, Name,  'C_'+NAME, 'C_DAY', DB_TABLE+':'+DB_FIELD,    Duration, Unit, case WHEN NAME='PASSWORD' THEN 'PWD' ELSE NAME END,'C_COMPLIANCE', 'C_EXPIRATION',   Description, @v_STATUS, @v_SDATE, 'Migrated From SYM_EXPIRATION on Date: ' + cast(@v_SDATE as varchar(24)), 'SYM_EXPIRATION:'+cast(ID as varchar(16)), 'SYM_EXPIRATION',1, 1, Created_When, Created_by, Modified_When, Modified_by, 744,'VERSION:'+Cast(version as varchar(16)), unit
FROM CIOCSBK.dbo.SYM_EXPIRATION

INSERT INTO dbo.GROUP_VALUESETS([GROUP_IDF] ,[VALUE_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[POSITION_ORDER],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION])
SELECT  g.[IDF] ,v.[IDF], v.[NAME_CODE], 'C_USER', g.[TYPE_CODE], v.[DESCRIPTION], g.[CREATED_DATE], v.[STATUS_CODE],v.[STATUS_DATE],v.[COMMENTS],g.[REFERENCE_ID],g.[REFERENCE_NAME],v.[POSITION_ORDER],1,v.[CREATED_DATE],v.[CREATED_BY],v.[ACCESS_LEVEL],v.[VERSION]
FROM CODE_GROUPS g, CODE_VALUESETS v
WHERE g.VALUE_CODE = 'C_VST_STATUS' AND v.VALUE_CODE IN ('C_INITIAL','C_ACTIVE','C_SUSPEND','C_RESET','C_DELETE')

Print '------------- Data Migration  [dbo].[sc_ValueSet]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Roles]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Roles]  -----START: ' + cast(GetDate() as varchar(24))
-- install Default CODE_ROLES
declare @SDATE as DateTime = GetDATE(), @SUSER as varchar(128) = SUSER_Name(), @PID as varchar(64) = ''
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_MEMBER'

select @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS_APP'

INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('User',                                                   'EUSR',         'C_USER',          'C_PER_ROLE', 'Enterprise User for All NEOS Applications.',                           'C_ENTERPRISE',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE,  @SUSER, 7654, @v_IDF, 2),
('Viewer',                                                 'EVWR',         'C_VIEWER',        'C_PER_ROLE', 'Enterprise Viewer (ReadOnly) for All NEOS Applications.',              'C_ENTERPRISE',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE,  @SUSER, 4444, @v_IDF, 4),
('Super User',                                             'SUSR',         'C_SUSER',         'C_PER_ROLE', 'Enterprise Supper User for All NEOS Applications.',                    'C_ENTERPRISE',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE,  @SUSER, 7766, @v_IDF, 6),
('Administrator',                                          'EADM',         'C_ADMIN',         'C_PER_ROLE', 'Enterprise Administrator for All NEOS Applications.',                  'C_ENTERPRISE',    'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:36', 'NITAAC_SA_EDIT_ADMIN', @SDATE, @SUSER, 7777, @v_IDF, 8),
('Customer User',                                          'FCUSR',        'C_FC_USER',       'C_PER_ROLE', 'Federal Customer User.',                                               'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:8', 'CUST_STAFF', @SDATE, @SUSER, 7644, @v_IDF, 10),
('Customer Point of Contact User',                         'FCPOC',        'C_FC_POC',        'C_PER_ROLE', 'Federal Customer Point of Contact (POC) User.',                        'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 12),
('Contract Officer (CO) User',                             'FCCO',         'C_FC_CO',         'C_PER_ROLE', 'Federal Customer Contractor Officer (CO) User.',                       'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:6', 'CUST_CO', @SDATE, @SUSER, 6644, @v_IDF, 16),
('Contract Specialist (CS) User',                          'FCCS',         'C_FC_CS',         'C_PER_ROLE', 'Federal Customer Contract Specialist (CS) User.',                      'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 744, @v_IDF, 18),
('Acquisition Management Officr (AMO) User',               'AMO',          'C_FC_AMO',        'C_PER_ROLE', 'Federal Customer Acquisition Management Officr(AMO)',                  'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:7', 'CUST_AO', @SDATE, @SUSER, 7644, @v_IDF, 20),
('Customer Program Officer/Manager (PO/M) User',           'FCPO',         'C_FC_PO',         'C_PER_ROLE', 'Federal Customer Program Officer/Manager (PO/M) User.',                'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:9', 'CUST_PO', @SDATE, @SUSER, 7644, @v_IDF, 22),
('Termination Contracting Officer',                        'TCO',          'C_FC_TCO',        'C_PER_ROLE', 'Federal Customer Termination Contracting Officer (TCO) User.',         'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 24),
('Ordering Contracting Officer',                           'OCO',          'C_FC_OCO',        'C_PER_ROLE', 'Federal Customer Ordering Contracting Officer (OCO) User.',            'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 26),
('Contract Office Technical Representative (COTR) User',   'FCCOTR',       'C_FC_COTR',       'C_PER_ROLE', 'Federal Customer Contract Officer Represetative (COR/COTR).',          'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 28),
('Information System Security Officer (ISSO) User',        'ISSO',         'C_FC_ISSO',       'C_PER_ROLE', 'Federal Customer Information System Security Officer (ISSO) User.',    'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:10', 'CUST_ISSO', @SDATE, @SUSER, 7644, @v_IDF, 30),
('National Institutes of Health (NIH) User',               'NIH',          'C_FC_NIH',        'C_PER_ROLE', 'Federal Customer National Institutes of Health (NIH) User.',           'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:13', 'CUST_NIH',  @SDATE, @SUSER, 7644, @v_IDF, 32),
('Department of Health and Human Services (DHHS) User',    'DHHS',         'C_FC_DHHS',       'C_PER_ROLE', 'Federal Customer Department of Health and Human Services (DHHS) User.','C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:14', 'CUST_DHSS', @SDATE, @SUSER, 7644, @v_IDF, 34),
('Contractor Reporter',                                    'CHRPTR',       'C_CH_REPORTER',   'C_PER_ROLE', 'Contract Holder Finance Reporter.',                                    'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 36),
('Contractor User',                                        'CHUSR',        'C_CH_USER',       'C_PER_ROLE', 'Contract Holder User.',                                                'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:12', 'CONT_STAFF', @SDATE, @SUSER, 744, @v_IDF, 38),
('Contractor Specialist',                                  'SPC',          'C_CH_SPECIALIST', 'C_PER_ROLE', 'Federal Customer Contractor Specialist (CS).',                         'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 40),
('Contractor Point of Contact',                            'CHPOC',        'C_CH_POC',        'C_PER_ROLE', 'Contract Holder Point of Contact (POC).',                              'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 6644, @v_IDF, 42),
('Contractor Admin User',                                  'CHADM',        'C_CH_ADMIN',      'C_PER_ROLE', 'Contract Holder User Adminitration User.',                             'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 44),
('Contractor Program Manager User',                        'CHPM',         'C_CH_PM',         'C_PER_ROLE', 'Contract Holder Program Manager (PM) User.',                           'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:11', 'CONT_PM', @SDATE, @SUSER, 7644, @v_IDF, 46),
('Contractor CIOSP2I Application User',                    'CIOSP2I',      'C_CH_SP2I',       'C_PER_ROLE', 'Contract Hoder CIOSP2I Application User.',                             'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:15', 'CONT_CIOSP2I', @SDATE, @SUSER, 7644, @v_IDF, 48),
('Contractor LTASC Application User',                      'LTASC',        'C_CH_LTASC',      'C_PER_ROLE', 'Contract Hoder CIOSP2I Application User.',                             'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:16', 'CONT_LTASC', @SDATE, @SUSER, 7644, @v_IDF, 50),
('NITAAC Business Admin User',                             'BIZADM',       'C_N_ADMIN_BIZ',   'C_PER_ROLE', 'NITAAC Business Administration User for announcements.',               'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:34', 'NITAAC_SA_ANNOUNCE', @SDATE, @SUSER, 7644, @v_IDF, 52),
('NITAAC Organization Admin User',                         'ADMORG',       'C_N_ADMIN_ORG',   'C_PER_ROLE', 'NITAAC Admin User to hanle Customer/Contractor Organizations.',        'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:32', 'NITAAC_SA_FED_ORG', @SDATE, @SUSER, 7644, @v_IDF, 54),
('NITAAC HelpDesk User',                                   'HLPDK',        'C_N_HELPDESK',    'C_PER_ROLE', 'NITAAC HelpDesk User to hanle Call Center and tickets.',               'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:19', 'NITAAC_HD', @SDATE, @SUSER, 7644, @v_IDF, 56),
('NITAAC User',                                            'NUSR',         'C_N_USER',        'C_PER_ROLE', 'NITAAC User.',                                                         'C_NITAAC',        'DELETE', @SDATE, '', 'C_NEOS', 'APX_GROUP:21', 'NITAAC_STAFF', @SDATE, @SUSER, 7644, @v_IDF, 58),
('NITAAC Contract Officer (CO) User',                      'NCO',          'C_N_CO',          'C_PER_ROLE', 'NITAAC Contract Officer (CO) User.',                                   'C_NITAAC',        'DELETE', @SDATE, '', 'C_NEOS', 'APX_GROUP:22', 'NITAAC_CO', @SDATE, @SUSER, 7644, @v_IDF, 60),
('NITAAC Contract Specialist (CS) User',                   'NCS',          'C_N_CS',          'C_PER_ROLE', 'NITAAC Contract Specialist (CS) User.',                                'C_NITAAC',        'DELETE', @SDATE, '', 'C_NEOS', 'APX_GROUP:23', 'NITAAC_CS', @SDATE, @SUSER, 7644, @v_IDF, 62),
('NITAAC User',                                            'NUSR',         'C_N_USER',        'C_PER_ROLE', 'NITAAC User.',                                                         'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:24', 'NITAAC_STAFF', @SDATE, @SUSER, 7644, @v_IDF, 64),
('NITAAC Finance Officer/Anlayst',                         'NFO',          'C_N_FINNANCER',   'C_PER_ROLE', 'NITAAC Finance Officer/Analyst (FO/A) User.',                          'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:3',  'NITAAC_FA', @SDATE, @SUSER, 7644, @v_IDF, 66),
('NITAAC Contract Officer (CO) User',                      'NCO',          'C_N_CO',          'C_PER_ROLE', 'NITAAC Contract Officer (CO) User.',                                   'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:4',  'NITAAC_CO', @SDATE, @SUSER, 7644, @v_IDF, 68),
('NITAAC Contract Specialist (CS) User',                   'NCS',          'C_N_CS',          'C_PER_ROLE', 'NITAAC Contract Specialist (CS) User.',                                'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:5',  'NITAAC_CS', @SDATE, @SUSER, 7644, @v_IDF, 70),
('NITAAC Reporter User',                                   'NRPTR',        'C_N_REPORTER',    'C_PER_ROLE', 'NITAAC Reporter User.',                                                'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:30', 'NITAAC_SA_REPORT', @SDATE, @SUSER, 7644, @v_IDF, 72),
('NITAAC NEOS/EGOS Program Support User',                  'NSUPT',        'C_N_SUPPORT',     'C_PER_ROLE', 'NITAAC System Admin/Manager User.',                                    'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:25', 'PGM_SUPPORT', @SDATE, @SUSER, 7644, @v_IDF, 74),
('NITAAC System Admin/Manager User',                       'NADM',         'C_N_ADMIN',       'C_PER_ROLE', 'NITAAC System Admin/Manager User.',                                    'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:27', 'NITAAC_SA_USER', @SDATE, @SUSER, 7644, @v_IDF, 76),
('NITAAC Senior System Admin User',                        'NSADM',        'C_N_ADMIN_SR',    'C_PER_ROLE', 'NITAAC Senior System Admin/Manager User.',                             'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:28', 'NITAAC_SA_USER_SUPPER', @SDATE, @SUSER, 7644, @v_IDF, 78),
('NITAAC Contract Admin User',                             'NCTRT',        'C_N_ADMIN_CTRT',  'C_PER_ROLE', 'NITAAC Admin User for contract administrations.',                      'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:31', 'NITAAC_SA_CONTRACT', @SDATE, @SUSER, 7644, @v_IDF, 80),
('NITAAC System Configuration Admin User',                 'NCFG',         'C_N_ADMIN_CFG',   'C_PER_ROLE', 'NITAAC Admin User for System Configuration Management.',               'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:35', 'NITAAC_SA_CONFIG', @SDATE, @SUSER, 7644, @v_IDF, 82),
('NITAAC Developer User',                                  'NDEVR',        'C_N_DEVELOPER',   'C_PER_ROLE', 'NITAAC System Developer User.',                                        'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:33', 'NITAAC_SA_INDEX', @SDATE, @SUSER, 7644, @v_IDF, 84),
('NITAAC Reviewer User',                                   'NRVWR',        'C_N_REVIEWER',    'C_PER_ROLE', 'NITAAC Task Order (TO) Reviewer User.',                                'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', 'APX_GROUP:29', 'NITAAC_SA_ORDER', @SDATE, @SUSER, 7644, @v_IDF, 86),
('NITAAC Advisor User',                                    'NADVR',        'C_N_ADVISOR',     'C_PER_ROLE', 'NITAAC Advisor for Customer contracts.',                               'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 88),
('NITAAC Approver User',                                   'NAPPR',        'C_N_APPROVER',    'C_PER_ROLE', 'NITAAC Approver for public releases.',                                 'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 90),
('NITAAC Point of Contact User',                           'NPOC',         'C_N_POC',         'C_PER_ROLE', 'NITAAC Point of Contact (POC) User.',                                  'C_NITAAC',        'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 6644, @v_IDF, 92),
('Customer Group',                                         'FCGRP',        'C_FC_GROUP',      'C_GRP_ROLE', 'Federal Customer Organuization Group.',                                'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 94),
('Contractor Group',                                       'CHGRP',        'C_CH_GROUP',      'C_GRP_ROLE', 'Contract Holder Organization Group.',                                  'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 96),
('Customer',                                               'FC',           'C_CUSTOMER',      'C_ORG_ROLE', 'Federal Customer Organuization.',                                      'C_CUSTOMER',      'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 98),
('Contractor',                                             'CH',           'C_CONTRACTOR',    'C_ORG_ROLE', 'Contract Holder Organization.',                                        'C_CONTRACTOR',    'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 100),
('Organization',                                           'ORG',          'C_ORGANIZATION',  'C_ORG_ROLE', 'Organization General/Default Role.',                                   'C_DEFAULT',       'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 1000002),
('Group',                                                  'GRP',          'C_GROUP',         'C_GRP_ROLE', 'Group General/Default Role',                                           'C_DEFAUAL',       'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 1000004),
('Person',                                                 'PER',          'C_PERSON',        'C_PER_ROLE', 'Person General/Default Role.',                                         'C_DEFAULT',       'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7644, @v_IDF, 1000006)

SELECT @PID = IDF FROM CODE_ROLES WHERE VALUE_CODE = 'C_PERSON'
INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL] ,[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('Application Viewr',                            'VWR',          'C_VIEWER',     'C_PER_ROLE', 'Local System Viewer (ReadOnly).',                                                   'C_NEOS',           'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 4444, @v_Code, @PID, @v_IDF, 5),
('Application User',                             'USR',          'C_USER',       'C_PER_ROLE', 'Local System User.',                                                                'C_NEOS',           'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7654, @v_Code, @PID, @v_IDF, 6),
('Application Administrator',                    'ADM',          'C_ADMIN',      'C_PER_ROLE', 'Local System Administrator.',                                                       'C_NEOS',           'ACTIVE', @SDATE, '', 'C_NEOS', '', '', @SDATE, @SUSER, 7677, @v_Code, @PID, @v_IDF, 7)


Select @PID = IDF from CODE_ROLES where VALUE_CODE = 'C_FC_POC'
INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL] ,[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('Primary Contact',                          'CPOC',        'C_FC_POC_PER',        'C_PER_ROLE', 'Primary Point of Contacts.',                          'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 1),
('Secondary Contact',                        'CPOC2',       'C_FC_POC2_PER',       'C_PER_ROLE', 'Secondary Point of Contacts.',                        'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 2),
('Organizational Person Contact',            'OPOC',        'C_FC_POC_ORG',        'C_PER_ROLE', 'Orgznizational Person Contact.',                      'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 3),
('Mail Contact',                             'MPOC',        'C_FC_POC_MAIL',       'C_PER_ROLE', 'Email/Mailing Contact.',                              'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 4),
('Pre-Award Contact',                        'PPOC',        'C_FC_POC_PRE_AWD',    'C_PER_ROLE', 'Pre-Award Point of Contacts.',                        'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 5),
('Awarding Award Contact',                   'APOC',        'C_FC_POC_AWD',        'C_PER_ROLE', 'Awading Award Point of Contacts.',                    'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 6),
('Post-Award Contact',                       'SPOC',        'C_FC_POC_POST_AWD',   'C_PER_ROLE', 'Post-Award Point of Contacts.',                       'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 7),
('Secondary Point of Contact',               'SPOC2',       'C_FC_POC2_POST_AWD',  'C_PER_ROLE', 'Post-Award Secondary Point of various Contacts.',     'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 8),
('Other Contact',                            'OPOC',        'C_FC_POC_OTHER',      'C_PER_ROLE', 'Other Point of Contacts.',                            'C_CUSTOMER',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 9)

Select @PID = IDF from CODE_ROLES where VALUE_CODE = 'C_CH_POC'
INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL] ,[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('Primary Contact',                          'CPOC',        'C_CH_POC_PER',        'C_PER_ROLE', 'Primary Point of Contacts.',                          'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 1),
('Secondary Contact',                        'CPOC2',       'C_CH_POC2_PER',       'C_PER_ROLE', 'Secondary Point of Contacts.',                        'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 2),
('Organizational Person Contact',            'OPOC',        'C_CH_POC_ORG',        'C_PER_ROLE', 'Orgznizational Person Contact.',                      'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 3),
('Mail Contact',                             'MPOC',        'C_CH_POC_MAIL',       'C_PER_ROLE', 'Email/Mailing Contact.',                              'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 4),
('Program Contact',                          'APOC',        'C_CH_POC_PM',         'C_PER_ROLE', 'Program Point of Contacts.',                          'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 6),
('Contract Contact',                         'SPOC',        'C_CH_POC_CTRT',       'C_PER_ROLE', 'Contract Point of Contacts.',                         'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 7),
('Other Contact',                            'OPOC',        'C_CH_POC_OTHER',      'C_PER_ROLE', 'Other Point of Contacts.',                            'C_CONTRACTOR',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF, 9)

Select @PID = IDF from CODE_ROLES where VALUE_CODE = 'C_N_POC'
INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL] ,[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('NITAAC Primary Contact',                          'NPOC',        'C_N_POC_PER',        'C_PER_ROLE',    'NITAAC Primary Point of Contacts.',          'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,1),
('NITAAC Secondary Contact',                        'NPOC2',       'C_N_POC2_PER',       'C_PER_ROLE',    'NITAAC Secondary Point of Contacts.',        'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,2),
('HELPDESK Contact',                                'HPOC',        'C_N_POC_ORG',        'C_PER_ROLE',    'NITAAC HelpDesk/Call Center Contact.',       'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,3),
('Advise Contact',                                  'APOC',        'C_N_POC_ADVISOR',    'C_PER_ROLE',    'Contract SME/Advice Contact.',               'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,4),
('Review Contact',                                  'RPOC',        'C_N_POC_REVIEW',     'C_PER_ROLE',    'COntract Review Point of Contacts.',         'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,5),
('Other Contact',                                   'OPOC',        'C_N_POC_OTHER',      'C_PER_ROLE',    'Other Point of Contacts.',                   'C_NITAAC',   'ACTIVE', @SDATE, '', 'C_POC',   '', '',  @SDATE, @SUSER, 6444, @v_Code, @PID, @v_IDF,9)

Select @PID = IDF from CODE_ROLES where VALUE_CODE = 'C_N_DEVELOPER'
INSERT INTO [dbo].[CODE_ROLES]([NAME_CODE],[ACRONYM_NAME], [VALUE_CODE],[CATEGORY_CODE],[DESCRIPTION] ,[TYPE_CODE], [STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL] ,[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],[POSITION_ORDER]) VALUES
('Network Staff',                               'ITNTWK',        'C_N_NETWORK',       'C_PER_ROLE',  'IT Network Sstaff.',                             'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 1),
('System Staff',                                'ITSYS',         'C_N_SYSTEM',        'C_PER_ROLE',  'IT System Staff.',                               'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 2),
('Development Staff',                           'ITDEV',         'C_N_DEVELOPMENT',   'C_PER_ROLE',  'IT Development Staff.',                          'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 3),
('Operation Support Staff',                     'ITOPS',         'C_N_OPERATION',     'C_PER_ROLE',  'IT Operation Support Staff.',                    'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 4),
('Engineering Staff',                           'ITENG',         'C_N_ENGINEERING',   'C_PER_ROLE',  'IT Engineering/QA Staff.',                       'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 5),
('Database Admin Staff',                        'ITDB',          'C_N_DATABASE',      'C_PER_ROLE',  'Database Admin DBA Staff.',                      'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 6),
('Security Staff',                              'ITSEC',         'C_N_SECURITY',      'C_PER_ROLE',  'IT Security Staff.',                             'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 7),
('Deployment Staff',                            'ITDEP',         'C_N_DEPLOYMENT',    'C_PER_ROLE',  'Deployment Team Staff.',                         'C_NITAAC', 'ACTIVE', @SDATE, '', 'C_IT_STAFF',   '', '',  @SDATE, @SUSER,  7667, @v_Code, @PID, @v_IDF, 8)

UPDATE  R SET APPLICATION_IDF = a.IDF
FROM CODE_ROLES R, CODE_APPLICATIONS a
WHERE R.TYPE_CODE = 'C_ENTERPRISE' AND a.VALUE_CODE = 'C_NEOS'

UPDATE  R SET APPLICATION_IDF = a.IDF
FROM CODE_ROLES R, CODE_APPLICATIONS a
WHERE R.VALUE_CODE in ( 'C_CH_SP2I', 'C_CH_LTASC' ) AND R.VALUE_CODE = replace(a.VALUE_CODE,'C_','C_CH_')

INSERT INTO [dbo].[APPLICATION_ROLES]([ROLE_IDF],[APPLICATION_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[PRIMARY_IDR],[VERIFICATION_IDR],[EFFECTIVE_START_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL])
SELECT  r.IDF, a.IDF, r.NAME_CODE,r.CATEGORY_CODE, r.TYPE_CODE, 'APPLICAITON:['+a.NAME_CODE + '] ROLE:' +r.NAME_CODE,1,1, @v_SDATE, 'Created as a default application role',r.VALUE_CODE,  r.REFERENCE_ID, a.REFERENCE_ID, r.STATUS_CODE, r.STATUS_DATE, r.[CREATED_DATE],r.[CREATED_BY],r.[ACCESS_LEVEL]
FROM CODE_ROLES r, CODE_APPLICATIONS a
WHERE r.TYPE_CODE = 'C_ENTERPRISE' or
((r.VALUE_CODE in ('C_CH_USER','C_FC_USER') or r.VALUE_CODE like 'C_N_%') and a.VALUE_CODE in ('C_CS','C_GSS','C_SP3','C_SP3SB')) or
r.VALUE_CODE in ( 'C_CH_SP2I', 'C_CH_LTASC' ) and a.IDF = r.APPLICATION_IDF

---CIOCSBK.APX_USER

Print '------------- Data Migration  [dbo].[sc_Roles]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_reference]
----
Print '------------- Data Migration  [dbo].[sc_reference]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT', @v_APP_IDF as varchar(64)

INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[LEVELS],[VALUE_CODE],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('CATG',CREATED_WHEN, replace(CODE,'CS_CAT_','CAT')), [NAME],[LEVELS],replace(replace([CODE],'99','10'),'CS_','C_'),[DISCOUNT_RATE],[QUANTITY],[UNIT],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[DATE_EFFECTIVE],[DATE_EXPIRE],CASE WHEN [STATUS]='A' THEN @v_STATUS ELSE 'INACTIVE' END,[CREATED_WHEN],'CAT'+RIGHT(replace(CODE,'99','10'),2),'C_CLIN','C_CATEGORY','','REF_NITAAC_CATEGORY', 'REF_NITAAC_CATEGORY:'+[ID],1, ROW_NUMBER() Over (Order By Code), [CREATED_WHEN],@v_User,[MODIFIED_WHEN],@v_User,[VERSION],744,'VERSION:'+CAST([VERSION] as varchar(16))
FROM CIOCSBK.[dbo].[REF_NITAAC_CATEGORY]

UPDATE dbo.REF_NITAAC_CATEGORY_COMMODITY SET NAME_CODE = NAME_CODE + ' (Includes BigData and Cloud Services)', SEARCH_BY_WORDS = ';VALUE ADDED SERVICES;VAS;CLOUD;CLOUD SERVICES;BIGDATA;BIGDATE SERVICES;'
WHERE VALUE_CODE = 'C_CAT_09'

INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[ACRONYM_NAME],[LEVELS],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[COMMENTS],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[PARENT_IDF],[PARENT_CODE])
SELECT dbo.fn_NewIDFExt('CTCD',CREATED_WHEN, replace(replace(CODE,'CS_CAT_','C'),'_GRP_','')), c.[NAME],replace([CODE],'CS_','C_'), 'C_CLIN','C_COMMODITY',replace(replace(CODE,'CS_CAT_','CAT'),'_GRP_',''), c.[LEVELS],c.[DISCOUNT_RATE],c.[QUANTITY],c.[UNIT],c.[SEARCH_BY_WORDS],c.[DATE_EFFECTIVE],c.[DATE_EXPIRE],c.[COMMENTS],'CAT:'+p.NAME_CODE+ ';  GRP:'+c.[DESCRIPTION],CASE WHEN [STATUS] = 'A' THEN @v_STATUS ELSE 'INACTIVE' END,c.[CREATED_WHEN],c.ID, 'REF_NITAAC_COMMODITY:'+c.ID,1,c.[CREATED_WHEN] ,@v_User ,c.[MODIFIED_WHEN],@v_User,c.[VERSION],744,'VERSION:'+CAST(c.[VERSION] as varchar(16)), p.IDF, p.VALUE_CODE
FROM CIOCSBK.[dbo].[REF_NITAAC_COMMODITY] c INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] p on p.REFERENCE_NAME = 'REF_NITAAC_CATEGORY:'+ c.CATEGORY_ID

UPDATE dbo.REF_NITAAC_CATEGORY_COMMODITY SET VALUE_CODE = LEFT(VALUE_CODE,12) + '_Z', NAME_CODE = 'Others', ACRONYM_NAME = Left(ACRONYM_NAME,len(ACRONYM_NAME)-1) + 'Z', SEARCH_BY_WORDS = ';OTHERS;', DESCRIPTION = Replace(DESCRIPTION,'Other','Others')
WHERE NAME_CODE = 'Other' and len(VALUE_CODE) = 14 and Left(VALUE_CODE,6) = 'C_CAT_'

UPDATE dbo.REF_NITAAC_CATEGORY_COMMODITY SET NAME_CODE = NAME_CODE + ' (Includes Thinpads, Tablets, and iPADs)', SEARCH_BY_WORDS = ';LAPTOPS;NOTEBOOKS;THINPAD;IPADS;TABLETS;'
WHERE VALUE_CODE = 'C_CAT_01_GRP_A'
UPDATE dbo.REF_NITAAC_CATEGORY_COMMODITY SET NAME_CODE = NAME_CODE + ' (Includes Workstations)',    SEARCH_BY_WORDS = ';DESKTOPS;WORKSTATIONS;VIRTUAL MACHINES;VM;'
WHERE VALUE_CODE = 'C_CAT_01_GRP_B'
UPDATE dbo.REF_NITAAC_CATEGORY_COMMODITY SET SEARCH_BY_WORDS = ';ENTERPRISE PERFORMANCE MANAGEMENT TOOLS;PERFORMANCE MANAGEMENT;'
WHERE VALUE_CODE = 'C_CAT_04_GRP_B'

---- add someting news
INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[LEVELS],[VALUE_CODE],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE)
SElECT dbo.fn_NewIDFExt('CTCD',Default, 'C09B'),'CLOUD TECHNOLOGY AND SERVICES',LEVELS, 'C_CAT_09_GRP_B', [DISCOUNT_RATE],[QUANTITY],[UOM],';CLOUD SERVICES;CLOUD;CLOUD COMPUTING;CLOUD TECHNOLOGY;',[COMMENTS],'CAT:VALUD ADDED SERVICES; GRP: CLOUD TECHNOLOGY AND SERVICES',[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],NULL,NULL,[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE
FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] WHERE VALUE_CODE = 'C_CAT_09_GRP_A'
INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[LEVELS],[VALUE_CODE],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE)
SElECT dbo.fn_NewIDFExt('CTCD',Default, 'C09C'), 'BIGDATA TECHNOLOGY AND SERVICES',LEVELS, 'C_CAT_09_GRP_C', [DISCOUNT_RATE],[QUANTITY],[UOM],';BIGDATA SERVICES;BIGDATA;BIGDATA COMPUTING;BIGDATA TECHNOLOGY;',[COMMENTS],'CAT:VALUD ADDED SERVICES; GRP: BIGDATA TECHNOLOGY AND SERVICES',[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],NULL,NULL,[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE
FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] WHERE VALUE_CODE = 'C_CAT_09_GRP_A'
INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[LEVELS],[VALUE_CODE],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE)
SElECT dbo.fn_NewIDFExt('CTCD',Default, 'C09Z'), 'Others',LEVELS, 'C_CAT_09_GRP_Z', [DISCOUNT_RATE],[QUANTITY],[UOM],';OTHER;OTHERS;',[COMMENTS],'CAT:VALUD ADDED SERVICES; GRP: OTHERS',[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],NULL,NULL,[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE
FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] WHERE VALUE_CODE = 'C_CAT_09_GRP_A'
INSERT INTO [dbo].[REF_NITAAC_CATEGORY_COMMODITY]([IDF],[NAME_CODE],[LEVELS],[VALUE_CODE],[DISCOUNT_RATE],[QUANTITY],[UOM],[SEARCH_BY_WORDS],[COMMENTS],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], PARENT_IDF, PARENT_CODE)
SElECT dbo.fn_NewIDFExt('CTCD',Default, 'C01D'),'Ruggedized Devices',LEVELS, 'C_CAT_01_GRP_D', [DISCOUNT_RATE],[QUANTITY],[UOM],';RUGGEDIZED;RUGGED;RUGGED DEVICES;RUGGEDIZED DEVICES;',[COMMENTS],'CAT:End User Hardware Commodities; GRP: Ruggedized Devices',[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],NULL,NULL,[VERIFICATION_IDR],[POSITION_ORDER],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],PARENT_IDF, PARENT_CODE
FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] WHERE VALUE_CODE = 'C_CAT_01_GRP_A'

INSERT INTO [dbo].[REF_NITAAC_OEM_MFR]([NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[URL],[DESCRIPTION],[COMMENTS],[SEARCH_BY_WORDS],[CATEGORY_CODE],[TYPE_CODE] ,[STATUS_CODE],[STATUS_DATE],[REFERENCE_ID],[REFERENCE_NAME],[ADDRESS_IDF],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT [NAME],'C_' + CAST(ROW_NUMBER() OVER(ORDER BY NAME) as varchar(12)),[ABBR] ,[URL],[DESCRIPTION],[COMMENTS] ,[SEARCH_BY_WORDS],'C_CLIN','C_OEM_MFR',CASE WHEN [STATUS]='A' THEN @v_STATUS ELSE 'INACTIVE' END,[CREATED_WHEN],[ID],'REF_NITAAC_OEM_MFR:'+[ID],NULL,[CREATED_WHEN], @v_User, [MODIFIED_WHEN], @v_User,[VERSION], 744, 'VERSION:'+Cast([VERSION] as varchar(16))
FROM CIOCSBK.[dbo].[REF_NITAAC_OEM_MFR]

SELECT @v_IDF = IDF From CODE_APPLICATIONS WHERE VALUE_CODE = 'C_CS' AND TYPE_CODE = 'C_WEB'
INSERT INTO [dbo].[REF_NITAAC_DEFINITIONS]([NAME_CODE],[APPLICATION_IDF],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[MASK_VALUE],[VERSION],POSITION_ORDER)
SELECT  NAME_CODE, @v_IDF, replace(VALUE_CODE,'CS_','C_'), '', replace(replace(VALUE_CODE,'C_',''),'_',''),'C_APPLICATION','',DESCRIPTION,COMMENTS,'',[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], POWER(2,cast(right(VALUE_CODE,2) as int)), VERSION,POSITION_ORDER
FROM [dbo].[REF_NITAAC_CATEGORY_COMMODITY] WHERE CATEGORY_CODE = 'C_CLIN' AND TYPE_CODE = 'C_CATEGORY'

--- define GSS Definition for configurations

SELECT @v_IDF = IDF FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] where VALUE_CODE = 'C_CAT_01_GRP_A'
select @v_APP_IDF = IDF FROM [dbo].[CODE_APPLICATIONS] where VALUE_CODE = 'C_GSS'
INSERT INTO [dbo].[REF_NITAAC_DEFINITIONS]([NAME_CODE],[APPLICATION_IDF],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[MASK_VALUE],[VERSION]) VALUES
('laptop',             @v_APP_IDF, 'C_L1',     NULL,       'L1', 'C_GSS','C_CONFIGURATION','8 GB RAM!256 GB hard drive!14 in. min display!5 lbs or less!',                                                                  'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_A',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 2,  'VERSION:0'),
('LightweightLaptop',  @v_APP_IDF, 'C_L2',     NULL,       'L2', 'C_GSS','C_CONFIGURATION','8 GB RAM!180 GB hard drive!13 in. max display!3.5 lbs or less!',                                                                'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_A',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 4,  'VERSION:0'),
('HighlevelLaptop',    @v_APP_IDF, 'C_L3',     NULL,       'L3', 'C_GSS','C_CONFIGURATION','16 GB RAM!500 GB hard drive!15 in. min display!6.5 lbs or less!',                                                               'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_A',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 8,  'VERSION:0'),
('Maclaptop',          @v_APP_IDF, 'C_L4',     NULL,       'L4', 'C_GSS','C_CONFIGURATION','<a href=/gss/cat2config/Category2_Lightweight Laptops.pdf%target=%_blank%>Lightweight Laptops</a>!',                            'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_A',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 16,  'VERSION:0'),
('Tablet',             @v_APP_IDF, 'C_T1',     NULL,       'T1', 'C_GSS','C_CONFIGURATION','The minimum specifications for tablet devices are CPU 1.3 GHZ; screen size 6.8 inch.; 1024x600 resolution; and 16GB storage.!', 'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_A',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 32,  'VERSION:0')
SELECT @v_IDF = IDF FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] where VALUE_CODE = 'C_CAT_01_GRP_B'
INSERT INTO [dbo].[REF_NITAAC_DEFINITIONS]([NAME_CODE],[APPLICATION_IDF],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[MASK_VALUE],[VERSION]) VALUES
('Desktop',            @v_APP_IDF, 'C_D1',    NULL,       'D1', 'C_GSS','C_CONFIGURATION','8 GB RAM!500 GB hard drive!4 USB ports!',                                                                                           'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_B',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 64,  'VERSION:0'),
('DesktopUpgrade1',    @v_APP_IDF, 'C_D2',    NULL,       'D2', 'C_GSS','C_CONFIGURATION','16 GB RAM!500 GB hard drive!6 USB ports!',                                                                                          'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_B',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 128, 'VERSION:0'),
('DesktopUpgrade2',    @v_APP_IDF, 'C_D3',    NULL,       'D3', 'C_GSS','C_CONFIGURATION','32 GB RAM!256 GB SSD & 1 TB hard drive!8 USB ports!',                                                                               'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_B',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 256, 'VERSION:0'),
('MacDesktop',         @v_APP_IDF, 'C_D4',    NULL,       'D4', 'C_GSS','C_CONFIGURATION','<a href=/gss/cat2config/Category2_Desktop.pdf%target=%_blank%>Desktop</a>!<a href=/gss/cat2config/Category2_Desktop Upgrade 1.pdf', 'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_B',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 512, 'VERSION:0')
SELECT @v_IDF = IDF FROM  [dbo].[REF_NITAAC_CATEGORY_COMMODITY] where VALUE_CODE = 'C_CAT_01_GRP_D'
INSERT INTO [dbo].[REF_NITAAC_DEFINITIONS]([NAME_CODE],[APPLICATION_IDF],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[MASK_VALUE],[VERSION]) VALUES
('RuggedizedDevice',   @v_APP_IDF, 'C_R1',    NULL,       'R1', 'C_GSS','C_CONFIGURATION','All proposed solutions for ruggedized devices must meet MIL STD 801G.!', 'Created from email on date:' + cast(@v_SDATE as varchar(24)), 'C_CAT_01_GRP_D',@v_IDF,'',@v_STATUS,@v_SDATE,@v_SDATE,@v_USER, 1024,   'VERSION:0')

--- track errors
select @v_IDF = IDF from CODE_ERRORS WHERE VALUE_CODE = 'C_ERR_DAT_GS'
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT 'BAD GSS DEFINITION','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_DESC','Description should be more clear','REM: Change it properlu',NULL
         ,@v_STATUS,@v_SDATE, 'CMT: Change it to become a standard','C_GSS','REF_NITAAC_DEFINITIONS:'+VALUE_CODE,'REF_NITAAC_DEFINITIONS:'+IDF,@v_SDATE, @v_USER, @v_IDF
FROM dbo.[REF_NITAAC_DEFINITIONS] WHERE VALUE_CODE in ('C_L4','C_D4')

---- Countries, States and Holiday
INSERT INTO [dbo].[REF_STATE_COUNTRIES]([IDF],[NAME_CODE],[ACRONYM_NAME],[VALUE_CODE],[TYPE_CODE], [DESCRIPTION],[CATEGORY_CODE],[REFERENCE_ID],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[TIME_ZONE],[EFFECTIVE_START_DATE],[VERSION],[POSITION_ORDER]) VALUES
(dbo.fn_NewIDF('AFG',default),'Afghanistan',    'AFG', 'C_AF_AFG', 'C_COUNTRY', 'Afghanistan',               'C_MIDDLE_ASIA',   @v_STATUS, @v_SDATE, '', '93', '647,500',  @v_SDATE, @v_User,'MIDDLE ASIA',  @v_SDATE,'VERSION:0', 5),
(dbo.fn_NewIDF('CAN',default),'Canada',         'CAN', 'C_CA_CAN', 'C_COUNTRY', 'Canada',                    'C_NORTH_AMERICA', @v_STATUS, @v_SDATE, '', '1', '9,984,670', @v_SDATE, @v_User,'NORTH AMERICA',@v_SDATE,'VERSION:0', 2),
(dbo.fn_NewIDF('CHN',default),'China',          'CHN', 'C_CN_CHN', 'C_COUNTRY', 'Peoples Republic Of China', 'C_EAST_ASIA',     @v_STATUS, @v_SDATE, '', '86', '9,596,960',@v_SDATE, @v_User,'EAST ASIA',    @v_SDATE,'VERSION:0', 3),
(dbo.fn_NewIDF('COI',default),'Costa Rica',     'COI', 'C_CR_CRI', 'C_COUNTRY', 'Peoples Republic Of China', 'C_NORTH_AMERICA', @v_STATUS, @v_SDATE, '', '506', '51,100',  @v_SDATE, @v_User,'NORTH AMERICA',@v_SDATE,'VERSION:0', 4),
(dbo.fn_NewIDF('USA',default),'United States',  'USA', 'C_US_USA', 'C_COUNTRY', 'United States of America',  'C_NORTH_AMERICA', @v_STATUS, @v_SDATE, '', '1', '9,629,091', @v_SDATE, @v_User,'NORTH AMERICA',@v_SDATE,'VERSION:0', 1)
SELECT @v_IDF = IDF FROM [dbo].[REF_STATE_COUNTRIES] WHERE VALUE_CODE = 'C_US_USA'
INSERT INTO [dbo].[REF_STATE_COUNTRIES]([IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[REFERENCE_CODE] ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE)
SELECT dbo.fn_NEWIDF([ID],[CREATED_WHEN]),[NAME],'C_'+ID, ID, 'C_USA','C_STATE',[CREATED_WHEN], @v_STATUS, @v_SDATE,case when isNull([CONUS],0)>0 THEN 'C_CONUS' ELSE 'C_OTHER' END,'Migreated From APX_US_STATE On Date: '+ cast(@v_SDATE as varchar(24)), 'APX_US_STATE:'+ID,'APX_US_STATE', [CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],[VERSION],'VERSION:'+CAST([VERSION] as varchar(12)), ROW_NUMBER() over (Order by NAME), @v_IDF,'C_COUNTRY'
FROM CIOCSBK.[dbo].[APX_US_STATE]

insert into [dbo].[CODE_HOLIDAYS]([NAME_CODE],[ACRONYM_NAME],[VALUE_CODE],[OFFSET_DAY],[FIXED_IDR],[TYPE_CODE],[DESCRIPTION],[CATEGORY_CODE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[COUNTRY_IDF],[VERSION],[STATE_PROVINCE_IDF],[POSITION_ORDER]) VALUES
('New Years Day',          'NYD', 'C_NYD',           0, 1, 'C_FEDERAL', 'New Years Day, US',                    'C_US_USA', 'ACTIVE',  @v_SDATE, '1/1',                        'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,1 ),
('Martin Luther King Day', 'MLK', 'C_MLK',           2, 0, 'C_FEDERAL', 'Martin Luther King Day, US',           'C_US_USA', 'ACTIVE',  @v_SDATE, '3rd Monday in Jan.  01/2',   'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,2 ),
('President Day',          'PSD', 'C_PSD',           2, 0, 'C_FEDERAL', 'President Day, US',                    'C_US_USA', 'ACTIVE',  @v_SDATE, '3rd Monday in Feb. 02/2',    'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,3 ),
('Memorial Day',           'MMD', 'C_MMD',           2, 0, 'C_FEDERAL', 'Memorial Day, US',                     'C_US_USA', 'ACTIVE',  @v_SDATE, 'Last Monday in May. 05/3',   'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,4 ),
('Indenpence Day',         'IND', 'C_IND',           0, 1, 'C_FEDERAL', 'Indenpence Day, US',                   'C_US_USA', 'ACTIVE',  @v_SDATE, '7/4',                        'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,5 ),
('Labor Day',              'LBD', 'C_LBD',           2, 0, 'C_FEDERAL', 'Labor Day, US',                        'C_US_USA', 'ACTIVE',  @v_SDATE, 'First Monday In Sept. 09/0', 'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,6 ),
('Columbus Day',           'LMD', 'C_LMD',           2, 0, 'C_FEDERAL', 'Columbus Day, US',                     'C_US_USA', 'ACTIVE',  @v_SDATE, '2nd Monday in Oct. 10/1',    'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,7 ),
('Veterans Day',           'VTD', 'C_VTD',           0, 1, 'C_FEDERAL', 'Veterans Day, US',                     'C_US_USA', 'ACTIVE',  @v_SDATE, '11/11',                      'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,8 ),
('Thanksgiving Day',       'TGD', 'C_TGD',           5, 0, 'C_FEDERAL', 'Thanksgiving Day, US',                 'C_US_USA', 'ACTIVE',  @v_SDATE, '4th Thursday in Nov. 11/3',  'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,9 ),
('Christmas Day',          'CSD', 'C_CSD',           0, 1, 'C_FEDERAL', 'Christmas Day, US',                    'C_US_USA', 'ACTIVE',  @v_SDATE, '12/25',                      'C_US_USA', 'United States', @v_SDATE, @v_User,  @v_IDF, 'VERSION:0',@v_IDF,10)

/* Install holidays */
exec sp_Holiday @DateCode = '2015'
exec sp_Holiday @DateCode = '2016'
exec sp_Holiday @DateCode = '2017'
exec sp_Holiday @DateCode = '2018'
exec sp_Holiday @DateCode = '2019'


--- Labor Categories/rates
INSERT INTO [dbo].[REF_NITAAC_LABOR_CATEGORIES] ([IDF],[NAME_CODE] ,[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('LABCT',CREATED_WHEN, cast(ID as varchar(16))), LABOR_CATEGORY, 'C_REFERENCE',case when charIndex(' - Level',LABOR_CATEGORY) > 0 THEN 'C_'+replace(SUBSTRING(LABOR_CATEGORY,charIndex(' - Level',LABOR_CATEGORY), 16),' - Level ','LEVEL_') ELSE 'C_OTHER' END, LABOR_CATEGORY,
CREATED_WHEN, NULL, @v_STATUS, CREATED_WHEN,'Migrated From LABOR_CATEGORIES On Date: ' + cast(@v_SDATE as varchar(24)),'', 'LABOR_CATEGORIES:'+cast(ID as varchar(16)),'LABOR_CATEGORIES', 1, 1, CREATED_WHEN, CREATED_BY, MODIFIED_WHEN, MODIFIED_BY, [Version], ID, 744, 'VERSION:' + cast(Version as varchar(8))
FROM CIOCSBK.[dbo].[LABOR_CATEGORIES]

INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_RATES]([IDF],[LABOR_CATEGORY_IDF],[CONTRACT_IDF],[GOV_YR_1],[GOV_YR_2],[GOV_YR_3],[GOV_YR_4],[GOV_YR_5],[GOV_YR_6],[GOV_YR_7],[GOV_YR_8],[GOV_YR_9],[GOV_YR_10],[CON_YR_1],[CON_YR_2],[CON_YR_3],[CON_YR_4],[CON_YR_5],[CON_YR_6],[CON_YR_7],[CON_YR_8],[CON_YR_9],[CON_YR_10]
      ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[RATE_UOM],MIN_RATE, MAX_RATE, AVERAGE_RATE)
SELECT dbo.fn_NewIDFExt('LABRT',r.Created_When, cast(r.ID as varchar(16))),l.IDF, c.IDF,r.[GOV_YR_1],r.[GOV_YR_2],r.[GOV_YR_3],r.[GOV_YR_4],r.[GOV_YR_5],r.[GOV_YR_6],r.[GOV_YR_7],r.[GOV_YR_8],r.[GOV_YR_9],r.[GOV_YR_10],r.[CON_YR_1],r.[CON_YR_2],r.[CON_YR_3],r.[CON_YR_4],r.[CON_YR_5],r.[CON_YR_6],r.[CON_YR_7],r.[CON_YR_8],r.[CON_YR_9],r.[CON_YR_10]
      ,l.NAME_CODE,'C_REFERENCE',l.TYPE_CODE,c.NAME_CODE +' Contract No: '+c.CONTRACT_NO,r.CREATED_WHEN, NULL,@v_STATUS, @v_SDATE,'Migrated From LABOR_RATES On Date: '+cast(@v_SDATE as varchar(24)),'LABOR_RATES:'+cast(r.ID as varchar(16)),'LABOR_RATES',1,r.CREATED_WHEN, r.CREATED_BY, r.MODIFIED_WHEN, r.MODIFIED_BY, r.VERSION, 744, 'VERSION:'+cast(r.VERSION as varchar(16)), 'C_USD', r.[GOV_YR_1], r.[GOV_YR_10],
      (r.[GOV_YR_1]+r.[GOV_YR_2]+r.[GOV_YR_3]+r.[GOV_YR_4]+r.[GOV_YR_5]+r.[GOV_YR_6]+r.[GOV_YR_7]+r.[GOV_YR_8]+r.[GOV_YR_9]+r.[GOV_YR_10])/10.0
FROM [dbo].[REF_NITAAC_LABOR_CATEGORIES] l INNER JOIN CIOCSBK.[dbo].[LABOR_RATES] r on l.REFERENCE_ID = 'LABOR_CATEGORIES:'+cast(r.LABOR_CATEGORY as varchar(16)) INNER JOIN CONTRACTS c on c.REFERENCE_ID = 'SYM_CONTRACT:'+cast(r.Contract_ID as varchar(16))

set @v_RV = 2014
WHILE @v_RV < 2026
BEGIN
    INSERT INTO [dbo].[REF_NITAAC_LABOR_RATES]([IDF],[FISCAL_YEAR],[LABOR_CATEGORY_IDF],[CONTRACT_YEAR_NO]
      ,[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[RATE_UOM],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
      ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, [ACCESS_LEVEL],[VERSION])
    SELECT dbo.fn_NewIDFExt('',default,cast(@v_RV as varchar(16))), @v_RV, IDF, @v_RV, NAME_CODE, 'C_'+cast(@v_RV as varchar(16)),'','C_NITAAC', TYPE_CODE, 'C_USD_PER_HOUR', DESCRIPTION, CREATED_DATE, DATEADD(Y, 12, CREATED_DATE), @v_STATUS, @v_SDATE,1,CREATED_DATE, CREATED_BY, UPDATED_DATE, UPDATED_BY, UPDATED_COUNT, 744,'VERSION:0'
    FROM [dbo].[REF_NITAAC_LABOR_CATEGORIES]
    set @v_RV += 1
END
--UPDATE n SET MIN_RATE = MIN(), MAX_RATE = MAX()
--FROM [dbo].[REF_NITAAC_LABOR_RATES] n INNER JOIN [dbo].[REF_NITAAC_LABOR_CATEGORIES] lc on lc.IDF = n.LABOR_CATEGORY_IDF INNER JOIN  [dbo].[REF_NITAAC_CONTRACTOR_RATES] c on c.LABOR_CATEGORY_IDF

Print '------------- Data Migration  [dbo].[sc_reference]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Notificaiton_Message]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Notificaiton_Message]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT', @v_APP_IDF as varchar(64)

IF OBJECT_ID('[CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT]') is NULL
BEGIN
        select * into [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] from [CIOCSBK].[dbo].[SYM_NOTIFICATION]
        alter table  [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] add VALUE_CODE varchar(32) NULL
        UPDATE [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] SET VALUE_CODE = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(code,'_NEEDS',''),'AWARD','AWRD'),'_CS',''),'RE_REV','REV'),'ORDER','ORD'),'ORD_AWRD','AWRD'),'RELEASE','RLS'),'USER','USR'),'INVOICE','INVCE'),'REVIEW','RVW'),'PASSWORD','PWD'),'REPORT','RPT'),'RESPONSE','RESP'),'REQUEST','REQ'),'TRP_CLIN','TRP'),'DELETE','DEL'),'STRATEGIC_SOURCE','STRA_SRC'),'CUSTOMER','FC'),'APPROVED','APPD'),'_CUST','_FC'),'SUBCONTRACTOR','CH'),'SHIPPING_DETAIL_SUBMITTED','SHIP_DTL_SUB'),'QUARTERLY','QTR'),'CLIN_NEED_','CLIN_'),'APPROVAL','APPL'),'WAITING','WAIT'),'FINANCE_RECORD','FIN_REC'),'ORD_MONTHLY','MTH'),'CANCELLED','CNCLD')
        UPDATE  [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] set VALUE_CODE = replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(VALUE_CODE,'PROCESSED','PROCD'),'PARTIAL','PRT'),'PAYMENT','PAY'),'EVALUATION','EVAL'),'REVISION','REVN'),'EXCEEDS_CEILING','ABV_CEIL'),'CONTRACT_PROFILE_CHANGE','CONTRACT_CHG'),'NEW_USR_REG_CONT_PM_M','NEW_REG_CH_PM_M'),'ORD_QTR','_OTR'),'SUBMIT','SUB'),'RVWED','RVW'),'SELECT','SEL'),'EVAL_ORD_ARC_TO_FC','FC_EVAL_ORD_ARC'),'CATALOG_GENERATED','CATALOG_CREATED')
        --- correct user of created_by in order to make it work
        UPDATE  [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] set CREATED_BY = 'pinnojud@nih.gov' WHERE CHARINDEX('@', CREATED_BY) < 1
END
INSERT INTO [dbo].[CODE_NOTIFICATIONS] ([IDF],[ACTION_CODE],[DELIVERY_CODE],[PRIORITY_CODE],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[FROM_STATE],[TO_STATE]
           ,NOTE_TEXT,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME]
           ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF],[APPLICATION_IDF],DOCUMENT_IDR)
SELECT dbo.fn_NewIDFExt('NTMP', n.CREATED_WHEN, cast(n.id as varchar(10))),n.[CODE],'C_EMAIL','C_NORMAL',dbo.fn_Parse(n.[SUBJECT_TEMPLATE],-1, '\','C_RIGHT'), n.CODE, NULL, 'C_TEMPLATE' ,'C_'+n.[NOTIFICATION_TYPE],dbo.fn_GetMapSetCode(n.[FROM_STATUS],'C_ORDER_STATUS'), dbo.fn_GetMapSetCode(n.[TO_STATUS],'C_ORDER_STATUS')
        ,n.[TEXT_TEMPLATE],n.[FROM_ADDRESS],@v_STATUS, @v_SDATE, 'Migrated from SYM_NOTIFICATION on Date:', n.VALUE_CODE, 'SYM_NOTIFICATION:'+cast(n.id as varchar(12)),'SYM_NOTIFICATION'
    ,n.[CREATED_WHEN],n.[CREATED_BY],n.[MODIFIED_WHEN],n.[MODIFIED_BY],n.[VERSION],ROW_NUMBER() OVER(PARTITION BY n.[NOTIFICATION_TYPE] ORDER BY n.id),744, 'VERSION:'+cast(n.VERSION as varchar(8)), NULL, NULL, a.IDF, CASE WHEN  n.SUBJECT_TEMPLATE is not null THEN 1 ELSE 0 END
FROM [CIOCSBK].[dbo].[SYM_NOTIFICATION_EXT] n, CODE_APPLICATIONS a
WHERE a.REFERENCE_ID = 'SYM_GWAC:'+CAST(n.GWAC as varchar(8))

INSERT INTO DOCUMENTS(IDF, APPLICATION_IDF, SUBMITTER_IDF, SUBMITTER_TYPE_CODE, SUBMITTED_DATE, SUBMITTED_BY, PRIMARY_IDR
,NAME_CODE, [DESCRIPTION], CATEGORY_CODE, TYPE_CODE, OWNER_IDF, OWNER_CODE, NOTE_TEXT, COMMENTS, STATUS_CODE, STATUS_DATE, REFERENCE_ID, REFERENCE_NAME, [CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION])
SELECT 'NTEMP' + Right(n.IDF,59), n.APPLICATION_IDF, u.IDF, u.TYPE_CODE, n.CREATED_DATE, n.CREATED_BY, 1
,n.NAME_CODE, s.[TEXT_TEMPLATE],'C_NOTIFICATION', n.TYPE_CODE, n.IDF, 'C_NOTIFICATION', dbo.fn_Parse(s.[SUBJECT_TEMPLATE], -1, '\','C_FIRST'), n.COMMENTS, n.STATUS_CODE, n.STATUS_DATE, n.REFERENCE_ID, n.REFERENCE_NAME, n.[CREATED_DATE],n.[CREATED_BY],n.[UPDATED_DATE],n.[UPDATED_BY],n.[UPDATED_COUNT],n.[POSITION_ORDER],n.[ACCESS_LEVEL],n.[VERSION]
FROM CODE_NOTIFICATIONS n INNER JOIN [CIOCSBK].[dbo].[SYM_NOTIFICATION] s on n.REFERENCE_ID = 'SYM_NOTIFICATION:'+ cast(s.id as varchar(12))
INNER JOIN USERS u on u.UserName = s.CREATED_BY
WHERE DOCUMENT_IDR > 0
UPDATE  n SET DOCUMENT_IDF = 'NTEMP'+right(d.IDF,59)
FROM CODE_NOTIFICATIONS n INNER JOIN DOCUMENTS d on d.OWNER_IDF = n.IDF
where n.DOCUMENT_IDR > 0

/*
INSERT INTO GROUP_ROLES (ROLE_IDF, GROUP_IDF, NAME_CODE, [DESCRIPTION], CATEGORY_CODE, TYPE_CODE, REFERENCE_CODE
,COMMENTS, STATUS_CODE, STATUS_DATE, REFERENCE_ID, REFERENCE_NAME, [CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION])
SELECT r.IDF, g.IDF, cn.NAME_CODE, 'Notification Receiver Role: '+ r.NAME_CODE, 'C_NOTN_TEMPL','C_RECEIVER',replace(r.VALUE_CODE,'C_','')
,'Migrated From SYM_NOTIFICATION_GROUP on Dates:', g.STATUS_CODE, g.STATUS_DATE, cn.IDF, cn.NAME_CODE + ' IDF: '+cn.IDF, cn.[CREATED_DATE],cn.[CREATED_BY],cn.[UPDATED_DATE],cn.[UPDATED_BY],cn.[UPDATED_COUNT],cn.[POSITION_ORDER],g.[ACCESS_LEVEL],cn.VERSION
FROM [CIOCSBK].[dbo].[SYM_NOTIFICATION_GROUP] ng INNER JOIN CODE_NOTIFICATIONS cn on cn.REFERENCE_ID = 'SYM_NOTIFICATION:'+Cast(ng.Notification_ID as varchar(12))
INNER JOIN CODE_ROLES r on r.REFERENCE_ID = 'APX_GROUP:'+cast(ng.Group_ID as varchar(10)), CODE_GROUPS g
WHERE g.VALUE_CODE = 'C_GRP_NOTN'
*/

Select @v_IDF = IDF From [dbo].[CODE_GROUPS] WHERE VALUE_CODE = 'C_GRP_NOTN'
INSERT INTO [dbo].[CODE_GROUPS](IDF, [APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[VERIFICATION_IDR],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], PARENT_IDF, PARENT_CODE)
SELECT 'GNTPM'+RIGHT(IDF,59),[APPLICATION_IDF],'Group for ' + [NAME_CODE],[REFERENCE_CODE],[ACRONYM_NAME],'C_NOTIFICATION',[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],'C_GRP_NOTN', [REFERENCE_ID] ,[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],1,[ACCESS_LEVEL],[VERSION],[POSITION_ORDER], @v_IDF, PARENT_CODE
FROM CODE_NOTIFICATIONS



------------------

select @v_APP_IDF = IDF From CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS'
INSERT INTO [dbo].[CODE_NOTIFICATIONS]([IDF],[ACTION_CODE],[DELIVERY_CODE]  ,[PRIORITY_CODE] ,[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF]) VALUES
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Expiration Notification',       'C_NTN_EXPIRE',    'EXP', 'C_EXPIRATION', 'C_USERS',       'Various Expiration related notification to all users from system',                        @v_STATUS,@v_SDATE,'Created as a root for all expiration notification',      'C_EXPIRATION',  @v_SDATE,@v_USER,1100,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Reminder Notification',         'C_NTN_REMIND',    'RMD', 'C_REMINDER',   'C_USERS',       'Various reminding related notification to all users from system',                         @v_STATUS,@v_SDATE,'Created as a root for all reminding notification',       'C_REMINDER',    @v_SDATE,@v_USER,1200,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order (TO) Notification',  'C_NTN_ORDER',     'TO',  'C_TASK_ORDER', 'C_CONTRACTOR',  'Various Task Order related notification to all contractors from cusomters',               @v_STATUS,@v_SDATE,'Created as a root for all task order notification',      'C_TASKORDER',   @v_SDATE,@v_USER,1300,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Proposal Notification',         'C_NTN_PROPOSAL',  'POP', 'C_PROPOSAL',   'C_CUSTOMER',    'Various TO proposal related notification to all customers from contractors',              @v_STATUS,@v_SDATE,'Created as a root for all proposal notification',        'C_PROPOSAL',    @v_SDATE,@v_USER,1400,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Award Notification',            'C_NTN_AWARD',     'AWD', 'C_REMINDER',   'C_CONTRACTOR',  'Various TO award related notification to all contractors from cusotmers',                 @v_STATUS,@v_SDATE,'Created as a root for all award notification',           'C_AWARD',       @v_SDATE,@v_USER,1500,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Acknowledgment Notification',   'C_NTN_ACKNOWLEDG','ACK', 'C_ACKNOWLEDGE','C_USERS',       'Various Acknowledgement related notification to all users from users',                    @v_STATUS,@v_SDATE,'Created as a root for all acknoledgement notification',  'C_ACKNOWLEDGE', @v_SDATE,@v_USER,1600,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Finance Notification',          'C_NTN_FINANCE',   'FIN', 'C_FINANCE',    'C_USERS',       'Various finance related notification to all contractors/NITAAC from NITAAC/Contractors',  @v_STATUS,@v_SDATE,'Created as a root for all finance notification',         'C_FINANCE',     @v_SDATE,@v_USER,1700,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Account Notification',          'C_NTN_ACCOUNT',   'ACNT','C_ACCOUNT',    'C_USERS',       'Various Account related notification to all users from users',                            @v_STATUS,@v_SDATE,'Created as a root for all account notification',         'C_ACCOUNT',     @v_SDATE,@v_USER,1800,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Shopping Cart Notification',    'C_NTN_CART',      'CART','C_SHOPCART',   'C_CUSTOMER',    'Various Shopping cart related notification to all customer users from system/cutsomers',  @v_STATUS,@v_SDATE,'Created as a root for all shopping cart notification',   'C_SHOPCART',    @v_SDATE,@v_USER,1900,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Document Notification',         'C_NTN_DOCUMENT',  'DOC', 'C_DOCUMENT',   'C_USERS',       'Various Document reated notification to all users from system',                           @v_STATUS,@v_SDATE,'Created as a root for all document notification',        'C_SYSTEM',      @v_SDATE,@v_USER,2000,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','System Notification',           'C_NTN_SYSTEM',    'SYS', 'C_SYSTEM',     'C_USERS',       'Various System generated notification to all users from system',                          @v_STATUS,@v_SDATE,'Created as a root for all system notification',          'C_DOCUMENT',    @v_SDATE,@v_USER,2100,744,'VERSION:0', @v_APP_IDF),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Other Notification',            'C_NTN_DEFAULT',   'DEF', 'C_DEFAULT',    'C_USERS',       'Various other notification to all users from various sources',                            @v_STATUS,@v_SDATE,'Created as a root for all other notification',           'C_OTHER',       @v_SDATE,@v_USER,2900,744,'VERSION:0', @v_APP_IDF)

select @v_IDF = IDF From [dbo].[CODE_NOTIFICATIONS] WHERE VALUE_CODE = 'C_NTN_EXPIRE'
INSERT INTO [dbo].[CODE_NOTIFICATIONS]([IDF],[ACTION_CODE],[DELIVERY_CODE]  ,[PRIORITY_CODE] ,[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF], [PARENT_IDF], [PARENT_CODE]) VALUES
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Password Expired Notification',       'C_EXP_PASSWORD',    'PWD', 'C_EXPIRATION', 'C_PASSWORD',      'Account pwasword expired notification to account holder from system',                   @v_STATUS,@v_SDATE,'Created as a password expiration notification',         'C_SYSTEM',   @v_SDATE,@v_USER,1101,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Reminder Expired Notification',       'C_EXP_ROB',         'ROB', 'C_EXPIRATION', 'C_ROB',           'Annual ROB expired notification to account holder from system',                         @v_STATUS,@v_SDATE,'Created as a rob statement expiration notification',    'C_SYSTEM',   @v_SDATE,@v_USER,1102,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','E-Sign Expired Notification',         'C_EXP_ESIGN',       'ESGN','C_EXPIRATION', 'C_ESIGN',         'Annual E-Sign expired notification to all contractors from cusomters',                  @v_STATUS,@v_SDATE,'Created as a e-sign expiration notification',           'C_SYSTEM',   @v_SDATE,@v_USER,1103,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER')

select @v_IDF = IDF From [dbo].[CODE_NOTIFICATIONS] WHERE VALUE_CODE = 'C_NTN_ORDER'
INSERT INTO [dbo].[CODE_NOTIFICATIONS]([IDF],[ACTION_CODE],[DELIVERY_CODE]  ,[PRIORITY_CODE] ,[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF], [PARENT_IDF], [PARENT_CODE]) VALUES
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order generated notification',           'C_TO_CREATE',   'TOADD',  'C_ORDER', 'C_CREATED',        'Task Order (TO) generated/defined notification to NITAAC users from customer',                              @v_STATUS,@v_SDATE,'Created as a TO order defined notification',              'C_SYSTEM',   @v_SDATE,@v_USER,1301,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order review notification',              'C_TO_REVIEW',   'TORVW',  'C_ORDER', 'C_REVIEW',         'Task Order (TO) review notification to NITAAC users from customer',                              @v_STATUS,@v_SDATE,'Created as a TO order defined notification',              'C_SYSTEM',   @v_SDATE,@v_USER,1301,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),

   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order released notification',            'C_TO_POST',     'TOPST',  'C_ORDER', 'C_POSTED',         'Task Order (TO) released/posted notification to contractor users from customer',                             @v_STATUS,@v_SDATE,'Created as a TO order release notification',             'C_SYSTEM',   @v_SDATE,@v_USER,1301,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order question notification',            'C_TO_QUESTION', 'TOQST',  'C_ORDER', 'C_QUESTION',       'Task Order (TO) question received notification to customer users from contractor',                           @v_STATUS,@v_SDATE,'Created as a TO order question notification',            'C_SYSTEM',   @v_SDATE,@v_USER,1302,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order answer notification',              'C_TO_ANSWER',   'TOANW',  'C_ORDER', 'C_ANSWER',         'Task Order (TO) anwser released/posted notification to Contractor users from customer',                      @v_STATUS,@v_SDATE,'Created as a TO order answer notification',              'C_SYSTEM',   @v_SDATE,@v_USER,1303,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order response notification',            'C_TO_RESPONSE', 'TORSP',  'C_ORDER', 'C_RESPONSE',       'Task Order (TO) no/bid response received notification to customer users from contractor',                    @v_STATUS,@v_SDATE,'Created as a TO order response notification',            'C_SYSTEM',   @v_SDATE,@v_USER,1304,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order amendment notification',           'C_TO_AMEND',    'TOAMD',  'C_ORDER', 'C_AMENDMENT',      'Task Order (TO) Amendment notification (post to posted order) to contractor users from customer',            @v_STATUS,@v_SDATE,'Created as a TO order release notification',             'C_SYSTEM',   @v_SDATE,@v_USER,1305,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order open period closed notification',  'C_TO_CLOSE',    'TOCLS',  'C_ORDER', 'C_CLOSED',         'Task Order (TO) Open Period Closed notification to Contractor users from system',                            @v_STATUS,@v_SDATE,'Created as a TO order close notification',               'C_SYSTEM',   @v_SDATE,@v_USER,1306,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order cancellation notification',        'C_TO_CANCEL',   'TOAMD',  'C_ORDER', 'C_CANCELLATION',   'Task Order (TO) cancellation notification (post to posted order) to contractor users from customer',         @v_STATUS,@v_SDATE,'Created as a TO order release notification',             'C_SYSTEM',   @v_SDATE,@v_USER,1307,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order on-hold notification',             'C_TO_ONHOLD',   'TOPND',  'C_ORDER', 'C_PENDING',        'Task Order (TO) onhold/pending notification (post to posted order) to contractor users from customer',       @v_STATUS,@v_SDATE,'Created as a TO order release notification',             'C_SYSTEM',   @v_SDATE,@v_USER,1308,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order activiation notification',         'C_TO_ACTIVE',   'TOACT',  'C_ORDER', 'C_ACTIVATE',       'Task Order (TO) reactivated notification (post to posted order) to contractor users from customer',          @v_STATUS,@v_SDATE,'Created as a TO order release notification',             'C_SYSTEM',   @v_SDATE,@v_USER,1309,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER'),
   (dbo.fn_NewIDF('CNTN',default), 'C_OUTGOING','C_EMAIL','C_NORMAL','Task Order other notification',               'C_TO_OTHER',    'TOOTH',  'C_ORDER', 'C_OTHER',          'Other Task Order (TO) notification to account holder from system',                                           @v_STATUS,@v_SDATE,'Created as a TO other notification',                     'C_SYSTEM',   @v_SDATE,@v_USER,1399,744,'VERSION:0', @v_APP_IDF, @v_IDF,'C_MEMBER')

INSERT INTO [dbo].[OWN_NOTIFICATIONS]([IDF],[BASE_IDF],[APPLICATION_IDF],[SUBJECT],[NOTE_TEXT],[FROM_ADDRESS],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
           ,[DOCUMENT_IDR],[ONLY_PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL] ,[VERSION],[CONTACT_IDF],[DOCUMENT_IDF])
SELECT dbo.fn_NewIDF('ONTN',default), IDF, APPLICATION_IDF,'Default Subject','Default Note Text',@v_User,'An Default Instance Notification',[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],'An Default Instance Notification created for the purpose of general user',CREATED_DATE,NULL,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
           ,0,0,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL] ,[VERSION],NULL,NULL
FROM CODE_NOTIFICATIONS WHERE VALUE_CODE = 'C_NTN_DEFAULT'

INSERT INTO [dbo].[CODE_MESSAGES]([IDF],[ACTION_CODE],[DELIVERY_CODE],[PRIORITY_CODE],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION] ,[STATUS_CODE],[STATUS_DATE]
           ,[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF],[NOTIFICATION_IDF]) VALUES   -- [PARENT_CODE],[PARENT_IDF],
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A default message template for the general purpose',               'C_MSG_DEFAULT', 'MSG','C_GENERAL',  'C_DEFAULT'  ,'A default message used for general purpose',@v_STATUS,@v_SDATE,'Private comment used for internal use',                                                      'C_DEFAULT'      ,NULL,NULL,@v_SDATE,@v_User,100, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_DEFAULT','C_NOTIFICATION')),
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A Order Message Template for all order related activities',        'C_MSG_ORDER',   'ORD','C_ORDER',    'C_GROUP'    ,'A Order Message Template for all Order related activity messages',@v_STATUS,@v_SDATE,'Private Order/Amendment comment used for internal use',                'C_ORDER'        ,NULL,NULL,@v_SDATE,@v_User,102, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_ORDER','C_NOTIFICATION')),
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A Proposal Message Template for all proposal related activities',  'C_MSG_PROPOSAL','BNP','C_PROPOSAL', 'C_GROUP'    ,'A Proposal Message Template for all proposal related activity messages',@v_STATUS,@v_SDATE,'Private Proposal comment used for internal use',                 'C_PROPOSAL'     ,NULL,NULL,@v_SDATE,@v_User,104, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_PROPOSAL','C_NOTIFICATION')),
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A Award Message Template for all award related activities',        'C_MSG_AWARD',   'AWD','C_AWARD',    'C_GROUP'    ,'A Award Message Template for all Award related activity messages',@v_STATUS,@v_SDATE,'Private Award/Mod comment used for internal use',                      'C_AWARD'        ,NULL,NULL,@v_SDATE,@v_User,106, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_AWARD','C_NOTIFICATION')),
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A Finance Message Template for all finance related activities',    'C_MSG_FINANCE', 'FIN','C_FINANCE',  'C_GROUP'    ,'A Finance Message Template for all finance related activity messages',@v_STATUS,@v_SDATE,'Private Finance comment used for internal use',                    'C_FINANCE'      ,NULL,NULL,@v_SDATE,@v_User,108, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_FINANCE','C_NOTIFICATION')),
     (dbo.fn_NewIDF('CMSG',default), 'C_POPUP', 'C_NOTIFICATIOIN', 'C_NORMAL','A Document Message Template for all document related activities',  'C_MSG_DOCUMENT','DOC','C_DOCUMENT', 'C_GROUP'    ,'A Document Message Template for all finance related activity messages',@v_STATUS,@v_SDATE,'Private Document comment used for internal use',                  'C_DOCUMENT'     ,NULL,NULL,@v_SDATE,@v_User,110, 744,'VERSION:0', @v_APP_IDF, dbo.fn_GetMapIDF('C_NTN_DOCUMENT','C_NOTIFICATION'))

select @v_IDF = IDF From [dbo].[CODE_MESSAGES] WHERE VALUE_CODE = 'C_MSG_DEFAULT'

INSERT INTO [dbo].[OWN_MESSAGES]([IDF],[BASE_IDF],[ACTION_CODE],[DELIVERY_CODE],[PRIORITY_CODE],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME]
           ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LIST],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF],[CONTACT_IDF],[DOCUMENT_IDF])
SELECT dbo.fn_NewIDF('OMSG',default),IDF,[ACTION_CODE],[DELIVERY_CODE],[PRIORITY_CODE]
           ,'An Default Instance Message',[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],'An Default Instance Message created for the purpose of general user',[STATUS_CODE],[STATUS_DATE],'It is a dummy one for the use of Notification Message',[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME]
           ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LIST],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF],NULL,NULL
FROM CODE_MESSAGES WHERE VALUE_CODE = 'C_MSG_DEFAULT'

Print '------------- Data Migration  [dbo].[sc_Notificaiton_Message]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Ref_Fee_Rates]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Ref_Fee_Rates]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT dbo.fn_NewIDF(ACRONYM_NAME, CREATED_DATE), 'FEE for :' + NAME_CODE, Replace(VALUE_CODE,'C_','C_FEE_'), 'C_NCAF','C_RATE',0.001, -0.001, 100000000000000.00, 'C_USD', 'DEFAULT COLLECTION RATE for Application: ' + NAME_CODE,  '', [CREATED_DATE], @v_STATUS, @v_SDATE,'Created As a default rate', 1, [CREATED_DATE],[CREATED_BY],0,[ACCESS_LEVEL] ,[VERSION],[IDF]
FROM CODE_APPLICATIONS
WHERE TYPE_CODE = 'C_WEB'
UPDATE [dbo].[REF_NITAAC_FEE_RATES] set RATE = 0.0065  WHERE VALUE_CODE =  'C_FEE_SP3'
UPDATE [dbo].[REF_NITAAC_FEE_RATES] set RATE = 0.0055  WHERE VALUE_CODE =  'C_FEE_SP3SB'
UPDATE [dbo].[REF_NITAAC_FEE_RATES] set RATE = 0.0035  WHERE VALUE_CODE in ('C_FEE_CS','C_FEE_GSS')
UPDATE [dbo].[REF_NITAAC_FEE_RATES] set RATE = 0.005   WHERE VALUE_CODE in ('C_FEE_ECS3','C_FEE_ETIMS')

INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT dbo.fn_NewIDF(replace(r.VALUE_CODE,'C_FEE_',''), c.CREATED_WHEN), 'MINIMUM FEE for :' + replace(r.VALUE_CODE,'C_FEE_',''), Replace(r.VALUE_CODE,'C_FEE','C_MIN'), 'C_NCAF','C_MINIMUM',c.DVALUE, NULL, NULL, 'C_USD', 'MINIMUM COLLECTION FEE for Application: ' + replace(r.VALUE_CODE,'C_FEE_',''),  '', c.[CREATED_WHEN], @v_STATUS, @v_SDATE,'Migrated From APX_CODEC on Date:'+cast(@v_SDATE as varchar(20)), 'APX_CODEC:'+cast(c.ID as varchar(12)),'APX_CODEC', 1, c.[CREATED_WHEN],c.[CREATED_BY],1,r.[ACCESS_LEVEL] ,r.[VERSION],r.[APPLICATION_IDF]
FROM CIOCSBK.dbo.APX_CODEC c inner join [dbo].[REF_NITAAC_FEE_RATES] r on charindex(replace(r.VALUE_CODE,'C_FEE_',''),c.NAME) > 0
WHERE  c.NAME LIKE 'FEE_MINIMUM_%' and Right(c.NAME,5) <> '_TYPE'

INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT dbo.fn_NewIDF(replace(r.VALUE_CODE,'C_FEE_',''), c.CREATED_WHEN), 'Rate Range FEE for :' + replace(r.VALUE_CODE,'C_RATE_',''), Replace(r.VALUE_CODE,'C_FEE','C_RATE'), 'C_NCAF','C_RATE',0.0, c.DVALUE, NULL, 'C_USD', 'Rate the Range of Amount for Application: ' + replace(r.VALUE_CODE,'C_FEE_',''),  '', c.[CREATED_WHEN], @v_STATUS, @v_SDATE,'Migrated APX_CODEC From on Date:'+cast(@v_SDATE as varchar(20)), 'APX_CODEC:'+cast(c.ID as varchar(12)),'APX_CODEC', 1, c.[CREATED_WHEN],c.[CREATED_BY],1,r.[ACCESS_LEVEL] ,r.[VERSION],r.[APPLICATION_IDF]
FROM CIOCSBK.dbo.APX_CODEC c inner join [dbo].[REF_NITAAC_FEE_RATES] r on charindex(replace(r.VALUE_CODE,'C_FEE_',''),c.NAME) > 0
WHERE  c.NAME LIKE 'FEE_SBA_%_BRACKET_1_MIN_A'


UPDATE r SET TO_AMOUNT = c.DVALUE, REFERENCE_NAME = r.REFERENCE_ID + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_1_MAX_A' AND r.VALUE_CODE like 'C_RATE_%' AND TYPE_CODE = 'C_RATE' AND POSITION_ORDER = 1

UPDATE r SET RATE = c.DVALUE, REFERENCE_NAME = r.REFERENCE_NAME + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_1' AND r.VALUE_CODE like 'C_RATE_%'  AND TYPE_CODE = 'C_RATE' AND POSITION_ORDER = 1

INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT dbo.fn_NewIDF(replace(r.VALUE_CODE,'C_FEE_',''), c.CREATED_WHEN), 'Rate Range FEE for :' + replace(r.VALUE_CODE,'C_RATE_',''), Replace(r.VALUE_CODE,'C_FEE','C_RATE'), 'C_NCAF','C_RATE',0.0, c.DVALUE, NULL, 'C_USD', 'Rate the Range of Amount for Application: ' + replace(r.VALUE_CODE,'C_FEE_',''),  '', c.[CREATED_WHEN], @v_STATUS, @v_SDATE,'Migrated APX_CODEC From on Date:'+cast(@v_SDATE as varchar(20)), 'APX_CODEC:'+cast(c.ID as varchar(12)),'APX_CODEC', 1, c.[CREATED_WHEN],c.[CREATED_BY],2,r.[ACCESS_LEVEL] ,r.[VERSION],r.[APPLICATION_IDF]
FROM CIOCSBK.dbo.APX_CODEC c inner join [dbo].[REF_NITAAC_FEE_RATES] r on charindex(replace(r.VALUE_CODE,'C_FEE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_2_MIN_A'

UPDATE r SET TO_AMOUNT = c.DVALUE, REFERENCE_NAME = r.REFERENCE_ID + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_2_MAX_A' AND r.VALUE_CODE like 'C_RATE_%' AND TYPE_CODE = 'C_RATE'  AND POSITION_ORDER = 2

UPDATE r SET RATE = c.DVALUE, REFERENCE_NAME = r.REFERENCE_NAME + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_2' AND r.VALUE_CODE like 'C_RATE_%'  AND TYPE_CODE = 'C_RATE' AND POSITION_ORDER = 2

INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT dbo.fn_NewIDF(replace(r.VALUE_CODE,'C_FEE_',''), c.CREATED_WHEN), 'Rate Range FEE for :' + replace(r.VALUE_CODE,'C_RATE_',''), Replace(r.VALUE_CODE,'C_FEE','C_RATE'), 'C_NCAF','C_RATE',0.0, c.DVALUE, NULL, 'C_USD', 'Rate the Range of Amount for Application: ' + replace(r.VALUE_CODE,'C_FEE_',''),  '', c.[CREATED_WHEN], @v_STATUS, @v_SDATE,'Migrated APX_CODEC From on Date:'+cast(@v_SDATE as varchar(20)), 'APX_CODEC:'+cast(c.ID as varchar(12)),'APX_CODEC', 1, c.[CREATED_WHEN],c.[CREATED_BY],3,r.[ACCESS_LEVEL] ,r.[VERSION],r.[APPLICATION_IDF]
FROM CIOCSBK.dbo.APX_CODEC c inner join [dbo].[REF_NITAAC_FEE_RATES] r on charindex(replace(r.VALUE_CODE,'C_FEE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_3_MIN_A'

UPDATE r SET TO_AMOUNT = c.DVALUE, REFERENCE_NAME = r.REFERENCE_ID + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_3_MAX_A' AND r.VALUE_CODE like 'C_RATE_%' AND TYPE_CODE = 'C_RATE' AND POSITION_ORDER = 3

UPDATE r SET RATE = c.DVALUE, REFERENCE_NAME = r.REFERENCE_NAME + ':' + cast(c.ID as varchar(10))
FROM [dbo].[REF_NITAAC_FEE_RATES] r INNER JOIN CIOCSBK.dbo.APX_CODEC c on charindex(replace(r.VALUE_CODE,'C_RATE_',''),c.NAME) > 0
WHERE c.NAME LIKE 'FEE_SBA_%_BRACKET_3' AND r.VALUE_CODE like 'C_RATE_%'  AND TYPE_CODE = 'C_RATE' AND POSITION_ORDER = 3
-------- UPDATE THE LATEST HARD CODE RATE
--- TAX Rate
SELECT @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS_APP'
INSERT INTO [dbo].[REF_NITAAC_FEE_RATES]([IDF],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[RATE],[FROM_AMOUNT],[TO_AMOUNT],[AMOUNT_UOM],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF])
SELECT  dbo.fn_NewIDFExt('TAX',default,replace(VALUE_CODE,'C_','STR_')), NAME_CODE + ' STATE SALES TAX', VALUE_CODE + '_TAX', 'C_TAX_RATE', 'C_SALES', 0.0, -0.000001,1000000, 'C_USD', NAME_CODE + ' State Sales Taxes ',NULL, CREATED_DATE, @v_STATUS, @v_SDATE, NULL, NULL, NULL, 0, CREATED_DATE, CREATED_BY, [POSITION_ORDER],744,[VERSION], @v_IDF
from REF_STATE_COUNTRIES WHERE CATEGORY_CODE = 'C_USA' and TYPE_CODE = 'C_STATE'

UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.029   WHERE VALUE_CODE in ('C_CO_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.04    WHERE VALUE_CODE in ('C_GA_TAX','C_HI_TAX', 'C_NY_TAX','C_WY_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.04225 WHERE VALUE_CODE in ('C_MO_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.043   WHERE VALUE_CODE in ('C_VA_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.045   WHERE VALUE_CODE in ('C_SD_TAX','C_OK_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.046   WHERE VALUE_CODE in ('C_NV_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.047   WHERE VALUE_CODE in ('C_UT_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.0475  WHERE VALUE_CODE in ('C_NC_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.05    WHERE VALUE_CODE in ('C_LA_TAX','C_ND_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.05125 WHERE VALUE_CODE in ('C_NM_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.0525  WHERE VALUE_CODE in ('C_LA_TAX','C_ND_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.055   WHERE VALUE_CODE in ('C_ME_TAX','C_NE_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.056   WHERE VALUE_CODE in ('C_AZ_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.0575  WHERE VALUE_CODE in ('C_DC_TAX','C_ND_TAX','C_OH_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.06    WHERE VALUE_CODE in ('C_MD_TAX','C_KY_TAX', 'C_MI_TAX','C_ID_TAX','C_VT_TAX', 'C_CA_TAX','C_PA_TAX','C_SC_TAX','C_IA_TAX', 'C_FL_TAX','C_PA_TAX','C_WV_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.0625  WHERE VALUE_CODE in ('C_TX_TAX','C_IL_TAX', 'C_MA_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.0635  WHERE VALUE_CODE in ('C_CT_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.065   WHERE VALUE_CODE in ('C_AK_TAX','C_KS_TAX', 'C_WA_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.06875 WHERE VALUE_CODE in ('C_MN_TAX','C_NJ_TAX')
UPDATE REF_NITAAC_FEE_RATES SET RATE = 0.07    WHERE VALUE_CODE in ('C_RI_TAX','C_MS_TAX', 'C_TN_TAX','C_IN_TAX')
Print '------------- Data Migration  [dbo].[sc_Ref_Fee_Rates]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_ADDRESSES]
----
-------------
Print '------------- Data Migration  [dbo].[sc_ADDRESSES]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

INSERT INTO [dbo].[ADDRESSES]([NAME_CODE],[DIRECTION],[STREET_ONE],[STREET_TWO],[STREET_THREE],[CITY],[COUNTY],[STATE_CODE],[STATE_PROVINCE],[COUNTRY],[ZIP_POSTAL_CODE],[ZIP_EXTENSION_CODE],[INTERNATIONAL_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[VERSION])
SELECT [CARE_OF],[CARE_OF] ,[LINE1],[LINE2],[LINE3],[CITY],[COUNTY],[STATE],[INTERNATIONAL_STATE],[COUNTRY],[ZIP5],[ZIP4],[INTL_CODE],'','C_DOMESTIC','C_'+[ADDRESS_TYPE] ,[LINE4]+[LINE5],@v_STATUS,@v_SDATE, 'Migrated From APX_US_ADDRESS On Date: '+ cast(@v_SDATE as varchar(24)), 'APX_US_ADDRESS:' + cast([ID] as varchar(16)),'APX_US_ADDRESS',[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY], [VERSION] ,'VERSION:' + CAST([VERSION] as varchar(10))
FROM  CIOCSBK.[dbo].[APX_US_ADDRESS]
--- CONTACT

Print '------------- Data Migration  [dbo].[sc_ADDRESSES]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Organizations]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Organizations]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_UserID as varchar(128)= sUser_NAME(), @v_RV as int = 2, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
Declare @TempData as TABLE(ID Int NULL, PARENT_ID int Null, NAME_CODE varchar(512) null, IDF varchar(64) Null, CNT INT Null)

INSERT INTO @TempData(ID, NAME_CODE, PARENT_ID, IDF, CNT)
SELECT 1, NOTE_TEXT, 0, dbo.fn_NewIDF('ORGCH',default), Count(*) FROM SYM_ORGANIZATION_EXT
WHERE ORG_TYPE = 'COMMERCIAL'
Group By NOTE_TEXT

INSERT INTO @TempData(ID, NAME_CODE, PARENT_ID, IDF, CNT)
SELECT 2, NOTE_TEXT, 1, dbo.fn_NewIDF('ORGFC',default), Count(*) FROM SYM_ORGANIZATION_EXT
WHERE ORG_TYPE = 'ORGANIZATION'
Group By NOTE_TEXT

INSERT INTO @TempData(ID, NAME_CODE, PARENT_ID, IDF, CNT)
SELECT 3, NOTE_TEXT, 1, dbo.fn_NewIDF('ORGFC',default), Count(*) FROM SYM_ORGANIZATION_EXT
WHERE ORG_TYPE = 'GOV_CUSTOMER'
Group By NOTE_TEXT

Update e set IDF = t.IDF
FROM SYM_ORGANIZATION_EXT e INNER JOIN @TempData t on t.NAME_CODE = e.NOTE_TEXT

UPDATE t set ID= (Select Top 1 ID FROM SYM_ORGANIZATION_EXT  where IDF = t.IDF ORDER BY ID)
FROM SYM_ORGANIZATION_EXT e INNER JOIN @TempData t on t.IDF = e.IDF
UPDATE e set IDX=1 FROM SYM_ORGANIZATION_EXT e INNER JOIN @TempData t on t.ID = e.ID
UPDATE SYM_ORGANIZATION_EXT Set IDX = 2 where IDX is null

DELETE @TempData

GO

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_UserID as varchar(128)= sUser_NAME(), @v_RV as int = 2, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

--- fill in organization
INSERT INTO ORGANIZATIONS([IDF],[CATEGORY_CODE],[TYPE_CODE],[NAME_CODE],[ASSOCIATED_NAME],[ACRONYM_NAME] ,[VALUE_CODE],[INTERNET_DOMAIN],[FEDERAL_IDR],[SBA_MASKED_IDR],[CAGE],[DUNS],[EIN],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE]
      ,[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID] ,[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], NOTE_TEXT)
SELECT o.IDF,CASE WHEN o.ORG_TYPE = 'COMMERCIAL' THEN 'C_CONTRACTOR' ELSE 'C_CUSTOMER' END,o.[ORG_TYPE],o.[LEVEL_I_NAME],o.[NICKNAME],Left(replace(o.[NICKNAME],' ',''),16),'FC_' + CAST(o.ID as varchar(14)),o.[INTERNET_DOMAIN],CASE WHEN ORG_TYPE = 'COMMERCIAL' THEN 0 ELSE 1 END,o.[SBA_DESIGNATION], o.[CAGE],o.[DUNS],[EIN],'2:'+o.LEVEL_II_NAME +'; 3:'+o.LEVEL_III_NAME,o.[CREATED_WHEN], @v_STATUS, @v_SDATE
      ,'Migrated From SYM_ORGANIZATION On Date: '+ cast(@v_SDate as varchar(24)),'', 'SYM_ORGANIZATION:'+cast(ID as varchar(16)),'SYM_ORGANIZATION',1,1,o.[CREATED_WHEN],o.[CREATED_BY],o.[MODIFIED_WHEN],o.[MODIFIED_BY],o.[VERSION],744,''+CAST(o.[VERSION] as varchar(16)), NOTE_TEXT
   FROM [SYM_ORGANIZATION_EXT] o
   WHERE IDX = 1  --AND (o.ORG_TYPE = 'COMMERCIAL' OR o.ORG_TYPE <> 'COMMERCIAL' AND isNull(o.LEVEL_IV_NAME,'') = '')

UPDATE o Set NAME_CODE = e.LEVEL_I_NAME, TYPE_CODE = CASE WHEN Federal_IDR = 1   Then CASE WHEN e.ORG_TYPE = 'ORGANIZATION' THEN 'C_BRANCH'     ELSE 'C_DEPARTMENT' END else 'C_HEADQUATER' END
FROM ORGANIZATIONS o INNER JOIN  SYM_ORGANIZATION_EXT e on e.IDF = o.IDF
WHERE e.IDX = 1 and isNull(Level_II_NAME,'') + ':' + isNull(Level_III_NAME,'') + ':' + isNull(Level_IV_NAME,'') = '::'

UPDATE o Set NAME_CODE = e.LEVEL_II_NAME, TYPE_CODE = CASE WHEN Federal_IDR = 1  Then CASE WHEN e.ORG_TYPE = 'ORGANIZATION' THEN 'C_DEPARTMENT' ELSE 'C_AGENCY'     END  else 'C_COMPANY' END
FROM ORGANIZATIONS o INNER JOIN  SYM_ORGANIZATION_EXT e on e.IDF = o.IDF
WHERE e.IDX = 1 and isNull(Level_II_NAME,'') <> '' AND isNull(Level_III_NAME,'') + ':' + isNull(Level_IV_NAME,'') = ':'

UPDATE o Set NAME_CODE = e.LEVEL_III_NAME, TYPE_CODE = CASE WHEN Federal_IDR = 1 Then CASE WHEN e.ORG_TYPE = 'ORGANIZATION' THEN 'C_AGENCY'    ELSE 'C_OFFICE'      END  else 'C_OFFICE' END
FROM ORGANIZATIONS o INNER JOIN  SYM_ORGANIZATION_EXT e on e.IDF = o.IDF
WHERE e.IDX = 1 and isNull(Level_III_NAME,'') <> '' AND isNull(Level_IV_NAME,'') = ''

UPDATE o Set NAME_CODE = e.LEVEL_IV_NAME, TYPE_CODE = CASE WHEN Federal_IDR = 1  Then CASE WHEN e.ORG_TYPE = 'ORGANIZATION' THEN 'C_OFFICE'    ELSE 'C_DIVISION'    END  else 'C_BRANCH' END
FROM ORGANIZATIONS o INNER JOIN  SYM_ORGANIZATION_EXT e on e.IDF = o.IDF
WHERE e.IDX = 1 and isNull(Level_IV_NAME,'') <> ''

UPDATE U SET PARENT_IDF = p.IDF, PARENT_CODE = @v_Code
FROM ORGANIZATIONS U INNER JOIN [SYM_ORGANIZATION_EXT] o on U.IDF = o.IDF inner join  ORGANIZATIONS p on p.REFERENCE_ID = 'SYM_ORGANIZATION:'+CAST(o.Parent_ID as varchar(12)) AND U.CATEGORY_CODE = p.CATEGORY_CODE AND U.FEDERAL_IDR = p.FEDERAL_IDR
WHERE u.PARENT_IDF is null and o.Parent_ID is not null AND U.CATEGORY_CODE = 'C_COMMERCIAL' and U.FEDERAL_IDR = 0

--- handle Federal Organization
INSERT INTO FEDERAL_ORGANIZATIONS (IDF, NAME_CODE, ASSOCIATED_NAME, ACRONYM_NAME, NOTE_TEXT, REFERENCE_CODE, REFERENCE_NAME, VALUE_CODE, TYPE_CODE, [DESCRIPTION], COMMENTS, VERIFICATION_IDR, LEVEL_I_NAME, LEVEL_II_NAME, LEVEL_III_NAME, LEVEL_IV_NAME, LEVEL_I_IDF, LEVEL_II_IDF, LEVEL_III_IDF, LEVEL_IV_IDF, PARENT_IDF)
SELECT o.IDF, o.NAME_CODE, o.ASSOCIATED_NAME, o.ACRONYM_NAME, e.NOTE_TEXT, o.REFERENCE_CODE, o.REFERENCE_NAME, o.VALUE_CODE, o.TYPE_CODE, o.[DESCRIPTION], o.[COMMENTS], o.VERIFICATION_IDR, e.LEVEL_I_NAME, e.LEVEL_II_NAME, e.LEVEL_III_NAME, e.LEVEL_IV_NAME, e.LEVEL_I_IDF, e.LEVEL_II_IDF, e.LEVEL_III_IDF, e.LEVEL_IV_IDF, e.PARENT_IDF
FROM ORGANIZATIONS o  INNER JOIN SYM_ORGANIZATION_EXT e on o.IDF = e.IDF
WHERE o.FEDERAL_IDR = 1 and e.IDX = 1

UPDATE F SET LEVEL_I_IDF = o.IDF
FROM FEDERAL_ORGANIZATIONS F INNER JOIN ORGANIZATIONS o on o.NAME_CODE = F.LEVEL_I_NAME
WHERE o.FEDERAL_IDR = 1 and isNull(f.LEVEL_I_IDF,'') = ''

UPDATE F SET LEVEL_II_IDF = o.IDF
FROM FEDERAL_ORGANIZATIONS F INNER JOIN ORGANIZATIONS o on o.NAME_CODE = F.LEVEL_II_NAME
WHERE o.FEDERAL_IDR = 1 and isNull(f.LEVEL_II_IDF,'') = ''

UPDATE F SET LEVEL_III_IDF = o.IDF
FROM FEDERAL_ORGANIZATIONS F inner join SYM_ORGANIZATION_EXT o  on F.IDF = o.IDF
WHERE o.IDX = 1 and ORG_TYPE <> 'COMMERCIAL' and isNull(f.LEVEL_III_IDF,'') = ''

UPDATE F SET LEVEL_IV_IDF = o.IDF
FROM FEDERAL_ORGANIZATIONS F inner join SYM_ORGANIZATION_EXT o  on F.IDF = o.IDF
WHERE o.IDX = 1 and ORG_TYPE <> 'COMMERCIAL' and isNull(f.LEVEL_IV_IDF,'') = ''

--- CREATE CONTACTS
INSERT INTO CONTACTS(IDF,NAME_CODE, CATEGORY_CODE,TYPE_CODE,[EFFECTIVE_START_DATE],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[DEFAULT_IDR],[DESCRIPTION], COMMENTS,[STATUS_DATE],[STATUS_CODE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], OWNER_IDF,OWNER_TYPE)
SELECT case when FEDERAL_IDR > 0 THEN 'CTAFO' ELSE 'CTAO_' END+Right(IDF,59), NAME_CODE, 'C_ORANIZATION','C_PRIMARY', EFFECTIVE_START_DATE, 1,1,1,1, '','Created as default contact',[STATUS_DATE],[STATUS_CODE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], IDF, 'C_ORGANIZATION'
FROM ORGANIZATIONS
--- LINK CONTACTS
UPDATE O SET CONTACT_IDF = c.IDF
FROM ORGANIZATIONS O INNER JOIN CONTACTS c on Right(c.IDF,59) = Right(o.IDF,59)
--- CREATE TELECOM_ADDRESS FROM ORG with INTERNET_DOMAIN which will expand into Phone, email and others
INSERT INTO [dbo].[TELECOM_ADDRESSES]([IDF],[NAME_CODE],[URL],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE] ,[UPDATED_BY],[UPDATED_COUNT])
SELECT  'TADR_' + RIGHT(IDF,59),NAME_CODE, [INTERNET_DOMAIN],'C_PUBLIC','C_ORGANIZATION', 'C_BUSINESS','Organization telecom address for '+Name_Code,[STATUS_CODE],[STATUS_DATE],'Created as default Organization Telecom','C_DEFAULT',REFERENCE_ID,REFERENCE_NAME,1,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE] ,[UPDATED_BY],[UPDATED_COUNT]
FROM ORGANIZATIONS
--- LINK TELE_COM TO CONTACTS
INSERT INTO CONTACT_TELECOM_ADDRESSES([CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.NAME_CODE, c.CATEGORY_CODE,c.TYPE_CODE, 'C_BUSINESS', a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.NAME_CODE), c.VERSION
FROM CONTACTS c INNER JOIN ORGANIZATIONS p on c.OWNER_IDF = p.IDF  INNER JOIN TELECOM_ADDRESSES a on Right(p.IDF,59) = Right(a.IDF,59)
--- LINK ADDRESS TO CONTACT at CONTRACT level

Print '------------- Data Migration  [dbo].[sc_Organizations]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_PERSONS]
----
-------------
Print '------------- Data Migration  [dbo].[sc_PERSONS]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
Declare @TempData as TABLE(ID Int NULL, PARENT_ID int Null, NAME_CODE varchar(512) null, IDF varchar(64) Null, CNT INT Null)
---------------------------- Record Errors
select @v_IDF = IDF from CODE_ERRORS WHERE VALUE_CODE = 'C_ERR_NEOS'
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT   'PERSON RECORDS for Person with Bad Email and Phone Records: '+EMAIL,'C_ERR_NEOS','C_NORMAL','C_MIGRATION','C_FIX_EMAIL', 'Not good Email','REM: Need to fix them: ' + Last_Name+', '+First_Name, NULL
         ,@v_STATUS,@v_SDATE, 'CMT: Correct the EMAIL','C_NEOS','SYM_PERSON:' +CAST(ID as varchar(16)),'SYM_PERSON',@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.DBO.SYM_PERSON WHERE CHARINDEX('@', EMAIL) < 1
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT   'PERSON RECORDS for Person with Bad Phone Records: '+EMAIL,          'C_ERR_NEOS','C_NORMAL','C_MIGRATION','C_FIX_PHONE', 'Not good Phone','REM: Need to fix them: ' + Last_Name+', '+First_Name, NULL
         ,@v_STATUS,@v_SDATE, 'CMT: Correct the Phone','C_NEOS','SYM_PERSON:' +CAST(ID as varchar(16)),'SYM_PERSON ',@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.DBO.SYM_PERSON WHERE CHARINDEX('@', PHONE) > 0
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT   'PERSON RECORDS without associated organization:','C_ERR_NEOS','C_FATAL','C_MIGRATION','C_FIX_ORG','All Person Record without Org','REM: Must have an organization to association:', NULL
         ,@v_STATUS,@v_SDATE, 'CMT: Need to add an organization','C_NEOS','SYM_PERSON:'+CAST(ID as varchar(16)),'SYM_PERSON',@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.[dbo].[SYM_PERSON]
WHERE isNull(ORG_ID,0) = 0

UPDATE PERSONS SET PREFERRED_NAME = Last_Name + ', '+ First_Name + LTRIM(' ' + isNull(Middle_name,'')) WHERE Isnull(PREFERRED_NAME,'') = ''
-----------------------------

Update e SET ORGANIZATION_IDF = o.IDF  FROM SYM_PERSON_EXT e inner join SYM_ORGANIZATION_EXT o on o.ID = e.ORG_ID WHERE isNull(ORG_ID,0) <> 0

INSERT INTO [dbo].[PERSONS] ([IDF],[ORGANIZATION_IDF],[PREFIX] ,[TITLE],[FIRST_NAME],[MIDDLE_NAME],[LAST_NAME],[SUFFIX],[ESIGN_ACK],[ESIGN_EXPIRATION],[PHONE],[PHONE_EXTENSION],[EMAIL],[FAX],[PREFERRED_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OVERLAY_SHOW_IDR],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[FEDERAL_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[CONTACT_IDF])
SELECT  [IDF],[ORGANIZATION_IDF],[TITLE],[JOB],[FIRST_NAME],[MIDDLE_NAME],[LAST_NAME],[SUFFIX],[ESIGN_ACK],[ESIGN_EXPIRATION],[PHONE],[PHONE_EXTENSION],[EMAIL],case WHEN Len([Fax]) < 32 THEN [FAX] ELSE '' END ,RTRIM(TITLE+' ')+LAST_NAME +', '+ FIRST_NAME + LTRIM(' '+MIDDLE_NAME)+  LTRIM(' '+SUFFIX) , 'C_PERSON','C_CONTRACTOR','PHN:'+[Phone]+'  FAX:'+[Fax],[OVERLAY_SHOW_FLAG], CASE WHEN isNull(IS_ACTIVE,0) = 0 THEN 'INACTIVE' ELSE @v_STATUS END, @v_SDATE,'Migrated SYM_PERSON From On Date:'+Cast(@v_SDATE as varchar(24)), 'SYM_PERSON:'+cast([ID] as varchar(16)), LAST_NAME +', '+ FIRST_NAME + LTRIM(' '+MIDDLE_NAME) + LTRIM(' '+SUFFIX), 1, NULL,[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],[VERSION],744,'VERSION:' + CAST([VERSION]as varchar(12)),  NULL
FROM [dbo].[SYM_PERSON_EXT] WHERE IDX = 1
UPDATE  [dbo].[PERSONS] SET TYPE_CODE = 'C_CUSTOMER' WHERE dbo.fn_IsValidEmail(EMail,'C_CUSTOMER') > 0

UPDATE p set ORGANIZATION_IDF = (Select Top 1 o.IDF FROM SYM_PERSON_EXT sp INNER JOIN SYM_ORGANIZATION_EXT o on sp.ORG_ID = o.ID where sp.IDF = p.IDF)
FROM PERSONS p INNER JOIN SYM_PERSON_EXT e on p.IDF = e.IDF
WHERE p.ORGANIZATION_IDF Is null

INSERT INTO CONTACTS(IDF,NAME_CODE, REFERENCE_NAME, CATEGORY_CODE,TYPE_CODE,[EFFECTIVE_START_DATE],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[DEFAULT_IDR],[DESCRIPTION], COMMENTS,[STATUS_DATE],[STATUS_CODE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], OWNER_IDF,OWNER_TYPE)
SELECT  'CTAP_'+Right(IDF,59), 'Default Person Contact', REFERENCE_NAME, 'C_PERSON','C_PRIMARY', CREATED_DATE, 1,1,1,1, '','Created as default person contact',[STATUS_DATE],[STATUS_CODE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION], IDF, 'C_PERSON'
FROM PERSONS

UPDATE U SET CONTACT_IDF = c.IDF
FROM PERSONS U INNER JOIN CONTACTS C on Right(U.IDF,59) = Right(c.IDF,59)

INSERT INTO @TempData(NAME_CODE, CNT)
SELECT EMAIL, Count(*) FROM SYM_PERSON_EXT Group By EMAIL
UPDATE  t SET ID = (SELECT TOP 1 ID FROM SYM_PERSON_EXT where t.NAME_CODE = EMAIL)
FROM @TempData t INNER JOIN SYM_PERSON_EXT e on t.NAME_CODE = e.EMAIL

INSERT INTO [dbo].[TELECOM_ADDRESSES]([IDF],[NAME_CODE],[PHONE],[MOBILE],[FAX],[EMAIL],[URL],[INTERNATIONAL_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE] ,[UPDATED_BY],[UPDATED_COUNT])
SELECT  'TADR_'+Right(p.IDF,59), p.REFERENCE_NAME + ' Telecom Address', e.[PHONE],NULL,e.[FAX],e.[EMAIL],'',e.[PHONE_EXTENSION],'C_PUBLIC','C_PERSON','C_BUSINESS','Email Based Telecom address in the migration',p.[STATUS_CODE],p.[STATUS_DATE],'Migrated From SYM_PERSON On Date:'+cast(@v_SDATE as varchar(24)),'C_DEFAULT', e.IDF,'SYM_PERSON IDF in Reference_ID', 1,p.[CREATED_DATE],p.[CREATED_BY],p.[UPDATED_DATE] ,p.[UPDATED_BY],p.[UPDATED_COUNT]
FROM SYM_PERSON_EXT e INNER JOIN PERSONS p on p.IDF = e.IDF INNER JOIN @TempData t on e.EMAIL = t.NAME_CODE and e.ID = t.ID
WHERE e.idx = 1

INSERT INTO [dbo].[TELECOM_ADDRESSES]([IDF],[NAME_CODE],[PHONE],[MOBILE],[FAX],[EMAIL],[URL],[INTERNATIONAL_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE] ,[UPDATED_BY],[UPDATED_COUNT])
SELECT  dbo.fn_NewIDFExt('TADR',default,cast(e.ID as varchar(16))), + p.REFERENCE_NAME + ' Telecom Address', p.[PHONE],NULL,p.[FAX],u.[USERNAME],'None User Name Based Telecom Address',p.[PHONE_EXTENSION],'C_PUBLIC','C_PERSON','C_BUSINESS','Additional Email From User Account',p.[STATUS_CODE],p.[STATUS_DATE],'Migrated From APX_USER on Date:' + Cast(@v_SDATE as varchar(24)),p.REFERENCE_ID, 'C_DEFAULT','APX_USER:' + Cast(u.ID as varchar(16)),1,p.[CREATED_DATE],p.[CREATED_BY],p.[UPDATED_DATE] ,p.[UPDATED_BY],p.[UPDATED_COUNT]
FROM PERSONS p INNER JOIN SYM_PERSON_EXT e on p.IDF = e.IDF INNER JOIN APX_USER_EXT u  on u.ID_EMAIL = e.ID_EMAIL   AND u.IDX = e.IDX
Where  e.idx = 1 AND e.EMAIL <> u.USERNAME

INSERT INTO CONTACT_ADDRESSES([CONTACT_IDF],[ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.REFERENCE_NAME, c.CATEGORY_CODE,c.TYPE_CODE, 'C_BUSINESS', a.DIRECTION, a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN PERSONS p on c.OWNER_IDF = p.IDF INNER JOIN [SYM_PERSON_EXT] e on e.IDF = p.IDF
INNER JOIN ADDRESSES a on 'APX_US_ADDRESS:'+CAST(e.ADDRESS_ID as varchar(16)) = a.REFERENCE_ID
WHERE IsNull(e.ADDRESS_ID,0) > 0 and e.IDX = 1

INSERT INTO CONTACT_ADDRESSES([CONTACT_IDF],[ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.REFERENCE_NAME, c.CATEGORY_CODE,c.TYPE_CODE, 'C_SHIPPING', a.DIRECTION, a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN PERSONS p on c.OWNER_IDF = p.IDF INNER JOIN SYM_PERSON_EXT e on e.IDF = p.IDF
INNER JOIN ADDRESSES a on 'APX_US_ADDRESS:'+CAST(e.SHIPPING_ADDRESS_ID as varchar(16)) = a.REFERENCE_ID
WHERE IsNull(e.SHIPPING_ADDRESS_ID,0) > 0 and e.IDX = 1

INSERT INTO CONTACT_TELECOM_ADDRESSES([CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.REFERENCE_NAME, 'C_PERSON',c.TYPE_CODE, 'C_BUSINESS', a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN PERSONS p on c.OWNER_IDF = p.IDF INNER JOIN TELECOM_ADDRESSES a on p.IDF = a.REFERENCE_ID

Print '------------- Data Migration  [dbo].[sc_PERSONS]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_User]
----
-------------
Print '------------- Data Migration  [dbo].[sc_User]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
Declare @TempData as TABLE(ID Int NULL, PARENT_ID int Null, NAME_CODE varchar(512) null, IDF varchar(64) Null, CNT INT Null)

INSERT INTO @TempData(NAME_CODE, IDF, CNT)
SELECT USERNAME, dbo.fn_NewIDF('USER',default), Count(*) FROM APX_USER_EXT Group By USERNAME
UPDATE e SET IDF = t.IDF FROM APX_USER_EXT e INNER JOIN @TempData t on t.NAME_CODE = e.USERNAME
UPDATE t set ID= (Select Top 1 ID FROM APX_USER_EXT  where IDF = t.IDF ORDER BY ID)
FROM APX_USER_EXT e INNER JOIN @TempData t on t.IDF = e.IDF
UPDATE e set IDX=1 FROM APX_USER_EXT e INNER JOIN @TempData t on t.ID = e.ID
UPDATE APX_USER_EXT Set IDX = 2 where IDX is null

Select @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS_APP'
INSERT INTO [dbo].[USERS]([IDF],[USERNAME],[FULL_NAME],[DESCRIPTION],[NIH_USER_IDR],[ADMIN_APPROVED_IDR], [EMAIL],[EMAIL_IDR],[OWNER_IDF],[APPLICATION_IDF],[ORGANIZATION_IDF]
     -- ,[HEAR_ABOUT_US],[REQUESTED_DATE],[REQUESTED_ROLES],[LAST_ROLE_CHANGE],[LOCKED_BY],[LOCKED_DATE],[LOCK_EXPIRED_DATE],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[AGENT_IDF],[OFFICE_IDF],[CONTACT_IDF],[USER_GROUP_IDF]
      ,[AFFILIATION],[LAST_SUCCESSFUL_LOGIN],[ROB_ACCEPT_IDR],[ROB_ACCEPTED_DATE],[ROB_EXPIRATION],[TRACK_IPS],[USER_AGENT],[LOGIN_COUNT],[BAD_PASSWORD_COUNT],[HASH],[LAST_ACCESS],[PASSWORD],[PASSWORD_EXPIRATION],[RESET],[SECRET_ANSWER],[SECRET_QUESTION],[SESSION_ID]
      ,[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[FEDERAL_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT u.[IDF],u.[USERNAME],RTRIM(LAST_NAME+', '+ isNull(FIRST_NAME,'')+ ' '+ isNull(MIDDLE_NAME,'')), u.[DESCRIPTION], case when charIndex('.nih.gov',u.USERNAME) > 0 THEN 1 ELSE 0 END,1,u.[USERNAME],CASE WHEN CHARINDEX('@',u.USERNAME) > 0 THEN 1 ELSE 0 END,p.IDF, @v_IDF,o.IDF
      ,o.NAME_CODE,u.[LAST_SUCCESSFUL_LOGIN],case WHEN DATEDIFF(DAY, isNull(u.[ROB_ACK],'1920/01/02'), isNull(u.[ROB_EXPIRATION],'1920/01/01')) <= 0 THEN 1 ELSE 0 END, u.[ROB_ACK],u.[ROB_EXPIRATION],u.[IP_ADDRESS],u.[USER_AGENT],u.[DAILY_LOGIN_COUNT],u.[BAD_PASSWORD_COUNT],u.[HASH],u.[LAST_ACCESS],u.[PASSWORD],u.[PASSWORD_EXPIRATION],u.[RESET],u.[SECRET_ANSWER],u.[SECRET_QUESTION],u.[SESSION_ID]
      ,'','C_PERSON', CASE [TYPE] WHEN 1 THEN 'C_CUSTOMER'
                                  WHEN 2 THEN 'C_CONTRACTOR'
                                  WHEN 0 THEN 'C_ADMIN'
                                  ELSE        'C_USER' END,u.[CREATED_WHEN],NULL,
          case STATUS  --- need to figure status 0,1,2,3,4,5
          WHEN 0 THEN 'INITIAL'
          WHEN 1 THEN 'RESET'
          WHEN 2 THEN 'PENDING'
          WHEN 3 THEN  @v_Status
          WHEN 4 THEN 'INACTIVE'
          WHEN 5 THEN 'DELETE'
          ELSE        'OTHER' END, @v_SDATE ,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'APX_USER:'+Cast(u.[ID] as varchar(16)), 'APX_USER',1,CASE When TYPE = 1 THEN 1 ELSE 0 END,1,u.[CREATED_WHEN],u.[CREATED_BY],u.[MODIFIED_WHEN],u.[MODIFIED_BY],u.[VERSION], 744,'VERSION:'+cast(u.[VERSION] as varchar(16))
  FROM [APX_USER_EXT] u INNER JOIN SYM_PERSON_EXT p on p.ID_EMAIL = u.ID_EMAIL AND u.IDX = p.IDX INNER JOIN ORGANIZATIONS o on o.IDF = p.ORGANIZATION_IDF
  WHERE u.IDX = 1

Delete @TempData
if OBJECT_ID('CIOCSBK.dbo.USER_EXT') is NULL
BEGIN
   insert @TempData(ID, NAME_CODE) SELECT ID, USERNAME FROM APX_USER_EXT WHERE IDX = 1 and IDF not in (SELECT IDF FROM USERS)
   select * INTO CIOCSBK.dbo.USER_EXT FROM @TempData
END
Select @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS_APP'
INSERT INTO [dbo].[USERS]([IDF],[USERNAME],[FULL_NAME],[DESCRIPTION],[NIH_USER_IDR],[ADMIN_APPROVED_IDR], [EMAIL],[EMAIL_IDR],[OWNER_IDF],[APPLICATION_IDF],[ORGANIZATION_IDF]
     -- ,[HEAR_ABOUT_US],[REQUESTED_DATE],[REQUESTED_ROLES],[LAST_ROLE_CHANGE],[LOCKED_BY],[LOCKED_DATE],[LOCK_EXPIRED_DATE],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[AGENT_IDF],[OFFICE_IDF],[CONTACT_IDF],[USER_GROUP_IDF]
      ,[AFFILIATION],[LAST_SUCCESSFUL_LOGIN],[ROB_ACCEPT_IDR],[ROB_ACCEPTED_DATE],[ROB_EXPIRATION],[TRACK_IPS],[USER_AGENT],[LOGIN_COUNT],[BAD_PASSWORD_COUNT],[HASH],[LAST_ACCESS],[PASSWORD],[PASSWORD_EXPIRATION],[RESET],[SECRET_ANSWER],[SECRET_QUESTION],[SESSION_ID]
      ,[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[FEDERAL_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT u.[IDF],u.[USERNAME],RTRIM(LAST_NAME+', '+ isNull(FIRST_NAME,'')+ ' '+ isNull(MIDDLE_NAME,'')), u.[DESCRIPTION], case when charIndex('.nih.gov',u.USERNAME) > 0 THEN 1 ELSE 0 END,1,u.[USERNAME],CASE WHEN CHARINDEX('@',u.USERNAME) > 0 THEN 1 ELSE 0 END,p.IDF, @v_IDF, o.IDF
      ,o.NAME_CODE,u.[LAST_SUCCESSFUL_LOGIN],case WHEN DATEDIFF(DAY, isNull(u.[ROB_ACK],'1920/01/02'), isNull(u.[ROB_EXPIRATION],'1920/01/01')) <= 0 THEN 1 ELSE 0 END, u.[ROB_ACK],u.[ROB_EXPIRATION],u.[IP_ADDRESS],u.[USER_AGENT],u.[DAILY_LOGIN_COUNT],u.[BAD_PASSWORD_COUNT],u.[HASH],u.[LAST_ACCESS],u.[PASSWORD],u.[PASSWORD_EXPIRATION],u.[RESET],u.[SECRET_ANSWER],u.[SECRET_QUESTION],u.[SESSION_ID]
      ,'','C_PERSON', CASE [TYPE] WHEN 1 THEN 'C_CUSTOMER'
                                  WHEN 2 THEN 'C_CONTRACTOR'
                                  WHEN 0 THEN 'C_ADMIN'
                                  ELSE        'C_USER' END,u.[CREATED_WHEN],NULL,
          case STATUS  --- need to figure status 0,1,2,3,4,5
          WHEN 0 THEN 'INITIAL'
          WHEN 1 THEN 'RESET'
          WHEN 2 THEN 'PENDING'
          WHEN 3 THEN  @v_Status
          WHEN 4 THEN 'INACTIVE'
          WHEN 5 THEN 'DELETE'
          ELSE        'OTHER' END, @v_SDATE,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'APX_USER:'+Cast(u.[ID] as varchar(16)), 'APX_USER',1,CASE When TYPE = 1 THEN 1 ELSE 0 END,1,u.[CREATED_WHEN],u.[CREATED_BY],u.[MODIFIED_WHEN],u.[MODIFIED_BY],u.[VERSION], 744,'VERSION:'+cast(u.[VERSION] as varchar(16))
  from SYM_PERSON_EXT p inner join APX_USER_EXT u on p.USER_ID = u.ID INNER JOIN ORGANIZATIONS o on o.IDF = p.ORGANIZATION_IDF
  where p.USER_ID in (SELECT ID FROM CIOCSBK.dbo.USER_EXT) and u.IDX = 1 and p.IDX in (1,3)

if (Select count(*) from @TempData) > 0
    UPDATE t set  IDF = e.IDF from CIOCSBK.dbo.USER_EXT t inner join APX_USER_EXT e on e.ID = t.ID WHERE 'APX_USER:'+cast(t.ID as varchar(16)) not in (SELECT REFERENCE_ID FROM USERS)

--- handle missing ones
INSERT INTO [dbo].[USERS]([IDF],[USERNAME],[FULL_NAME],[DESCRIPTION],[NIH_USER_IDR],[ADMIN_APPROVED_IDR], [EMAIL],[EMAIL_IDR],[OWNER_IDF],[APPLICATION_IDF],[ORGANIZATION_IDF]
     -- ,[HEAR_ABOUT_US],[REQUESTED_DATE],[REQUESTED_ROLES],[LAST_ROLE_CHANGE],[LOCKED_BY],[LOCKED_DATE],[LOCK_EXPIRED_DATE],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[AGENT_IDF],[OFFICE_IDF],[CONTACT_IDF],[USER_GROUP_IDF]
      ,[AFFILIATION],[LAST_SUCCESSFUL_LOGIN],[ROB_ACCEPT_IDR],[ROB_ACCEPTED_DATE],[ROB_EXPIRATION],[TRACK_IPS],[USER_AGENT],[LOGIN_COUNT],[BAD_PASSWORD_COUNT],[HASH],[LAST_ACCESS],[PASSWORD],[PASSWORD_EXPIRATION],[RESET],[SECRET_ANSWER],[SECRET_QUESTION],[SESSION_ID]
      ,[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[FEDERAL_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT u.[IDF],u.[USERNAME],RTRIM(LAST_NAME+', '+ isNull(FIRST_NAME,'')+ ' '+ isNull(MIDDLE_NAME,'')), u.[DESCRIPTION], case when charIndex('.nih.gov',u.USERNAME) > 0 THEN 1 ELSE 0 END,1,u.[USERNAME],CASE WHEN CHARINDEX('@',u.USERNAME) > 0 THEN 1 ELSE 0 END,p.IDF, @v_IDF, o.IDF
      ,o.NAME_CODE,u.[LAST_SUCCESSFUL_LOGIN],case WHEN DATEDIFF(DAY, isNull(u.[ROB_ACK],'1920/01/02'), isNull(u.[ROB_EXPIRATION],'1920/01/01')) <= 0 THEN 1 ELSE 0 END, u.[ROB_ACK],u.[ROB_EXPIRATION],u.[IP_ADDRESS],u.[USER_AGENT],u.[DAILY_LOGIN_COUNT],u.[BAD_PASSWORD_COUNT],u.[HASH],u.[LAST_ACCESS],u.[PASSWORD],u.[PASSWORD_EXPIRATION],u.[RESET],u.[SECRET_ANSWER],u.[SECRET_QUESTION],u.[SESSION_ID]
      ,'','C_PERSON', CASE [TYPE] WHEN 1 THEN 'C_CUSTOMER'
                                  WHEN 2 THEN 'C_CONTRACTOR'
                                  WHEN 0 THEN 'C_ADMIN'
                                  ELSE        'C_USER' END,u.[CREATED_WHEN],NULL,
          case STATUS  --- need to figure status 0,1,2,3,4,5
          WHEN 0 THEN 'INITIAL'
          WHEN 1 THEN 'RESET'
          WHEN 2 THEN 'PENDING'
          WHEN 3 THEN  @v_Status
          WHEN 4 THEN 'INACTIVE'
          WHEN 5 THEN 'DELETE'
          ELSE        'OTHER' END, @v_SDATE,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'APX_USER:'+Cast(u.[ID] as varchar(16)), 'APX_USER',1,CASE When TYPE = 1 THEN 1 ELSE 0 END,1,u.[CREATED_WHEN],u.[CREATED_BY],u.[MODIFIED_WHEN],u.[MODIFIED_BY],u.[VERSION], 744,'VERSION:'+cast(u.[VERSION] as varchar(16))
  from  SYM_PERSON_EXT p inner join APX_USER_EXT u on p.USER_ID = u.ID INNER JOIN ORGANIZATIONS o on o.IDF = p.ORGANIZATION_IDF
  where u.IDF not in (SELECT IDF FROM USERS)

---- change the business rule for customer Login who can access all applications and signature IDF for users
UPDATE USERS set IDF = 'USRFC' + Right(IDF,59), APPLICATION_IDF = @v_IDF where TYPE_CODE = 'C_CUSTOMER'
UPDATE USERS set IDF = 'USRCH' + Right(IDF,59) where TYPE_CODE = 'C_CONTRACTOR'
UPDATE a SET IDF = u.IDF FROM USERS u inner join APX_USER_EXT a on u.REFERENCE_ID = 'APX_USER:'+cast(a.id as varchar(8))

INSERT INTO [dbo].[TELECOM_ADDRESSES]([IDF],[NAME_CODE],[PHONE],[MOBILE],[FAX],[EMAIL],[URL],[INTERNATIONAL_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE] ,[UPDATED_BY],[UPDATED_COUNT])
SELECT  dbo.fn_NewIDFExt('TADR',default,cast(e.ID as varchar(16))), e.LAST_NAME + ', ' + e.FIRST_NAME + ' Telecom Address', e.[PHONE],NULL,e.[FAX],t.[NAME_CODE],'',e.[PHONE_EXTENSION],'C_PUBLIC','C_PERSON','C_BUSINESS','',@v_STATUS,@v_SDATE,'Migrated From SYM_PERSON On Date:'+cast(@v_SDATE as varchar(24)),'C_USER', e.IDF,'SYM_PERSON IDF in Reference_ID', 1,e.[CREATED_WHEN],e.[CREATED_BY],e.[MODIFIED_WHEN] ,e.[MODIFIED_BY],1
FROM SYM_PERSON_EXT e inner join CIOCSBK.dbo.USER_EXT t on e.USER_ID = t.ID
WHERE t.IDF is not null

INSERT INTO CONTACT_TELECOM_ADDRESSES([CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, c.OWNER_IDF, a.NAME_CODE, c.CATEGORY_CODE, c.TYPE_CODE, 'C_BUSINESS', a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY c.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN TELECOM_ADDRESSES a on c.OWNER_IDF = a.REFERENCE_ID WHERE a.IDF NOT IN (SELECT TELECOM_ADDRESS_IDF FROM CONTACT_TELECOM_ADDRESSES where CONTACT_IDF = c.IDF)

UPDATE U set CONTACT_IDF = c.IDF
FROM USERS u INNER JOIN CONTACTS c on c.OWNER_IDF = u.OWNER_IDF

UPDATE U set CONTACT_IDF = c.IDF
FROM PERSONS u INNER JOIN CONTACTS c on c.OWNER_IDF = u.IDF

UPDATE U set CONTACT_IDF = c.IDF
FROM ORGANIZATIONS u INNER JOIN CONTACTS c on c.OWNER_IDF = u.IDF

Print '------------- Data Migration  [dbo].[sc_User]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Security]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Security]  -----START: ' + cast(GetDate() as varchar(24))

-- install Various Roles from APX_USER_MEMBER and Others
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
If Object_ID('tempdb..#TempData') is null
   CREATE TABLE #TempData(ID Int NULL, PARENT_ID int Null, NAME_CODE varchar(512) null, IDF varchar(64) Null, USER_IDF varchar(64) Null,  IDF_ALT varchar(64) Null,  CNT INT Null)

INSERT INTO [dbo].[USER_APPLICATION_ROLES]([USER_IDF] ,[ROLE_IDF] ,[APPLICATION_IDF] ,[PERSON_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[NOTE_TEXT],[EFFECTIVE_START_DATE]
      ,[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR]
      ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT u.IDF, r.ROLE_IDF, r.APPLICATION_IDF, u.OWNER_IDF, u.USERNAME, r.CATEGORY_CODE, r.TYPE_CODE, r.NAME_CODE + ' Role', r.EFFECTIVE_START_DATE, r.[EFFECTIVE_END_DATE],r.[STATUS_CODE],r.[STATUS_DATE],'Mirgated From APX_GROUP_MEMBERSHIP On Date' + cast(@v_SDATE as varchar(20)),'APX_GROUP_MEMBERSHIP:'+cast(a.ID as varchar(8)), 'APX_GROUP_MEMBERSHIP',1,1
      ,a.CREATED_WHEN, a.CREATED_BY, MODIFIED_WHEN, MODIFIED_BY,1,r.ACCESS_LEVEL, 'VERSION:'+cast(a.[VERSION] as varchar(4))
FROM APPLICATION_ROLES r INNER JOIN CIOCSBK.dbo.APX_GROUP_MEMBERSHIP a on r.REFERENCE_ID = 'APX_GROUP:'+cast(a.group_ID as varchar(16))
     INNER JOIN USERS u on u.REFERENCE_ID = 'APX_USER:'+cast(a.user_id as varchar(16)) -- and u.APPLICATION_IDF = r.APPLICATION_IDF
WHERE u.CATEGORY_CODE = 'C_PERSON' and r.STATUS_CODE = 'ACTIVE'

INSERT INTO  #TempData(IDF, NAME_CODE, cnt)
select User_IDF, APPLICATION_IDF, 1
FROM USER_APPLICATION_ROLES
group by user_IDF, application_IDF having count(*) = 1
if (Select Count(*) FROM  #TempData) > 0
BEGIN
        INSERT INTO [dbo].[APPLICATION_USERS]([USER_IDF],[APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[ACCESS_LEVEL],[ACCESS_MAP_IDR]
         ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE])
        SELECT u.IDF, a.IDF, u.UserName, a.VALUE_CODE, a.[ACRONYM_NAME], u.CATEGORY_CODE, u.TYPE_CODE, a.DESCRIPTION, a.ACCESS_LEVEL, 1,
        u.[STATUS_CODE],u.[STATUS_DATE],'',a.[REFERENCE_ID],u.[REFERENCE_ID],u.[CREATED_DATE],u.[CREATED_BY],u.[UPDATED_DATE],u.[UPDATED_BY],u.[UPDATED_COUNT],[POSITION_ORDER],u.[VERSION],'',u.[EFFECTIVE_START_DATE],u.[EFFECTIVE_END_DATE]
        FROM CODE_APPLICATIONS a inner join #TempData t on t.NAME_CODE = a.IDF INNER JOIN USERS u on u.IDF = t.IDF

        UPDATE U SET APPLICATION_IDF = r.NAME_CODE FROM USERS u INNER JOIN #TempData r on r.IDF = u.IDF WHERE u.TYPE_CODE = 'C_CONTRACTOR'
        DELETE  #TempData
END
UPDATE USERS SET NIH_USER_IDR = 1 WHERE TYPE_CODE = 'C_CUSTOMER' and UserName Like '%nih.%'

-------Group, organization and Person roles
INSERT INTO [dbo].[GROUP_ROLES]([GROUP_IDF],[ROLE_IDF],[CATEGORY_CODE],[TYPE_CODE],[NAME_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS] ,[REFERENCE_CODE] ,[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE] ,[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SElECT g.IDF, r.IDF, g.CATEGORY_CODE, r.TYPE_CODE, g.NAME_CODE,r.[DESCRIPTION],'',@v_SDATE,g.[STATUS_CODE],g.[STATUS_DATE],'Default Organiztion Role' ,g.[REFERENCE_CODE],g.[REFERENCE_ID],g.[REFERENCE_NAME],1,g.[CREATED_DATE],g.[CREATED_BY],g.[UPDATED_DATE],g.[UPDATED_BY],g.[UPDATED_COUNT],g.[ACCESS_LEVEL],g.[VERSION]
FROM CODE_ROLES r, CODE_GROUPS g
where r.CATEGORY_CODE = 'C_GRP_ROLE'
INSERT INTO [dbo].[ORGANIZATION_ROLES]([ORGANIZATION_IDF],[ROLE_IDF],[CATEGORY_CODE],[TYPE_CODE],[NAME_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE] ,[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SElECT g.IDF, r.IDF, g.CATEGORY_CODE, r.TYPE_CODE, g.NAME_CODE, r.[DESCRIPTION],'',@v_SDATE,g.[STATUS_CODE],g.[STATUS_DATE],'Default Organiztion Role' ,g.[REFERENCE_ID],g.[REFERENCE_NAME],g.[CREATED_DATE],g.[CREATED_BY],g.[UPDATED_DATE],g.[UPDATED_BY],g.[UPDATED_COUNT],g.[ACCESS_LEVEL],g.[VERSION]
FROM CODE_ROLES r, ORGANIZATIONS g
where r.CATEGORY_CODE = 'C_ORG_ROLE'

INSERT INTO  #TempData(IDF, IDF_ALT)
select Distinct PERSON_IDF, ROLE_IDF
FROM USER_APPLICATION_ROLES where PERSON_IDF is not null
UPDATE  t SET t.USER_IDF = (SELECT TOP 1 USER_IDF FROM USER_APPLICATION_ROLES WHERE t.IDF_ALT = ROLE_IDF and t.IDF = PERSON_IDF)
FROM #TempData t INNER JOIN USER_APPLICATION_ROLES u on t.IDF_ALT = u.ROLE_IDF and  t.IDF = u.PERSON_IDF
UPDATE t SET NAME_CODE = (SELECT TOP 1 APPLICATION_IDF FROM USER_APPLICATION_ROLES WHERE t.IDF = PERSON_IDF and t.IDF_ALT = ROLE_IDF AND t.USER_IDF = USER_IDF ORDER BY APPLICATION_IDF)
FROM #TempData t INNER JOIN USER_APPLICATION_ROLES u on t.IDF = u.PERSON_IDF and t.IDF_ALT = u.ROLE_IDF AND t.USER_IDF = u.USER_IDF

INSERT INTO [dbo].[PERSON_ROLES]([ROLE_IDF],[PERSON_IDF],[APPLICATION_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE]
           ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT  r.[ROLE_IDF],r.[PERSON_IDF],r.[APPLICATION_IDF],p.[PREFERRED_NAME],r.[CATEGORY_CODE],r.[TYPE_CODE],p.[description],r.[EFFECTIVE_START_DATE],r.[EFFECTIVE_END_DATE],r.[STATUS_CODE],r.[STATUS_DATE]
        ,p.[COMMENTS],p.[REFERENCE_ID],r.[REFERENCE_ID],r.[CREATED_DATE],r.[CREATED_BY],r.[UPDATED_DATE],r.[UPDATED_BY],r.[UPDATED_COUNT],r.[ACCESS_LEVEL],r.[VERSION]
FROM #TempData t INNER JOIN USER_APPLICATION_ROLES r on t.NAME_CODE = r.APPLICATION_IDF and t.IDF = r.PERSON_IDF and t.IDF_ALT = r.ROLE_IDF and t.USER_IDF = r.USER_IDF INNER JOIN PERSONS p on r.PERSON_IDF = p.IDF

If Object_ID('tempdb..#TempData') is not null
   Drop Table  #TempData

Print '------------- Data Migration  [dbo].[sc_Security]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Contract]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Contract]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
       ----CONTACT_IDF],[ACRONYM_NAME],[PROPOSAL_NUMBER],[NEXT_PROPOSAL_NUMBER],[LAST_PROPOSAL_NUMBER],[REASON_CODE])
INSERT INTO [dbo].[CONTRACTS]([IDF],[CATEGORY_CODE],[TYPE_CODE],[VALUE_CODE], [CONTRACT_NO],[OTHER_CONTRACT_NO],[EMAIL_ADDRESS],[MAX_ORDER_END_DATE],[QUALIFIED_AREA_MASKED_IDR],[SBA_MASKED_IDR],[OEM_IDR],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[PRIMARY_IDR],[EXTENSION_IDR],[APPLICATION_IDF],[CONTRACTOR_IDF],[NAME_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[CONTRACT_URL],[BUSINESS_SIZE],[FCL_LEVEL],[TEAM],[SET_ASIDE_TYPE],[CERTIFIED_DATE],[CERTIFIED_BY],[CERTIFIED_PERIOD], [PMO_IDF])
SELECT dbo.fn_NewIDFExt('CTRT',c.CREATED_WHEN,c.CONTRACT_NO),'C_NITAAC_IDIQ','C_T_M',replace(c.[CONTRACT_NO],'HHS','C_'), c.[CONTRACT_NO],c.[OTR_CONTRACT_NO],c.[EMAIL_ADDRESS],c.[MAX_ORDER_END_DATE],c.QUALIFIED_AREA,c.[SBA_DESIGNATION], CASE WHEN c.[OEM_FLAG] ='T' THEN 1 ElSE 0 END,c.[START_DATE],c.[END_DATE], CASE WHEN c.[ACTIVE_FLAG] > 0 THEN @v_STATUS ELSE 'INACTIVE' END,c.[CREATED_WHEN],1, CASE WHEN c.[CONTRACT_EXTENSION_ID] > 0 THEN 1 ELSE 0 END,a.IDF,o.IDF,isNull(o.NAME_CODE,''),'','Migrated From On Date:' + cast(@v_SDATE as varchar(24)),'SYM_CONTRACT:'+CAST(c.[ID] as varchar(16)),'SYM_CONTRACT',1,c.[CREATED_WHEN],c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY], c.VERSION,744,'VERSION:'+CAST(c.VERSION as varchar(16)), ce.CONTRACT_URL, ce.BUSINESS_SIZE, ce.FCL_LEVEL, ce.TEAM,ce.SET_ASIDE_TYPE, ce.CERTIFIED_DATE, ce.CERTIFIED_BY, ce.CERTIFIED_PERIOD, p.IDF
  FROM CIOCSBK.[dbo].[SYM_CONTRACT] c INNER JOIN dbo.CODE_APPLICATIONS a on 'SYM_GWAC:'+cast(c.GWAC_ID as varchar(16))=a.REFERENCE_ID INNER JOIN CIOCSBK.[dbo].[SYM_CONTRACT_EXTENSION] ce on c.id = ce.contract_id
  INNER JOIN dbo.SYM_ORGANIZATION_EXT e on e.ID = c.ORG_ID INNER JOIN ORGANIZATIONS o on o.IDF = e.IDF left join SYM_PERSON_EXT p on c.[PMO_ID] = p.ID

UPDATE C SET CMO_IDF = p.IDF
FROM [dbo].[CONTRACTS] C INNER JOIN CIOCSBK.[dbo].[SYM_CONTRACT] sc on 'SYM_CONTRACT:'+CAST(sc.ID as varchar(16)) = c.REFERENCE_ID INNER JOIN SYM_PERSON_EXT p on sc.[MARKETING_ID] = p.ID
WHERE isNull(sc.[MARKETING_ID],0) > 0
UPDATE C SET CAO_IDF = p.IDF
FROM [dbo].[CONTRACTS] C INNER JOIN CIOCSBK.[dbo].[SYM_CONTRACT] sc on 'SYM_CONTRACT:'+CAST(sc.ID as varchar(16)) = c.REFERENCE_ID INNER JOIN SYM_PERSON_EXT p on sc.[FINANCE_ID] = p.ID
WHERE isNull(sc.[FINANCE_ID],0) > 0

UPDATE T SET EMAIL = c.EMAIL_ADDRESS
FROM [dbo].[TELECOM_ADDRESSES] T INNER JOIN CONTRACTS c on right(c.CONTRACTOR_IDF,59) = right(t.IDF,59)

---- handle duplicated Contracts
declare   @CRCTTBL TABLE(CIDF varchar(64), AIDF varchar(64), IDF varchar(64) null, Cnt int null)
INSERT INTO @CRCTTBL(CIDF, AIDF, cnt)
Select CONTRACTOR_IDF, APPLICATION_IDF, count(*) FROM CONTRACTS WHERE STATUS_CODE = 'ACTIVE' GROUP BY CONTRACTOR_IDF, APPLICATION_IDF, STATUS_CODE HAVING COUNT(*) > 1
UPDATE  t SET IDF = (SELECT TOP 1 IDF FROM CONTRACTS where IDF = c.IDF ORDER BY CONTRACT_NO)
FROM @CRCTTBL t INNER JOIN CONTRACTS c on c.CONTRACTOR_IDF = t.CIDF and c.APPLICATION_IDF = t.AIDF
UPDATE C SET STATUS_CODE = 'PENDING'
FROM CONTRACTS c INNER JOIN @CRCTTBL t on t.CIDF = c.CONTRACTOR_IDF and t.AIDF = c.APPLICATION_IDF and t.IDF <> c.IDF

--- handle duplicated address id for the same org
declare  @OrgAdd TABLE (oid int,aid int, vid int null, cnt int null)
insert into @OrgAdd(oid,aid, cnt)
select ORG_ID, ADDRESS_ID, count(*) From CIOCSBK.dbo.SYM_CONTRACT GROUP BY ORG_ID, ADDRESS_ID having Count(*) > 1

INSERT INTO CONTACT_ADDRESSES([CONTACT_IDF],[ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.REFERENCE_NAME, 'C_ORGANIZATION',a.TYPE_CODE, 'C_BUSINESS', a.DIRECTION, a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN ORGANIZATIONS p on c.OWNER_IDF = p.IDF INNER JOIN CIOCSBK.[dbo].[SYM_CONTRACT] sc on 'SYM_ORGANIZATION:'+cast(sc.ORG_ID as varchar(16)) = p.REFERENCE_ID
INNER JOIN ADDRESSES a on 'APX_US_ADDRESS:'+CAST(sc.ADDRESS_ID as varchar(16)) = a.REFERENCE_ID
WHERE IsNull(sc.ADDRESS_ID,0) > 0 and cast(sc.ORG_ID as varchar(10)) +':' +cast(sc.ADDRESS_ID as varchar(10)) not in (SELECT cast(oid as varchar(10)) + ':' +cast(aid as varchar(10)) from @OrgAdd)

---- select one address for duplicated ones
Update oa set vid  = sc.version
from @OrgAdd oa inner join CIOCSBK.[dbo].[SYM_CONTRACT] sc on oa.oid = sc.ORG_ID and oa.aid = sc.ADDRESS_ID
WHERE sc.version = (select max(version) from CIOCSBK.[dbo].[SYM_CONTRACT] where ORG_ID = sc.org_ID AND ADDRESS_ID=sc.ADDRESS_ID)

INSERT INTO CONTACT_ADDRESSES([CONTACT_IDF],[ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[USAGE_CODE],[DIRECTION],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[VERSION])
SELECT c.IDF, a.IDF, p.IDF, p.NAME_CODE, 'C_ORGANIZATION',a.TYPE_CODE, 'C_BUSINESS', a.DIRECTION, a.DESCRIPTION, a.CREATED_DATE, a.STATUS_CODE, a.STATUS_DATE, c.COMMENTS, c.REFERENCE_ID, c.REFERENCE_NAME,1,1,1,c.CREATED_DATE, c.CREATED_BY, c.UPDATED_DATE, c.UPDATED_BY, c.UPDATED_COUNT, ROW_NUMBER() OVER(ORDER BY p.REFERENCE_NAME), c.VERSION
FROM CONTACTS c INNER JOIN ORGANIZATIONS p on c.OWNER_IDF = p.IDF INNER JOIN SYM_ORGANIZATION_EXT e on e.IDF = p.IDF INNER JOIN CIOCSBK.[dbo].[SYM_CONTRACT] sc on sc.ORG_ID = e.ID AND e.IDF = p.IDF
INNER JOIN ADDRESSES a on 'APX_US_ADDRESS:'+CAST(sc.ADDRESS_ID as varchar(16)) = a.REFERENCE_ID INNER JOIN @OrgAdd oa on oa.oid = sc.ORG_ID and oa.aid = sc.ADDRESS_ID and oa.vid = sc.Version
WHERE IsNull(sc.ADDRESS_ID,0) > 0


INSERT INTO [dbo].[REF_NITAAC_DEFINITIONS]([NAME_CODE],[APPLICATION_IDF],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[MASK_VALUE],[VERSION])
SELECT  left([NAME],128), a.IDF,
        CASE a.ACRONYM_NAME
        WHEN 'CS'    THEN  'C_ABBR_'+ cast(c.ABBR as varchar(16))
        WHEN 'GSS'   THEN  'C_ABBR_'+ cast(c.ABBR as varchar(16))
        WHEN 'SP3'   THEN  'C_'+ UPPER(replace(replace(LEFT(c.[NAME], CharIndex('-',c.[NAME])-2),' Area ',' '),' ','_'))
        WHEN 'SP3SB' THEN  'C_'+ UPPER(replace(replace(LEFT(c.[NAME], CharIndex('-',c.[NAME])-2),' Area ',' '),' ','_'))
        WHEN 'SP2I'  THEN  'C_ABBR_'+ cast(c.ABBR as varchar(16))
        WHEN 'ECS3'  THEN  'C_'+ UPPER(replace(LEFT(c.[NAME],5),' ','_'))
        WHEN 'IW2ND' THEN  'C_ABBR_'+ cast(c.ABBR as varchar(16))
        ELSE               'C_OTHER'  END,'',c.[ABBR],'C_CONTRACT','C_'+Cast([TYPE] as varchar(16)),c.[NAME],'Migrated From On Date: '+ CAST(@v_SDATE as varchar(24)),'', 'SYM_CONTRACT_AREA]:'+CAST(c.[ID] as varchar(16)), 'SYM_CONTRACT_AREA]', @v_STATUS, @v_SDATE
        ,c.[CREATED_WHEN],c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY],c.[VERSION],c.[MASK], 'VERSION:'+CAST(c.[VERSION] as varchar(16))
   FROM CIOCSBK.[dbo].[SYM_CONTRACT_AREA] c INNER JOIN CODE_APPLICATIONS a on a.REFERENCE_ID = 'SYM_GWAC:'+cast(c.[GWAC] as varchar(16))

---- Split the DEFINITIONS INTO CONTRACT_QUALIFIED_AREAS
INSERT INTO [dbo].[CONTRACT_QUALIFIED_AERAS]([IDF],[APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[MASK_VALUE],[SOURCE],[SOURCE_CODE],[PARENT_CODE],[PARENT_IDF],[ACCESS_LEVEL],[VERSION])
  SELECT [IDF],[APPLICATION_IDF],[NAME_CODE],[VALUE_CODE],[ACTION_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[MASK_VALUE],[SOURCE],[SOURCE_CODE],[PARENT_CODE],[PARENT_IDF],[ACCESS_LEVEL],[VERSION]
  FROM [dbo].[REF_NITAAC_DEFINITIONS]

Set @v_RV = 0
WHILE @v_RV < 10
BEGIN
   SET @v_RV += 1;
   Set @v_Code =  'C_TASK_' + cast(@v_RV as varchar(4))
   INSERT INTO dbo.GROUP_ORGANIZATIONS([GROUP_IDF] ,[ORGANIZATION_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[PRIMARY_IDR],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION])
   SELECT  g.[IDF] ,v.[CONTRACTOR_IDF], v.[NAME_CODE], @v_Code, g.[TYPE_CODE], replace(replace(@v_Code,'C_',''),'TASK_','TASK AREA ') + ': for CONTRACT No:'+ v.[CONTRACT_NO], g.[CREATED_DATE], v.[STATUS_CODE],v.[STATUS_DATE],v.[COMMENTS],v.[IDF],v.[APPLICATION_IDF]+':'+v.[CONTRACT_NO],'C_'+ replace(left(v.APPLICATION_IDF,5),'_',''), 1,1,v.[CREATED_DATE],v.[CREATED_BY],v.[ACCESS_LEVEL],v.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v
   WHERE g.VALUE_CODE = 'C_ORG_CONTRACT' AND dbo.fn_isMasked(v.QUALIFIED_AREA_MASKED_IDR,@v_Code)>0
END;




   INSERT INTO dbo.GROUP_ORGANIZATIONS([GROUP_IDF] ,[ORGANIZATION_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[PRIMARY_IDR],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[ACCESS_LEVEL],[VERSION])
   SELECT  g.[IDF] ,v.[CONTRACTOR_IDF], v.[NAME_CODE], d.VALUE_CODE, d.TYPE_CODE, v.NAME_CODE + '('+d.NAME_CODE + '): for CONTRACT No:'+ v.[CONTRACT_NO], g.[CREATED_DATE], v.[STATUS_CODE],v.[STATUS_DATE],v.[COMMENTS],v.[IDF],v.[APPLICATION_IDF]+':'+v.[CONTRACT_NO],'C_'+ replace(left(v.APPLICATION_IDF,5),'_',''), 1,1,v.[CREATED_DATE],v.[CREATED_BY],v.[ACCESS_LEVEL],v.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v, REF_NITAAC_DEFINITIONS d
   WHERE g.VALUE_CODE = 'C_ORG_SBA' AND d.CATEGORY_CODE = 'C_CONTRACTOR' AND d.TYPE_CODE = 'C_SBA' AND dbo.fn_isMasked(v.SBA_MASKED_IDR,d.VALUE_CODE)>0

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_SYS',v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE, p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name+ ' Contract person with SYS Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.SYS_EMAIL = p.EMAIL and replace(replace(e.SYS_Phone,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.SYS_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_PM', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with PM Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.PM_EMAIL = p.EMAIL and replace(replace(e.PM_Phone,' ',''),'-','')   = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.PM_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_CA', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with CA Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.CA_EMAIL = p.EMAIL and replace(replace(e.CA_PHONE,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.CA_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_BD', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with BD Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.BD_EMAIL = p.EMAIL and replace(replace(e.BD_PHONE,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.BD_EMAIL,'') <> ''  and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_ALTSYS',v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE, p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with ALT SYS Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.SYS_ALT_EMAIL = p.EMAIL and replace(replace(e.SYS_ALT_PHONE,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.SYS_ALT_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_ALTPM', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with ALT PM Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.PM_ALT_EMAIL = p.EMAIL  and replace(replace(e.PM_ALT_PHONE,' ',''),'-','')  = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.PM_ALT_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_ALTCA', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with ALT CA Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.CA_ALT_EMAIL = p.EMAIL and replace(replace(e.CA_ALT_PHONE,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.CA_ALT_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_PERSONS]([GROUP_IDF],[PERSON_IDF],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[REFERENCE_CODE],[NAME_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[VERIFICATION_IDR],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[VERSION])
   SELECT g.IDF, p.IDF, g.VALUE_CODE,'C_PER_ALTBD', v.IDF, 'SYM_CONTRACT_EXTENSION', v.VALUE_CODE,p.Last_Name + ', ' + p.First_Name,p.Last_Name + ', ' + p.First_Name + ' Contract person with ALT BD Type',g.CREATED_DATE,g.STATUS_CODE, g.STATUS_DATE,g.COMMENTS, 1, 1, g.[CREATED_DATE],g.[CREATED_BY],g.[VERSION]
   FROM CODE_GROUPS g, CONTRACTS v INNER JOIN CIOCSBK.dbo.SYM_CONTRACT_EXTENSION e on v.REFERENCE_ID = 'SYM_CONTRACT:'+cast(e.contract_id as varchar(16)) INNER JOIN SYM_PERSON_EXT p on e.BD_ALT_EMAIL = p.EMAIL and replace(replace(e.BD_ALT_PHONE,' ',''),'-','') = replace(replace(replace(replace(p.Phone,'-',''),' ',''),'(',''),')','')
   WHERE g.VALUE_CODE = 'C_PER_CONTRACT' AND isNull(e.BD_ALT_EMAIL,'') <> '' and p.idx = 1

   INSERT INTO [dbo].[GROUP_CONTRACTS] ([GROUP_IDF],[CONTRACT_IDF],[CONTACT_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[EFFECTIVE_START_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS]
      ,[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[POSITION_ORDER],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[APPLICATION_IDF],[DOCUMENT_IDF] )
   SELECT g.IDF, c.IDF, NULL, 'Qualified Contract ('+ d.VALUE_CODE +') of Contract No: ' + c.CONTRACT_NO, d.CATEGORY_CODE, d.VALUE_CODE,'',c.CREATED_DATE, g.[STATUS_CODE],g.[STATUS_DATE],'Created to track the contracts on contract area',
      'C_ORGANIZATION', c.CONTRACTOR_IDF,c.NAME_CODE +':' + c.EMAIL_ADDRESS,c.QUALIFIED_AREA_MASKED_IDR, 1,c.[CREATED_DATE],c.[CREATED_BY],c.[UPDATED_DATE],c.[UPDATED_BY],c.[UPDATED_COUNT],c.[ACCESS_LEVEL],c.[VERSION], c.APPLICATION_IDF,NULL
   FROM [dbo].[CONTRACTS] c INNER JOIN [dbo].[REF_NITAAC_DEFINITIONS] d on c.APPLICATION_IDF = d.APPLICATION_IDF and dbo.fn_IsMasked(c.QUALIFIED_AREA_MASKED_IDR,d.VALUE_CODE) > 0, [dbo].[CODE_GROUPS] g
   WHERE g.VALUE_CODE = 'C_GRP_CONTRACT' and d.CATEGORY_CODE = 'C_CONTRACT' and c.QUALIFIED_AREA_MASKED_IDR > 0

Print '------------- Data Migration  [dbo].[sc_Contract]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_CLINS]
----
-------------
Print '------------- Data Migration  [dbo].[sc_CLINS]  -----START: ' + cast(GetDate() as varchar(24))

--- Build the NITAAC  CLINS
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

--- GSS   --- INCORRECT OR CORRUPTED OEM_PART_NUM (SUPPOSED TO BE REAL ONE INTEAD FAKE ONES, TDB INSTEAD, USE NITAAC CLIN

---SELECT OEM_PART_NUM,Count(*) from CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT where isnull(NITAAC_PARENT_CLIN,'') ='' and isNull(OEM_PART_NUM,'')<>'' Group By OEM_PART_NUM
--SELECT NITAAC_CLIN,Count(*) from CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT where isnull(NITAAC_PARENT_CLIN,'') ='' and isNull(NITAAC_CLIN,'')<>'' Group By NITAAC_CLIN


INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[OEM_PART_URL],[SPECIFICATION],[QUANTITY],[UOM],[OEM_PRICE], [PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT],[REFERENCE_CODE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDF('CLIN',s.CREATED_WHEN), c.PARENT_IDF, c.IDF, s.[OEM_MFR_NAME], s.[OEM_PART_NUM],s.[OEM_SPECIFICATION_LINK],s.[ITEM_SPECIFICATIONS],1,'BASE SET', isNull(s.CATALOG_UNIT_PRICE,0.0), isNull(s.DISCOUNTED_UNIT_PRICE,0.0),left(s.[ITEM_NAME],128),'C_GSS_BASE',s.[CONFIGURATION_TYPE_CODE],left(s.ITEM_NAME,256), 1,d.[REFERENCE_CODE],'Migrated From GSS_SOLUTION_PRODUCT On Date: '+cast(@v_SDate as varchar(16)),s.[NITAAC_CLIN], 'GSS_SOLUTION_PRODUCT:'+cast(s.ID as varchar(16)), @v_STATUS, @v_SDATE, 1, s.[CREATED_WHEN],s.[CREATED_BY],s.[MODIFIED_WHEN],s.[MODIFIED_BY], 1, 744,'VERSION:'+CAST(s.[VERSION] as varchar(16))
FROM CIOCSBK.[dbo].[GSS_SOLUTION_PRODUCT_EXT] s INNER JOIN [dbo].REF_NITAAC_DEFINITIONS d on replace(d.ACRONYM_NAME,'R1','T2') = s.CONFIGURATION_TYPE_CODE inner join  REF_NITAAC_CATEGORY_COMMODITY c on c.VALUE_CODE = d.REFERENCE_CODE
WHERE isnull(s.NITAAC_PARENT_CLIN,'') ='' and d.CATEGORY_CODE = 'C_GSS'

--- Track all errors
--- deal with OEM_PART_NUM
select @v_IDF = IDF from CODE_ERRORS WHERE VALUE_CODE = 'C_ERR_DAT_GS'
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT   'Missing OEM_PART_NUM','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_PN','All CLIN Must be based on an unique OEM_PART_NUM along with OEM_MFR_NAMe','REM: Must Collect OEM_PART_NUM during the review',NULL
         ,@v_STATUS,@v_SDATE, 'CMT: ','C_GSS','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE isNull(OEM_PART_NUM,'') = ''
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE]
          ,[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT     'Bad OEM_PART_NUM format and length < 128 ','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_PN'
           ,'OEM_PART_NUM mush be in right format','REM: Must Collect OEM_PART_NUM during the review',NULL
           ,@v_STATUS,@v_SDATE, 'CMT: ','C_GSS','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE OEM_PART_NUM is not null and (Len(OEM_PART_NUM) > 128 or charIndex('TDB',OEM_PART_NUM) > 0 or charIndex(';',OEM_PART_NUM) > 0)

--- Item CLIN
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE]
          ,[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT        'Bad ITEM_NAME as CLIN NAME with length < 128 ','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_ITEM_NAME'
           ,'ITEM_NAME should be a proper name','REM: Please use description for further detail, contractor specification for vendor version of tech specs',NULL
           ,@v_STATUS,@v_SDATE, 'CMT: need to change ','C_GSS','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE len(ITEM_NAME) > 120

INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE]
          ,[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT        'Missing Vendor version Tech Specs ','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_ITEM_SPEC'
           ,'Vendor may reuse OEM Tech Specs, must submit OEM Tech SPECS','REM: contractor may have its own tech spec in addition to oem specs',NULL
           ,@v_STATUS,@v_SDATE, 'CMT: need to change ','C_GSS','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE isNull(ITEM_SPECIFICATIONS,'') = ''
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE]
          ,[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT        'Wrong Configuration Code: T2 or L5 ','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_CODE'
           ,'Use R1 is stead of T2, and D4 instead of L5','REM: Current Code is not proper defined. it needs to be change please see ref_nitaac_definitions for GSS',NULL
           ,@v_STATUS,@v_SDATE, 'CMT: need to change ','','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE CONFIGURATION_TYPE_CODE in ('T2','L5')
INSERT INTO [OWN_ERRORS]([NAME_CODE],[VALUE_CODE],[SEVERITY_CODE],[CATEGORY_CODE],[TYPE_CODE]
          ,[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[BASE_IDF])
SELECT        'BAD SOLUTION TYPE: ','C_ERR_DAT_GS','C_FATAL','C_MIGRATION','C_FIX_CODE'
           ,'Should use the standard Solution Type as code < 16','REM: use Component code: REQUIRED, OPTION, ALTERNATIVE, etc ',NULL
           ,@v_STATUS,@v_SDATE, 'CMT: need to change ','','GSS_SOLUTION_PRODUCT:'+CAST(ID as varchar(16)),'GSS_SOLUTION_PRODUCT:NITAAC_CLIN:'+NITAAC_CLIN,@v_SDATE, @v_USER, @v_IDF
FROM CIOCSBK.dbo.GSS_SOLUTION_PRODUCT_EXT WHERE len(solution_type) > 16
----- correct corrupted data
INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[OEM_PART_URL],[SPECIFICATION],[QUANTITY],[UOM],[OEM_PRICE], [PRICE]
        ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],[OWNER_COUNT],[PARENT_IDF],[PARENT_CODE] ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDF('CLIN',s.CREATED_WHEN), p.CATEGORY_IDF, p.COMMODITY_IDF, isNull(s.[OEM_MFR_NAME],p.[OEM_MFR_NAME]), left(s.[OEM_PART_NUM],128),s.[OEM_SPECIFICATION_LINK],isNull(s.[ITEM_SPECIFICATIONS],s.Item_NAME),1,'COMPONENT', isNull(s.CATALOG_UNIT_PRICE,0.0), isNull(s.DISCOUNTED_UNIT_PRICE,0.0)
       ,left(s.[ITEM_NAME],128),'C_GSS_COMPONENT',s.[CONFIGURATION_SUBTYPE_CODE],p.[REFERENCE_CODE],left(s.[ITEM_NAME],256), 1, p.IDF, 'C_BASE_SET','Migrated From On Date: '+cast(@v_SDate as varchar(16)),s.[NITAAC_CLIN], 'GSS_SOLUTION_PRODUCT:'+cast(s.ID as varchar(16)), @v_STATUS, @v_SDATE, 1, s.[CREATED_WHEN],s.[CREATED_BY],s.[MODIFIED_WHEN],s.[MODIFIED_BY], s.[VERSION], 744,'VERSION:'+CAST(s.[VERSION] as varchar(16))
FROM CIOCSBK.[dbo].[GSS_SOLUTION_PRODUCT_EXT] s INNER JOIN [dbo].[REF_NITAAC_CLINS] p on s.NITAAC_PARENT_CLIN = p.REFERENCE_ID
WHERE  s.NITAAC_PARENT_CLIN is not null
--- Fill In COMMODITY CLINS
INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_CLINS]([CLIN_IDF],[CONTRACTOR_PARENT_CLIN_ID],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION],[IMAGE_URL]
       ,[TRP_IDF],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
       ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE],[WARRANTY],[WARRANTY_IDR],[DELIVERY_PERIOD],[WEIGHT],[SIZE]
       ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY
       ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
SELECT  r.[IDF], r.PARENT_IDF, r.[CATEGORY_IDF],r.[COMMODITY_IDF], s.NITAAC_CLIN,r.[OEM_MFR_NAME],r.[OEM_PART_NUM],r.SPECIFICATION,c.IDF, c.CONTRACT_NO, c.CONTRACTOR_IDF, c.NAME_CODE, NULL, s.[ITEM_SPECIFICATIONS],s.[PICTURE_FILENAME]
        ,NULL, NULL,[CATALOG_UNIT_PRICE],[DISCOUNTED_UNIT_PRICE],[DISCOUNTED_UNIT_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],r.UOM,r.QUANTITY, NULL,NULL
        ,NULL,CASE WHEN [ENERGY_STAR_COMPLIANT] = 'Y' THEN 1 ElSE 0 END,CASE WHEN [EPEAT_COMPLIANT] = 'Y' THEN 1 ElSE 0 END,CASE WHEN [TAA_COMPLIANT] = 'Y' THEN 1 ElSE 0 END,CASE WHEN [ACT_508_COMPLIANT] = 'Y' THEN 1 ElSE 0 END, NULL,NULL,NULL,NULL,[WARRANTY],case when isNull([WARRANTY],'') <> '' THEN 1 ELSE 0 END, cast([DELIVERY_TIME] as varchar(26)),s.[WEIGHT],'SIZE:N/A'
        ,LEFT(s.[SOLUTION_TYPE],16),NULL,NULL,r.[NAME_CODE],r.[CATEGORY_CODE],r.[TYPE_CODE], r.[REFERENCE_CODE], r.[DESCRIPTION],'YEAR ONE', [YEAR1_GOVERNMENT_QUANTITY]
        ,'Migrated From On Date: '+cast(@v_SDate as varchar(16)),s.[NITAAC_CLIN], 'GSS_SOLUTION_PRODUCT:'+cast(s.ID as varchar(16)),1,CASE WHEN isNull(s.[ACTIVE_FLAG],0) = 1 THEN @v_STATUS ELSE 'INACTIVE' END, @v_SDATE, s.[CREATED_WHEN],s.[CREATED_BY],s.[MODIFIED_WHEN],s.[MODIFIED_BY],s.VERSION,@v_SDATE,@v_USER,@v_SDATE,@v_USER, 744,s.ID, 'VERSION'+CAST(s.VERSION as varchar(16))
FROM CIOCSBK.[dbo].[GSS_SOLUTION_PRODUCT_EXT] s INNER JOIN REF_NITAAC_CLINS r on s.NITAAC_CLIN = r.REFERENCE_ID INNER JOIN dbo.CONTRACTS c on s.CONTRACT_NO = c.[CONTRACT_NO]

UPDATE  cc SET PARENT_IDF = p.CLIN_IDF, CONTRACTOR_PARENT_CLIN_ID = p.CONTRACTOR_CLIN_ID, PARENT_CODE = 'C_OPTION' --- REF_NITAAC_CLIN parent clin
FROM [dbo].[REF_NITAAC_CONTRACTOR_CLINS] cc INNER JOIN CIOCSBK.[dbo].[GSS_SOLUTION_PRODUCT_EXT] s on  s.NITAAC_CLIN = cc.CONTRACTOR_CLIN_ID  ---cc.REFERENCE_NAME = 'GSS_SOLUTION_PRODUCT:'+cast(s.ID as varchar(16))
LEFT JOIN [dbo].[REF_NITAAC_CONTRACTOR_CLINS] p on  s.NITAAC_PARENT_CLIN  = p.CONTRACTOR_CLIN_ID
WHERE isNull(s.NITAAC_PARENT_CLIN,'') = ''


INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS]( [CLIN_IDF],[CONTRACT_IDF],[CONTRACTOR_CLIN_ID],[OFFER_TYPE_IDF],[PARENT_CLIN_IDF],[ACCESS_LEVEL],[VERSION]
      ,[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
      ,[OS_SPECS]       ,[OS_CODE]       ,[OS_CLIN_IDF]
      ,[RAM_SPECS]      ,[RAM_CODE]      ,[RAM_UPGRADE]  ,[RAM_CLIN_IDF]
      ,[HARD_DRIVE_SPECS],[HARD_DRIVE_CLIN_IDF]
      ,[GRAPHIC_SPECS]   ,[GRAPHIC_UPGRADE_SPECS]  ,[GRAPHIC_CLIN_IDF]
      ,[DISPLAY_SIZE]    ,[DISPLAY_CLIN_IDF]   ,[DISPLAY_RESOLUTION]
      ,[DOCKING_STATION_SPECS] ,[DOCKING_STATION_CLIN_IDF]
      ,[SOUND_SPECS]     ,[SOUND_CLIN_IDF]     ,[SPEAKER_SPECS] ,[SPEAK_CLIN_IDF]
      ,[OPTICAL_DRIVE_SPECS] ,[OPTICAL_DRIVE_CLIN_IDF]
      ,[KEYBOARD_SPECS]      ,[KEYBOARD_CLIN_IDF]
      ,[MOUSE_SPECS]      ,[MOUSE_CLIN_IDF]
      ,[WEBCAM_SPECS]     ,[WEBCAM_CLIN_IDF]
      ,[MICROPHONE_SPECS]  ,[MICROPHONE_CLIN_IDF]
      ,[BLUETOOTH_SPECS]   ,[SMART_CARD_READER_SPECS] ,[SMART_CARD_READER_CLIN_IDF]
      ,[NETWORK_INTERFACE_SPECS] ,[NETWORK_INTERFACE_CLIN_IDF]
      ,[PORT_SPECS]  ,[EXPANSION_SLOTS]
      ,[PLATFORM_INTEGRITY_SPECS] ,[PLATFORM_INTEGRITY_CLIN_IDF]
      ,[TRACKPAD_SPECS],[TRACKPAD_IDF] )
SELECT p.CLIN_IDF,  p.CONTRACT_IDF, s.NITAAC_CLIN, NULL, p.PARENT_IDF, p.ACCESS_LEVEL, p.VERSION
      ,p.Price,p.NAME_CODE,p.CATEGORY_CODE,p.TYPE_CODE,s.SOLUTION_TYPE
      ,s.[OS_SPECS],NULL,NULL
      ,s.[RAM_SPECS],NULL ,s.[RAM_UPGRADE]  ,NULL
      ,s.[HARD_DRIVE_SPECS],NULL
      ,s.[GRAPHIC_SPECS],s.[GRAPHICS_UPGRADE_SPECS],NULL
      ,s.[DISPLAY_SIZE],NULL,s.[DISPLAY_RESOLUTION]
      ,s.[DOCKING_STATION],NULL
      ,s.[SOUND_SPECS],NULL,s.[SPEAKER_SPECS],NULL
      ,s.[OPTICAL_DRIVE_SPECS],NULL
      ,s.[KEYBOARD_SPECS],NULL
      ,s.[MOUSE_SPECS],NULL
      ,s.[WEBCAM_SPECS],NULL
      ,s.[MICROPHONE_SPECS],NULL
      ,s.[BLUETOOTH_SPECS],s.[SMART_CARD_READER_SPECS],NULL
      ,s.[NETWORK_INTERFACE_SPECS],NULL
      ,s.[PORT_SPECS],[EXPANSION_SLOTS]
      ,s.[PLATFORM_INTEGRITY_SPECS],NULL
      ,s.[TRACKPAD_SPECS],NULL
FROM CIOCSBK.[dbo].[GSS_SOLUTION_PRODUCT_EXT] s INNER JOIN [dbo].[REF_NITAAC_CONTRACTOR_CLINS] p on p.REFERENCE_NAME = 'GSS_SOLUTION_PRODUCT:'+cast(s.ID as varchar(16))

UPDATE REF_NITAAC_CONTRACTOR_GSS_CLINS SET RAM_CODE = dbo.fn_match(RAM_SPECS,default,'2GB;4 GB;4GB;6GB;8GB;8 GB;12GB;12 GB;16GB;32GB;64GB;128GB;256GB') where isnull(RAM_SPECS,'') <> ''
UPDATE REF_NITAAC_CONTRACTOR_GSS_CLINS SET HARD_DRIVE_CODE = dbo.fn_match(HARD_DRIVE_SPECS,default,'32GB;64GB;64 GB;128GB;128 GB;180GB;180 GB;250GB;256 GB;256GB;500GB;500 GB;512GB;512 GB;1TB;1.5TB') where isnull(HARD_DRIVE_SPECS,'') <> ''
UPDATE s SET WEIGHT_CODE = dbo.fn_Match(replace(replace(replace(p.weight,'lb','^'),'ib','^'),'po','^'),'^','C_FIRST_NUMBER')
FROM  REF_NITAAC_CONTRACTOR_GSS_CLINS s INNER JOIN [dbo].[REF_NITAAC_CONTRACTOR_CLINS] p on s.CLIN_IDF = p.CLIN_IDF where isnull(p.WEIGHT,'') <> ''
UPDATE REF_NITAAC_CONTRACTOR_GSS_CLINS SET PROCESSOR_CODE = dbo.fn_match(SPECIFICATIONS, default,'i3;i5;i7;i9') where isnull(SPECIFICATIONS,'') <>''
Update REF_NITAAC_CONTRACTOR_GSS_CLINS SET DISPLAY_CODE = dbo.fn_Match(replace(replace(replace(replace(replace(display_size, ' cm','cm'),'”','^'),'"','^'),'-','^'),'(','^'),'^','C_FIRST_NUMBER') + '"' where isnull(display_size,'') <> ''
Update REF_NITAAC_CONTRACTOR_GSS_CLINS SET OS_CODE = replace(dbo.fn_match(replace(replace(replace(replace(replace(os_specs,'Windows ','Win'),';',' '),'Win ','Win'),'8.1','81'),'OS X','OSX'),default,'Win10;Win7;Win81;OSX;'),'81','8.1') where isNull(os_specs,'') <> ''
--- set back category/type
UPDATE r SET CATEGORY_CODE = LEFT(VALUE_CODE,8), TYPE_CODE = 'C_' + RIGHT(VALUE_CODE,5)
FROM REF_NITAAC_CLINS r INNER JOIN REF_NITAAC_CATEGORY_COMMODITY c on r.COMMODITY_IDF = c.IDF

---- fix one user
Update CIOCSBK.[dbo].[TRP_NEW] set SUBMITTED_BY = 'Mike.Baker@norseman.com' where SUBMITTED_BY = 'mbaker@norseman.com'
INSERT INTO [dbo].[REF_CONTRACTOR_TRPS]([IDF],[CONTACT_IDF],[CONTRACTOR_IDF],[SUBMIT_DATE],[SUBMITTER_IDF],[CONTRACT_IDF],[WITHDRAWN_IDR],[POC_IDF]
           ,[NAME_CODE],[VALUE_CODE],[ACTION_CODE],[ACTION_DATE],[REASON_CODE],[CLIN_COUNT],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[CONTRACTOR_NOTE_TEXT],[NITAAC_NOTE_TEXT],[BODY_TEXT]
           ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[DOCUMENT_IDR],[REQUEST_UPDATE_IDR],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION]
          ,[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[PROPOSAL_IDF],[PARENT_IDF],[PARENT_CODE])
SELECT dbo.fn_NewIDFEXT('TRP',t.Created_when, right(t.trp_id,12)), ct.CONTACT_IDF, ct.CONTRACTOR_IDF, t.SUBMIT_DATE, e.IDF, ct.IDF,t.[CANCELLED],dbo.fn_GetMapIDF(dbo.fn_GetIDF(poc,'C_PERSON'),'C_USER')
                 ,t.[CLINS_FILENAME],t.trp_id,'C_SUBMISSION',t.CREATED_WHEN,Right(ct.CONTRACT_NO,14),isnull(t.[SUBMIT_COUNT],0),case when isnull(t.RFQ_NO,'') = '' THEN 'C_TRP_SUBMIT' ELSE 'C_PROPOSAL' END, 'C_', t.[VENDOR_TRP_REF_NO],t.[VENDOR_SUBMITTED_COMMENTS],t.RFQ_NO,NULL
         ,t.Created_When, NULL, case when isNull(t.[CLINS_FILENAME],'')='' THEN 0 ELSE 1 END, case when t.[CLIN_INVENTORY_UPDATE_FLAG] = '1' THEN 1 else 0 END,t.[TRP_STATUS],t.Modified_when, 'Migrated From TRP_NEW on Date:', 'TRP_NEW:'+t.TRP_ID,t.[COMPANY],t.[CREATED_WHEN],t.[CREATED_BY],t.[MODIFIED_WHEN],t.[MODIFIED_BY],t.[VERSION],744, 'VERSION:'+cast(t.version as varchar(6))
         ,NULL,[UNDER_REVIEW_BY],NULL,t.[CERTIFIED_BY], NULL, NULL, left(replace(replace(replace(t.[RFQ_NO],'CS-',''),' ',''),'RFQ',''),16)
FROM CIOCSBK.[dbo].[TRP_NEW] t INNER JOIN CIOCSBK.[dbo].[CS_CONTRACT] c on t.vendor_id = c.vendor_id INNER JOIN CONTRACTS ct on ct.REFERENCe_ID = 'SYM_CONTRACT:'+ cast(c.Contract_ID as varchar(12))
       INNER JOIN USERS e on e.UserName = t.SUBMITTED_BY

GO
/*
if DB_NAME() = 'NEOSDEV'
   DBCC SHRINKFILE('NEOSDEV_log', 1)
ELSE
   DBCC SHRINKFILE('NEOSMG_log', 1)
GO
------Start CS Data Migration
if OBJECT_ID('CIOCSBK.dbo.REF_NITAAC_CLINS_EXT') is Null
BEGIN
        Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

        if OBJECT_ID('Tempdb..#tmpClin')  is not null drop table #tmpClin
        if OBJECT_ID('Tempdb..#tmpClin2') is not null drop table #tmpClin2
        Create Table #tmpClin  (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, Cnt int null)
        Create Table #tmpClin2 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, Cnt int null)

        INSERT INTO #tmpClin(PN, MFR, CNT)
        Select OEM_PART_NUM, OEM_MFR_NAME, 1 from CIOCSBK.dbo.COMMODITY_CLINS where isnull(OEM_PART_NUM, '') <> '' and isNull(OEM_MFR_NAME,'') <> ''  and status = 'Pass' Group by OEM_PART_NUM, OEM_MFR_NAME having count(*) = 1

        UPDATE t set CNT = 0
        FROM #tmpCLIN t INNER JOIN REF_NITAAC_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT],[REFERENCE_CODE]
          ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT dbo.fn_NewIDFExt('CLIN',c.CREATED_WHEN, cast(c.id as varchar(12))), m.PARENT_IDF, m.IDF, c.OEM_MFR_NAME, c.OEM_PART_NUM, c.TIS, c.QUANTITY, c.UNIT, c.CS_PRICE ,c.OEM_PART_NUM,m.PARENT_CODE,m.VALUE_CODE, c.OEM_MFR_NAME, l.cnt, m.VALUE_CODE
          ,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'COMMODITY_CLINS:'+cast(c.id as varchar(16)),'COMMODITY_CLINS:'+ c.Vendor_CLIN_ID,'ACTIVE', c.APPROVE_DATE,1,c.CREATED_WHEN,c.CREATED_BY, c.MODIFIED_WHEN, c.MODIFIED_BY,c.VERSION,'VERSION:'+CAST(c.VERSION as varchar(16))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on m.REFERENCE_ID = c.COMMODITY_ID INNER JOIN #tmpClin l on l.PN = c.OEM_PART_NUM and c.OEM_MFR_NAME = l.MFR
        WHERE c.STATUS = 'Pass' and isnull(c.OEM_PART_NUM, '') <> '' and isNull(c.OEM_MFR_NAME,'') <> '' and l.cnt > 0

        INSERT INTO #tmpClin2(PN, MFR, CNT)
        Select OEM_PART_NUM, OEM_MFR_NAME, count(*) from CIOCSBK.dbo.COMMODITY_CLINS where isnull(OEM_PART_NUM, '') <> '' and isNull(OEM_MFR_NAME,'') <> ''  and status = 'Pass' Group by OEM_PART_NUM, OEM_MFR_NAME having count(*) > 1

        UPDATE t set ID  = (Select TOP 1 ID from  CIOCSBK.dbo.COMMODITY_CLINS where t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and STATUS = 'PASS')
        FROM #tmpCLIN2 t INNER JOIN CIOCSBK.dbo.COMMODITY_CLINS c on t.PN =  c.OEM_PART_NUM AND t.MFR =  c.OEM_MFR_NAME

        UPDATE t set CNT = 0
        FROM #tmpCLIN2 t INNER JOIN REF_NITAAC_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT],[REFERENCE_CODE]
          ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT dbo.fn_NewIDFExt('CLIN',c.CREATED_WHEN, cast(c.id as varchar(12))), m.PARENT_IDF, m.IDF, c.OEM_MFR_NAME, c.OEM_PART_NUM, c.TIS, c.QUANTITY, c.UNIT, c.CS_PRICE,c.OEM_PART_NUM,m.PARENT_CODE,m.VALUE_CODE, c.OEM_MFR_NAME, l.cnt ,m.VALUE_CODE
          ,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'COMMODITY_CLINS:'+cast(c.id as varchar(16)),'COMMODITY_CLINS:'+ c.Vendor_CLIN_ID,'ACTIVE', c.APPROVE_DATE,1,c.CREATED_WHEN,c.CREATED_BY, c.MODIFIED_WHEN, c.MODIFIED_BY,c.VERSION,'VERSION:'+CAST(c.VERSION as varchar(16))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on m.REFERENCE_ID = c.COMMODITY_ID INNER JOIN #tmpClin2 l on c.ID = l.ID and l.MFR = c.OEM_MFR_NAME and l.PN = c.OEM_PART_NUM
        WHERE c.STATUS = 'Pass' and l.CNT > 0

        SELECT * INTO CIOCSBK.dbo.REF_NITAAC_CLINS_EXT FROM [dbo].[REF_NITAAC_CLINS]
        if OBJECT_ID('Tempdb..#tmpClin')  is not null drop table #tmpClin
        if OBJECT_ID('Tempdb..#tmpClin2') is not null drop table #tmpClin2
END
ELSE
BEGIN
        INSERT INTO REF_NITAAC_CLINS([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT]
         ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT e.[IDF], m.[PARENT_IDF],m.[IDF],e.[OEM_MFR_NAME],e.[OEM_PART_NUM],e.[SPECIFICATION],e.[QUANTITY],e.[UOM],e.[PRICE],e.[NAME_CODE],e.[CATEGORY_CODE],e.[TYPE_CODE],e.[DESCRIPTION],e.[OWNER_COUNT]
         ,e.[COMMENTS],e.[REFERENCE_ID],e.[REFERENCE_NAME],e.[STATUS_CODE],e.[STATUS_DATE],e.[VERIFICATION_IDR],e.[CREATED_DATE],e.[CREATED_BY], e.[UPDATED_DATE],e.[UPDATED_BY],e.[UPDATED_COUNT],e.[VERSION]
        FROM CIOCSBK.dbo.REF_NITAAC_CLINS_EXT e INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on e.TYPE_CODE = m.VALUE_CODE
        WHERE e.REFERENCE_ID like 'COMMODITY_CLINS:%'
END
----
GO
if DB_NAME() = 'NEOSDEV'
   DBCC SHRINKFILE('NEOSDEV_log', 1)
ELSE
   DBCC SHRINKFILE('NEOSMG_log', 1)
GO
------Start CS Data Migration
if OBJECT_ID('CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT') is Null
BEGIN
        Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

        if OBJECT_ID('Tempdb..#tmpClin3') is not null drop table #tmpClin3
        if OBJECT_ID('Tempdb..#tmpClin4') is not null drop table #tmpClin4
        Create Table #tmpClin3 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, VID int null, Cnt int null)
        Create Table #tmpClin4 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, VID int null, Cnt int null)

        INSERT INTO #tmpClin3(PN, MFR, VID, CNT)
        select oem_part_num, oem_mfr_name, vendor_id, 1 from CIOCSBK.dbo.Commodity_Clins  where status = 'Pass' Group by oem_part_num, oem_mfr_name, vendor_id having count(*) = 1

        UPDATE t set CNT = 0
        FROM #tmpCLIN3 t INNER JOIN REF_NITAAC_CONTRACTOR_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = t.VID
        INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) and ct.IDF = c.CONTRACT_IDF
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_CLINS]([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT n.IDF,n.[CATEGORY_IDF], n.[COMMODITY_IDF],c.VENDOR_CLIN_ID,n.[OEM_MFR_NAME],n.[OEM_PART_NUM],n.[SPECIFICATION],ct.IDF, ct.CONTRACT_NO,ct.CONTRACTOR_IDF, c.[Vendor_name], c.[VENDOR_COMMENTS], isNULL(c.VENDOR_DESCRIPTION, c.[TIS])
              ,r.IDF, r.[VALUE_CODE], c.SUBMIT_DATE, c.CATALOG_PRICE, c.CS_PRICE, NULL,c.[CS_DISCOUNT_RATE], NULL, NULL,c.[UNIT],c.[QUANTITY],NULL, c.[GSA_SCHED_PRICE]
              ,NULL,CASE c.[ENERGY_STAR_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[EPEAT_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[TAA_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END,NULL,NULL,c.[COUNTRY_OF_ORIGIN], CASE c.[AUTHORIZED_TO_SALE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, NULL
              ,NULL,c.[CLIN_ACTION],c.[SUBMIT_DATE], NULL, case when c.edited = 1 THEN 'C_UPDATE' ELSE 'C_INITAL' END, n.TYPE_CODE, n.REFERENCE_CODE, NULL, NULL, 1,c.[ST_NOTES],c.[ST_DECISION_REASON],c.[ST_REVIEWER_COMMENTS]
              ,'Migrated From COMMODITY_CLINS on date', 'COMMODITY_CLINS:'+cast(c.ID as varchar(12)), c.[VENDOR_NAME] + ': CLINS', case when c.Approve_ID is null then 0 else 1 end, 'ACTIVE', c.Created_When, c.[CREATED_WHEN], c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY],c.[VERSION], c.[APPROVE_DATE],c.[APPROVED_BY], 744, 1, 'VERSION:'+Cast(c.Version as varchar(4))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN  #tmpClin3 t on  t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and vendor_id = t.VID INNER JOIN [dbo].[REF_NITAAC_CLINS] n  on c.OEM_PART_NUM = n.OEM_PART_NUM and c.OEM_MFR_NAME = n.OEM_MFR_NAME -- and n.REFERENCE_ID = 'COMMODITY_CLINS:'+ cast(c.id as varchar(16))
        INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = c.[VENDOR_ID] INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) LEFT JOIN REF_CONTRACTOR_TRPS r on r.REFERENCE_ID = 'TRP_NEW:'+ c.TRP_ID
        WHERE c.STATUS = 'Pass'  and ct.STATUS_CODE = 'ACTIVE' and t.CNT > 0
        CHECKPOINT
        INSERT INTO #tmpClin4(PN, MFR, VID, CNT)
        select oem_part_num, oem_mfr_name, vendor_id, count(*) from CIOCSBK.dbo.Commodity_Clins  where status = 'Pass' Group by oem_part_num, oem_mfr_name, vendor_id having count(*) > 1

        UPDATE t set ID  = (Select TOP 1 ID from  CIOCSBK.dbo.COMMODITY_CLINS where t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and vendor_id = t.CNT and STATUS = 'PASS')
        FROM #tmpCLIN4 t INNER JOIN CIOCSBK.dbo.COMMODITY_CLINS c on t.PN =  c.OEM_PART_NUM AND t.MFR =  c.OEM_MFR_NAME and c.vendor_id = t.cnt

        UPDATE t set CNT = 0
        FROM #tmpCLIN4 t INNER JOIN REF_NITAAC_CONTRACTOR_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = t.VID
        INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) and ct.IDF = c.CONTRACT_IDF
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_CLINS]([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT n.IDF,n.[CATEGORY_IDF], n.[COMMODITY_IDF],c.VENDOR_CLIN_ID,n.[OEM_MFR_NAME],n.[OEM_PART_NUM],n.[SPECIFICATION],ct.IDF, ct.CONTRACT_NO,ct.CONTRACTOR_IDF, c.[Vendor_name], c.[VENDOR_COMMENTS], isNULL(c.VENDOR_DESCRIPTION, c.[TIS])
              ,r.IDF,r.[VALUE_CODE],c.SUBMIT_DATE, c.CATALOG_PRICE, c.CS_PRICE, NULL,c.[CS_DISCOUNT_RATE], NULL, NULL,c.[UNIT],c.[QUANTITY],NULL, c.[GSA_SCHED_PRICE]
              ,NULL,CASE c.[ENERGY_STAR_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[EPEAT_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[TAA_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END,NULL,NULL,c.[COUNTRY_OF_ORIGIN], CASE c.[AUTHORIZED_TO_SALE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, NULL
              ,NULL,c.[CLIN_ACTION],c.[SUBMIT_DATE], NULL, case when c.edited = 1 THEN 'C_UPDATE' ELSE 'C_INITAL' END, n.TYPE_CODE, n.REFERENCE_CODE, NULL, NULL, 1,c.[ST_NOTES],c.[ST_DECISION_REASON],c.[ST_REVIEWER_COMMENTS]
              ,'Migrated From COMMODITY_CLINS on date', 'COMMODITY_CLINS:'+cast(c.ID as varchar(12)), c.[VENDOR_NAME] + ': CLINS', case when c.Approve_ID is null then 0 else 1 end, 'ACTIVE', c.Created_When, c.[CREATED_WHEN], c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY],c.[VERSION], c.[APPROVE_DATE],c.[APPROVED_BY], 744, 1, 'VERSION:'+Cast(c.Version as varchar(4))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN  #tmpClin4 t on c.id = t.id INNER JOIN [dbo].[REF_NITAAC_CLINS] n  on c.OEM_PART_NUM = n.OEM_PART_NUM and c.OEM_MFR_NAME = n.OEM_MFR_NAME -- and n.REFERENCE_ID = 'COMMODITY_CLINS:'+ cast(c.id as varchar(16))
        INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = c.[VENDOR_ID] INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) LEFT JOIN REF_CONTRACTOR_TRPS r on r.REFERENCE_ID = 'TRP_NEW:'+ c.TRP_ID
        WHERE c.STATUS = 'Pass'  and ct.STATUS_CODE = 'ACTIVE' and t.CNT > 0
        CHECKPOINT
        SELECT * INTO CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT FROM [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
        if OBJECT_ID('Tempdb..#tmpClin3') is not null drop table #tmpClin3
        if OBJECT_ID('Tempdb..#tmpClin4') is not null drop table #tmpClin4
END
ELSE
BEGIN
        INSERT INTO REF_NITAAC_CONTRACTOR_CLINS([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT isnull(b.IDF, e.[CLIN_IDF]),m.[PARENT_IDF],m.[IDF], e.CONTRACTOR_CLIN_ID,e.[OEM_MFR_NAME],e.[OEM_PART_NUM],e.[TIS_SPECIFICATION],c.[IDF],e.[CONTRACT_NO],c.[CONTRACTOR_IDF],e.[CONTRACTOR_NAME],e.[CONTRACTOR_NOTE_TEXT],e.[CONTRACTOR_CLIN_SPECIFICATION]
              ,t.[IDF],e.[TRP_CODE],e.[SUBMIT_DATE],e.[CATALOG_PRICE],e.[PRICE],e.[DISCOUNTED_PRICE],e.[DISCOUNT_RATE],e.[DISCOUNT_PERCENTAGE],e.[DISCOUNTED_EXTENDED_PRICE],e.[UOM],e.[QUANTITY],e.[GSA_SCHED_CONTRACT_NUM],e.[GSA_SCHED_PRICE]
              ,e.[NUM_ASSOC_ELA],e.[ENERGY_STAR_COMPLIANCE_IDR],e.[EPEAT_COMPLIANCE_IDR],e.[TAA_COMPLIANCE_IDR],e.[ACT_508_COMPLIANCE_IDR],e.[OMB_COMPLIANCE_IDR],e.[COUNTRY_OF_ORIGIN],e.[AUTHORIZED_TO_SALE_IDR],e.[SHELF_LIFE]
              ,e.[CLIN_COMPONENT_CODE],e.[CLIN_ACTION],e.[ACTION_DATE],e.[NAME_CODE],e.[CATEGORY_CODE],e.[TYPE_CODE],e.[DESCRIPTION],e.INITIAL_PERIOD, e.INITIAL_GOVERNMENT_QUANTITY,e.[NITAAC_NOTE_TEXT],e.[NITAAC_DECISION_REASON],e.[NITAAC_COMMENTS]
              ,e.[COMMENTS],e.[REFERENCE_ID],e.[REFERENCE_NAME],e.[VERIFICATION_IDR],e.[STATUS_CODE],e.[STATUS_DATE],e.[CREATED_DATE],e.[CREATED_BY],e.[UPDATED_DATE],e.[UPDATED_BY],e.[UPDATED_COUNT],e.[APPROVED_DATE],e.[APPROVED_BY],e.[ACCESS_LEVEL],e.[POSITION_ORDER],e.[VERSION]
        FROM CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT e INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on e.REFERENCE_CODE = m.VALUE_CODE
        INNER JOIN CONTRACTS c on c.CONTRACT_NO = e.CONTRACT_NO INNER JOIN CIOCSBK.dbo.REF_NITAAC_CLINS_EXT n on n.IDF = e.CLIN_IDF LEFT JOIN REF_NITAAC_CLINS b on b.REFERENCE_ID = n.REFERENCE_ID
        LEFT JOIN REF_CONTRACTOR_TRPS t on t.VALUE_CODE = e.TRP_CODE
        WHERE  e.REFERENCE_ID like 'COMMODITY_CLINS:%'
END
---- REF_CONTRACTOR_TRP_CLINS
INSERT INTO [dbo].[REF_CONTRACTOR_TRP_CLINS] ([IDF],[CONTRACTOR_CLIN_ID],[PARENT_IDF],[PARENT_CODE],[CONTRACTOR_PARENT_CLIN_ID],[TRP_IDF],[CONTRACTOR_IDF],[APPROVAL_SEQUENCE_KEY] ,[APPROVAL_SEQUENCE_NUMBER]
           ,[NAME_CODE],[VALUE_CODE] ,[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
           ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUEST_UPDATE_IDR],[CREATED_DATE],[CREATED_BY]
           ,[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION]
           ,[ACTION_CODE],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_PART_NUM],[OEM_MFR_NAME],[OEM_PRICE],[CATALOG_PRICE],[CONTRACT_PRICE],[GSA_SCHED_PRICE],[GSA_SCHED_CONTRACT_NUM],[SPECIAL_PRICE]
           ,[QUANTITY],[UOM],[TIS_SPECIFICATION],[WEIGHT],[WEIGHT_UOM],[SIZE],[SIZE_UOM],[WARRANTY_IDR],[WARRANTY],[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR]
           ,[AUTHORIZED_TO_SALE_IDR],[COUNTRY_OF_ORIGIN],[SHELF_LIFE],[INITIAL_PERIOD],[INITIAL_GOVERNMENT_QUANTITY],[DELIVERY_PERIOD]
           ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_JUSTIFICATiON],[NITAAC_DECISION_REASON],[NITAAC_NOTE_TEXT],[NITAAC_VALIDATION_STATEMENT],[PACKAGE_ONLY_CLIN_IDR])
SELECT t.CLIN_IDF,t.[CONTRACTOR_CLIN_ID],t.[PARENT_IDF],t.[PARENT_CODE],t.[CONTRACTOR_PARENT_CLIN_ID],t.[TRP_IDF],p.[CONTRACTOR_IDF],NULL,NULL --,[APPROVAL_SEQUENCE_KEY] ,[APPROVAL_SEQUENCE_NUMBER]
           ,t.[NAME_CODE],t.[REFERENCE_CODE] ,t.[CATEGORY_CODE],t.[TYPE_CODE],t.[DESCRIPTION]
           ,t.[EFFECTIVE_START_DATE],t.[EFFECTIVE_END_DATE],t.[STATUS_CODE],t.[STATUS_DATE],t.[COMMENTS],t.[REFERENCE_ID],t.[REFERENCE_NAME],t.[VERIFICATION_IDR],p.REQUEST_UPDATE_IDR,t.[CREATED_DATE],t.[CREATED_BY]
           ,t.[UPDATED_DATE],t.[UPDATED_BY],t.[UPDATED_COUNT],t.[REVIEWED_DATE],t.[REVIEWED_BY],t.[APPROVED_DATE],t.[APPROVED_BY],t.[ACCESS_LEVEL],t.[POSITION_ORDER],t.[VERSION]
           ,NULL,t.[CATEGORY_IDF],t.[COMMODITY_IDF],t.[OEM_PART_NUM],t.[OEM_MFR_NAME],CASE WHEN p.OEM_IDR = 1 THEN t.[CATALOG_PRICE] ELSE NULL END,t.[CATALOG_PRICE],t.[PRICE],t.[GSA_SCHED_PRICE],t.[GSA_SCHED_CONTRACT_NUM],t.[DISCOUNTED_PRICE]
           ,t.[QUANTITY],t.[UOM],t.[TIS_SPECIFICATION],t.[WEIGHT],t.[WEIGHT_UOM],t.[SIZE],t.[SIZE_UOM],t.[WARRANTY_IDR],t.[WARRANTY],t.[NUM_ASSOC_ELA],t.[ENERGY_STAR_COMPLIANCE_IDR],t.[EPEAT_COMPLIANCE_IDR],t.[TAA_COMPLIANCE_IDR],t.[ACT_508_COMPLIANCE_IDR],t.[OMB_COMPLIANCE_IDR]
           ,t.[AUTHORIZED_TO_SALE_IDR],t.[COUNTRY_OF_ORIGIN],t.[SHELF_LIFE],t.[INITIAL_PERIOD],t.[INITIAL_GOVERNMENT_QUANTITY],t.[DELIVERY_PERIOD]
           ,t.[CLIN_COMPONENT_CODE],t.[CLIN_ACTION],t.[ACTION_DATE],t.[CONTRACTOR_NOTE_TEXT],NULL,t.[NITAAC_DECISION_REASON],t.[NITAAC_NOTE_TEXT],NULL,t.[PACKAGE_ONLY_CLIN_IDR]
FROM REF_CONTRACTOR_TRPS p INNER JOIN REF_NITAAC_CONTRACTOR_CLINS t on t.TRP_IDF = p.IDF
*/
Print '------------- Data Migration  [dbo].[sc_CLINS]  -----END: ' + cast(GetDate() as varchar(24))
GO
if DB_NAME() = 'NEOSDEV'
   DBCC SHRINKFILE('NEOSDEV_log', 1)
ELSE
   DBCC SHRINKFILE('NEOSMG_log', 1)
GO

      ------------- Data Migration  [dbo].[sc_CLINS_FULL]
-------------  created to skip this step for fast speed  due to the huge number of clins
Print '------------- Data Migration  [dbo].[sc_CLINS_FULL]  -----START: ' + cast(GetDate() as varchar(24))

------Start CS Data Migration
if OBJECT_ID('CIOCSBK.dbo.REF_NITAAC_CLINS_EXT') is Null
BEGIN
        Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

        if OBJECT_ID('Tempdb..#tmpClin')  is not null drop table #tmpClin
        if OBJECT_ID('Tempdb..#tmpClin2') is not null drop table #tmpClin2
        Create Table #tmpClin  (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, Cnt int null)
        Create Table #tmpClin2 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, Cnt int null)

        INSERT INTO #tmpClin(PN, MFR, CNT)
        Select OEM_PART_NUM, OEM_MFR_NAME, 1 from CIOCSBK.dbo.COMMODITY_CLINS where isnull(OEM_PART_NUM, '') <> '' and isNull(OEM_MFR_NAME,'') <> ''  and status = 'Pass' Group by OEM_PART_NUM, OEM_MFR_NAME having count(*) = 1

        UPDATE t set CNT = 0
        FROM #tmpCLIN t INNER JOIN REF_NITAAC_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT],[REFERENCE_CODE]
          ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT dbo.fn_NewIDFExt('CLIN',c.CREATED_WHEN, cast(c.id as varchar(12))), m.PARENT_IDF, m.IDF, c.OEM_MFR_NAME, c.OEM_PART_NUM, c.TIS, c.QUANTITY, c.UNIT, c.CS_PRICE ,c.OEM_PART_NUM,m.PARENT_CODE,m.VALUE_CODE, c.OEM_MFR_NAME, l.cnt, m.VALUE_CODE
          ,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'COMMODITY_CLINS:'+cast(c.id as varchar(16)),'COMMODITY_CLINS:'+ c.Vendor_CLIN_ID,'ACTIVE', c.APPROVE_DATE,1,c.CREATED_WHEN,c.CREATED_BY, c.MODIFIED_WHEN, c.MODIFIED_BY,c.VERSION,'VERSION:'+CAST(c.VERSION as varchar(16))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on m.REFERENCE_ID = c.COMMODITY_ID INNER JOIN #tmpClin l on l.PN = c.OEM_PART_NUM and c.OEM_MFR_NAME = l.MFR
        WHERE c.STATUS = 'Pass' and isnull(c.OEM_PART_NUM, '') <> '' and isNull(c.OEM_MFR_NAME,'') <> '' and l.cnt > 0

        INSERT INTO #tmpClin2(PN, MFR, CNT)
        Select OEM_PART_NUM, OEM_MFR_NAME, count(*) from CIOCSBK.dbo.COMMODITY_CLINS where isnull(OEM_PART_NUM, '') <> '' and isNull(OEM_MFR_NAME,'') <> ''  and status = 'Pass' Group by OEM_PART_NUM, OEM_MFR_NAME having count(*) > 1

        UPDATE t set ID  = (Select TOP 1 ID from  CIOCSBK.dbo.COMMODITY_CLINS where t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and STATUS = 'PASS')
        FROM #tmpCLIN2 t INNER JOIN CIOCSBK.dbo.COMMODITY_CLINS c on t.PN =  c.OEM_PART_NUM AND t.MFR =  c.OEM_MFR_NAME

        UPDATE t set CNT = 0
        FROM #tmpCLIN2 t INNER JOIN REF_NITAAC_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CLINS]([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT],[REFERENCE_CODE]
          ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT dbo.fn_NewIDFExt('CLIN',c.CREATED_WHEN, cast(c.id as varchar(12))), m.PARENT_IDF, m.IDF, c.OEM_MFR_NAME, c.OEM_PART_NUM, c.TIS, c.QUANTITY, c.UNIT, c.CS_PRICE,c.OEM_PART_NUM,m.PARENT_CODE,m.VALUE_CODE, c.OEM_MFR_NAME, l.cnt ,m.VALUE_CODE
          ,'Migrated From On Date: '+cast(@v_SDATE as varchar(24)), 'COMMODITY_CLINS:'+cast(c.id as varchar(16)),'COMMODITY_CLINS:'+ c.Vendor_CLIN_ID,'ACTIVE', c.APPROVE_DATE,1,c.CREATED_WHEN,c.CREATED_BY, c.MODIFIED_WHEN, c.MODIFIED_BY,c.VERSION,'VERSION:'+CAST(c.VERSION as varchar(16))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on m.REFERENCE_ID = c.COMMODITY_ID INNER JOIN #tmpClin2 l on c.ID = l.ID and l.MFR = c.OEM_MFR_NAME and l.PN = c.OEM_PART_NUM
        WHERE c.STATUS = 'Pass' and l.CNT > 0

        SELECT * INTO CIOCSBK.dbo.REF_NITAAC_CLINS_EXT FROM [dbo].[REF_NITAAC_CLINS]
        if OBJECT_ID('Tempdb..#tmpClin')  is not null drop table #tmpClin
        if OBJECT_ID('Tempdb..#tmpClin2') is not null drop table #tmpClin2
END
ELSE
BEGIN
        INSERT INTO REF_NITAAC_CLINS([IDF],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_MFR_NAME],[OEM_PART_NUM],[SPECIFICATION],[QUANTITY],[UOM],[PRICE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[OWNER_COUNT]
         ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME] ,[STATUS_CODE],[STATUS_DATE],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY], [UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT], [VERSION])
        SELECT e.[IDF], m.[PARENT_IDF],m.[IDF],e.[OEM_MFR_NAME],e.[OEM_PART_NUM],e.[SPECIFICATION],e.[QUANTITY],e.[UOM],e.[PRICE],e.[NAME_CODE],e.[CATEGORY_CODE],e.[TYPE_CODE],e.[DESCRIPTION],e.[OWNER_COUNT]
         ,e.[COMMENTS],e.[REFERENCE_ID],e.[REFERENCE_NAME],e.[STATUS_CODE],e.[STATUS_DATE],e.[VERIFICATION_IDR],e.[CREATED_DATE],e.[CREATED_BY], e.[UPDATED_DATE],e.[UPDATED_BY],e.[UPDATED_COUNT],e.[VERSION]
        FROM CIOCSBK.dbo.REF_NITAAC_CLINS_EXT e INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on e.TYPE_CODE = m.VALUE_CODE
        WHERE e.REFERENCE_ID like 'COMMODITY_CLINS:%'
END
----
GO
if DB_NAME() = 'NEOSDEV'
   DBCC SHRINKFILE('NEOSDEV_log', 1)
ELSE
   DBCC SHRINKFILE('NEOSMG_log', 1)
GO
------Start CS Data Migration
if OBJECT_ID('CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT') is Null
BEGIN
        Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

        if OBJECT_ID('Tempdb..#tmpClin3') is not null drop table #tmpClin3
        if OBJECT_ID('Tempdb..#tmpClin4') is not null drop table #tmpClin4
        Create Table #tmpClin3 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, VID int null, Cnt int null)
        Create Table #tmpClin4 (ID int NULL, PN varchar(128) NULL, MFR varchar(128) NULL, VID int null, Cnt int null)

        INSERT INTO #tmpClin3(PN, MFR, VID, CNT)
        select oem_part_num, oem_mfr_name, vendor_id, 1 from CIOCSBK.dbo.Commodity_Clins  where status = 'Pass' Group by oem_part_num, oem_mfr_name, vendor_id having count(*) = 1

        UPDATE t set CNT = 0
        FROM #tmpCLIN3 t INNER JOIN REF_NITAAC_CONTRACTOR_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = t.VID
        INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) and ct.IDF = c.CONTRACT_IDF
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_CLINS]([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT n.IDF,n.[CATEGORY_IDF], n.[COMMODITY_IDF],c.VENDOR_CLIN_ID,n.[OEM_MFR_NAME],n.[OEM_PART_NUM],n.[SPECIFICATION],ct.IDF, ct.CONTRACT_NO,ct.CONTRACTOR_IDF, c.[Vendor_name], c.[VENDOR_COMMENTS], isNULL(c.VENDOR_DESCRIPTION, c.[TIS])
              ,r.IDF, r.[VALUE_CODE], c.SUBMIT_DATE, c.CATALOG_PRICE, c.CS_PRICE, NULL,c.[CS_DISCOUNT_RATE], NULL, NULL,c.[UNIT],c.[QUANTITY],NULL, c.[GSA_SCHED_PRICE]
              ,NULL,CASE c.[ENERGY_STAR_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[EPEAT_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[TAA_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END,NULL,NULL,c.[COUNTRY_OF_ORIGIN], CASE c.[AUTHORIZED_TO_SALE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, NULL
              ,NULL,c.[CLIN_ACTION],c.[SUBMIT_DATE], NULL, case when c.edited = 1 THEN 'C_UPDATE' ELSE 'C_INITAL' END, n.TYPE_CODE, n.REFERENCE_CODE, NULL, NULL, 1,c.[ST_NOTES],c.[ST_DECISION_REASON],c.[ST_REVIEWER_COMMENTS]
              ,'Migrated From COMMODITY_CLINS on date', 'COMMODITY_CLINS:'+cast(c.ID as varchar(12)), c.[VENDOR_NAME] + ': CLINS', case when c.Approve_ID is null then 0 else 1 end, 'ACTIVE', c.Created_When, c.[CREATED_WHEN], c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY],c.[VERSION], c.[APPROVE_DATE],c.[APPROVED_BY], 744, 1, 'VERSION:'+Cast(c.Version as varchar(4))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN  #tmpClin3 t on  t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and vendor_id = t.VID INNER JOIN [dbo].[REF_NITAAC_CLINS] n  on c.OEM_PART_NUM = n.OEM_PART_NUM and c.OEM_MFR_NAME = n.OEM_MFR_NAME -- and n.REFERENCE_ID = 'COMMODITY_CLINS:'+ cast(c.id as varchar(16))
        INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = c.[VENDOR_ID] INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) LEFT JOIN REF_CONTRACTOR_TRPS r on r.REFERENCE_ID = 'TRP_NEW:'+ c.TRP_ID
        WHERE c.STATUS = 'Pass'  and ct.STATUS_CODE = 'ACTIVE' and t.CNT > 0
        CHECKPOINT
        INSERT INTO #tmpClin4(PN, MFR, VID, CNT)
        select oem_part_num, oem_mfr_name, vendor_id, count(*) from CIOCSBK.dbo.Commodity_Clins  where status = 'Pass' Group by oem_part_num, oem_mfr_name, vendor_id having count(*) > 1

        UPDATE t set ID  = (Select TOP 1 ID from  CIOCSBK.dbo.COMMODITY_CLINS where t.PN = OEM_PART_NUM AND t.MFR = OEM_MFR_NAME and vendor_id = t.CNT and STATUS = 'PASS')
        FROM #tmpCLIN4 t INNER JOIN CIOCSBK.dbo.COMMODITY_CLINS c on t.PN =  c.OEM_PART_NUM AND t.MFR =  c.OEM_MFR_NAME and c.vendor_id = t.cnt

        UPDATE t set CNT = 0
        FROM #tmpCLIN4 t INNER JOIN REF_NITAAC_CONTRACTOR_CLINS c on t.PN = c.OEM_PART_NUM AND t.MFR = c.OEM_MFR_NAME INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = t.VID
        INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) and ct.IDF = c.CONTRACT_IDF
        CHECKPOINT
        INSERT INTO [dbo].[REF_NITAAC_CONTRACTOR_CLINS]([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REFERENCE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT n.IDF,n.[CATEGORY_IDF], n.[COMMODITY_IDF],c.VENDOR_CLIN_ID,n.[OEM_MFR_NAME],n.[OEM_PART_NUM],n.[SPECIFICATION],ct.IDF, ct.CONTRACT_NO,ct.CONTRACTOR_IDF, c.[Vendor_name], c.[VENDOR_COMMENTS], isNULL(c.VENDOR_DESCRIPTION, c.[TIS])
              ,r.IDF,r.[VALUE_CODE],c.SUBMIT_DATE, c.CATALOG_PRICE, c.CS_PRICE, NULL,c.[CS_DISCOUNT_RATE], NULL, NULL,c.[UNIT],c.[QUANTITY],NULL, c.[GSA_SCHED_PRICE]
              ,NULL,CASE c.[ENERGY_STAR_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[EPEAT_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, CASE c.[TAA_COMPLIANCE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END,NULL,NULL,c.[COUNTRY_OF_ORIGIN], CASE c.[AUTHORIZED_TO_SALE] WHEN 'T' THEN 1 WHEN 'F' THEN 0 END, NULL
              ,NULL,c.[CLIN_ACTION],c.[SUBMIT_DATE], NULL, case when c.edited = 1 THEN 'C_UPDATE' ELSE 'C_INITAL' END, n.TYPE_CODE, n.REFERENCE_CODE, NULL, NULL, 1,c.[ST_NOTES],c.[ST_DECISION_REASON],c.[ST_REVIEWER_COMMENTS]
              ,'Migrated From COMMODITY_CLINS on date', 'COMMODITY_CLINS:'+cast(c.ID as varchar(12)), c.[VENDOR_NAME] + ': CLINS', case when c.Approve_ID is null then 0 else 1 end, 'ACTIVE', c.Created_When, c.[CREATED_WHEN], c.[CREATED_BY],c.[MODIFIED_WHEN],c.[MODIFIED_BY],c.[VERSION], c.[APPROVE_DATE],c.[APPROVED_BY], 744, 1, 'VERSION:'+Cast(c.Version as varchar(4))
        FROM CIOCSBK.dbo.COMMODITY_CLINS c INNER JOIN  #tmpClin4 t on c.id = t.id INNER JOIN [dbo].[REF_NITAAC_CLINS] n  on c.OEM_PART_NUM = n.OEM_PART_NUM and c.OEM_MFR_NAME = n.OEM_MFR_NAME -- and n.REFERENCE_ID = 'COMMODITY_CLINS:'+ cast(c.id as varchar(16))
        INNER JOIN CIOCSBK.dbo.CS_CONTRACT o on o.Vendor_id = c.[VENDOR_ID] INNER JOIN CONTRACTS ct on ct.REFERENCE_ID = 'SYM_CONTRACT:'+cast(o.contract_id as varchar(8)) LEFT JOIN REF_CONTRACTOR_TRPS r on r.REFERENCE_ID = 'TRP_NEW:'+ c.TRP_ID
        WHERE c.STATUS = 'Pass'  and ct.STATUS_CODE = 'ACTIVE' and t.CNT > 0
        CHECKPOINT
        SELECT * INTO CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT FROM [dbo].[REF_NITAAC_CONTRACTOR_CLINS]
        if OBJECT_ID('Tempdb..#tmpClin3') is not null drop table #tmpClin3
        if OBJECT_ID('Tempdb..#tmpClin4') is not null drop table #tmpClin4
END
ELSE
BEGIN
        INSERT INTO REF_NITAAC_CONTRACTOR_CLINS([CLIN_IDF],[CATEGORY_IDF],[COMMODITY_IDF], CONTRACTOR_CLIN_ID,[OEM_MFR_NAME],[OEM_PART_NUM],[TIS_SPECIFICATION],[CONTRACT_IDF],[CONTRACT_NO],[CONTRACTOR_IDF],[CONTRACTOR_NAME],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_CLIN_SPECIFICATION]
              ,[TRP_IDF],[TRP_CODE],[SUBMIT_DATE],[CATALOG_PRICE],[PRICE],[DISCOUNTED_PRICE],[DISCOUNT_RATE],[DISCOUNT_PERCENTAGE],[DISCOUNTED_EXTENDED_PRICE],[UOM],[QUANTITY],[GSA_SCHED_CONTRACT_NUM],[GSA_SCHED_PRICE]
              ,[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR],[COUNTRY_OF_ORIGIN],[AUTHORIZED_TO_SALE_IDR],[SHELF_LIFE]
              ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],INITIAL_PERIOD, INITIAL_GOVERNMENT_QUANTITY,[NITAAC_NOTE_TEXT],[NITAAC_DECISION_REASON],[NITAAC_COMMENTS]
              ,[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION])
        SELECT isnull(b.IDF, e.[CLIN_IDF]),m.[PARENT_IDF],m.[IDF], e.CONTRACTOR_CLIN_ID,e.[OEM_MFR_NAME],e.[OEM_PART_NUM],e.[TIS_SPECIFICATION],c.[IDF],e.[CONTRACT_NO],c.[CONTRACTOR_IDF],e.[CONTRACTOR_NAME],e.[CONTRACTOR_NOTE_TEXT],e.[CONTRACTOR_CLIN_SPECIFICATION]
              ,t.[IDF],e.[TRP_CODE],e.[SUBMIT_DATE],e.[CATALOG_PRICE],e.[PRICE],e.[DISCOUNTED_PRICE],e.[DISCOUNT_RATE],e.[DISCOUNT_PERCENTAGE],e.[DISCOUNTED_EXTENDED_PRICE],e.[UOM],e.[QUANTITY],e.[GSA_SCHED_CONTRACT_NUM],e.[GSA_SCHED_PRICE]
              ,e.[NUM_ASSOC_ELA],e.[ENERGY_STAR_COMPLIANCE_IDR],e.[EPEAT_COMPLIANCE_IDR],e.[TAA_COMPLIANCE_IDR],e.[ACT_508_COMPLIANCE_IDR],e.[OMB_COMPLIANCE_IDR],e.[COUNTRY_OF_ORIGIN],e.[AUTHORIZED_TO_SALE_IDR],e.[SHELF_LIFE]
              ,e.[CLIN_COMPONENT_CODE],e.[CLIN_ACTION],e.[ACTION_DATE],e.[NAME_CODE],e.[CATEGORY_CODE],e.[TYPE_CODE],e.[DESCRIPTION],e.INITIAL_PERIOD, e.INITIAL_GOVERNMENT_QUANTITY,e.[NITAAC_NOTE_TEXT],e.[NITAAC_DECISION_REASON],e.[NITAAC_COMMENTS]
              ,e.[COMMENTS],e.[REFERENCE_ID],e.[REFERENCE_NAME],e.[VERIFICATION_IDR],e.[STATUS_CODE],e.[STATUS_DATE],e.[CREATED_DATE],e.[CREATED_BY],e.[UPDATED_DATE],e.[UPDATED_BY],e.[UPDATED_COUNT],e.[APPROVED_DATE],e.[APPROVED_BY],e.[ACCESS_LEVEL],e.[POSITION_ORDER],e.[VERSION]
        FROM CIOCSBK.dbo.REF_NITAAC_CONTRACTOR_CLINS_EXT e INNER JOIN [dbo].[REF_NITAAC_CATEGORY_COMMODITY] m on e.REFERENCE_CODE = m.VALUE_CODE
        INNER JOIN CONTRACTS c on c.CONTRACT_NO = e.CONTRACT_NO INNER JOIN CIOCSBK.dbo.REF_NITAAC_CLINS_EXT n on n.IDF = e.CLIN_IDF LEFT JOIN REF_NITAAC_CLINS b on b.REFERENCE_ID = n.REFERENCE_ID
        LEFT JOIN REF_CONTRACTOR_TRPS t on t.VALUE_CODE = e.TRP_CODE
        WHERE  e.REFERENCE_ID like 'COMMODITY_CLINS:%'
END
---- REF_CONTRACTOR_TRP_CLINS
INSERT INTO [dbo].[REF_CONTRACTOR_TRP_CLINS] ([IDF],[CONTRACTOR_CLIN_ID],[PARENT_IDF],[PARENT_CODE],[CONTRACTOR_PARENT_CLIN_ID],[TRP_IDF],[CONTRACTOR_IDF],[APPROVAL_SEQUENCE_KEY] ,[APPROVAL_SEQUENCE_NUMBER]
           ,[NAME_CODE],[VALUE_CODE] ,[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
           ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[REQUEST_UPDATE_IDR],[CREATED_DATE],[CREATED_BY]
           ,[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[POSITION_ORDER],[VERSION]
           ,[ACTION_CODE],[CATEGORY_IDF],[COMMODITY_IDF],[OEM_PART_NUM],[OEM_MFR_NAME],[OEM_PRICE],[CATALOG_PRICE],[CONTRACT_PRICE],[GSA_SCHED_PRICE],[GSA_SCHED_CONTRACT_NUM],[SPECIAL_PRICE]
           ,[QUANTITY],[UOM],[TIS_SPECIFICATION],[WEIGHT],[WEIGHT_UOM],[SIZE],[SIZE_UOM],[WARRANTY_IDR],[WARRANTY],[NUM_ASSOC_ELA],[ENERGY_STAR_COMPLIANCE_IDR],[EPEAT_COMPLIANCE_IDR],[TAA_COMPLIANCE_IDR],[ACT_508_COMPLIANCE_IDR],[OMB_COMPLIANCE_IDR]
           ,[AUTHORIZED_TO_SALE_IDR],[COUNTRY_OF_ORIGIN],[SHELF_LIFE],[INITIAL_PERIOD],[INITIAL_GOVERNMENT_QUANTITY],[DELIVERY_PERIOD]
           ,[CLIN_COMPONENT_CODE],[CLIN_ACTION],[ACTION_DATE],[CONTRACTOR_NOTE_TEXT],[CONTRACTOR_JUSTIFICATiON],[NITAAC_DECISION_REASON],[NITAAC_NOTE_TEXT],[NITAAC_VALIDATION_STATEMENT],[PACKAGE_ONLY_CLIN_IDR])
SELECT t.CLIN_IDF,t.[CONTRACTOR_CLIN_ID],t.[PARENT_IDF],t.[PARENT_CODE],t.[CONTRACTOR_PARENT_CLIN_ID],t.[TRP_IDF],p.[CONTRACTOR_IDF],NULL,NULL --,[APPROVAL_SEQUENCE_KEY] ,[APPROVAL_SEQUENCE_NUMBER]
           ,t.[NAME_CODE],t.[REFERENCE_CODE] ,t.[CATEGORY_CODE],t.[TYPE_CODE],t.[DESCRIPTION]
           ,t.[EFFECTIVE_START_DATE],t.[EFFECTIVE_END_DATE],t.[STATUS_CODE],t.[STATUS_DATE],t.[COMMENTS],t.[REFERENCE_ID],t.[REFERENCE_NAME],t.[VERIFICATION_IDR],p.REQUEST_UPDATE_IDR,t.[CREATED_DATE],t.[CREATED_BY]
           ,t.[UPDATED_DATE],t.[UPDATED_BY],t.[UPDATED_COUNT],t.[REVIEWED_DATE],t.[REVIEWED_BY],t.[APPROVED_DATE],t.[APPROVED_BY],t.[ACCESS_LEVEL],t.[POSITION_ORDER],t.[VERSION]
           ,NULL,t.[CATEGORY_IDF],t.[COMMODITY_IDF],t.[OEM_PART_NUM],t.[OEM_MFR_NAME],CASE WHEN p.OEM_IDR = 1 THEN t.[CATALOG_PRICE] ELSE NULL END,t.[CATALOG_PRICE],t.[PRICE],t.[GSA_SCHED_PRICE],t.[GSA_SCHED_CONTRACT_NUM],t.[DISCOUNTED_PRICE]
           ,t.[QUANTITY],t.[UOM],t.[TIS_SPECIFICATION],t.[WEIGHT],t.[WEIGHT_UOM],t.[SIZE],t.[SIZE_UOM],t.[WARRANTY_IDR],t.[WARRANTY],t.[NUM_ASSOC_ELA],t.[ENERGY_STAR_COMPLIANCE_IDR],t.[EPEAT_COMPLIANCE_IDR],t.[TAA_COMPLIANCE_IDR],t.[ACT_508_COMPLIANCE_IDR],t.[OMB_COMPLIANCE_IDR]
           ,t.[AUTHORIZED_TO_SALE_IDR],t.[COUNTRY_OF_ORIGIN],t.[SHELF_LIFE],t.[INITIAL_PERIOD],t.[INITIAL_GOVERNMENT_QUANTITY],t.[DELIVERY_PERIOD]
           ,t.[CLIN_COMPONENT_CODE],t.[CLIN_ACTION],t.[ACTION_DATE],t.[CONTRACTOR_NOTE_TEXT],NULL,t.[NITAAC_DECISION_REASON],t.[NITAAC_NOTE_TEXT],NULL,t.[PACKAGE_ONLY_CLIN_IDR]
FROM REF_CONTRACTOR_TRPS p INNER JOIN REF_NITAAC_CONTRACTOR_CLINS t on t.TRP_IDF = p.IDF

Print '------------- Data Migration  [dbo].[sc_CLINS_FULL]  -----END: ' + cast(GetDate() as varchar(24))
GO
if DB_NAME() = 'NEOSDEV'
   DBCC SHRINKFILE('NEOSDEV_log', 1)
ELSE
   DBCC SHRINKFILE('NEOSMG_log', 1)
GO

------------- Data Migration  [dbo].[sc_Order_Amendment_Module]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Order_Amendment_Module]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

SELECT @v_IDF = IDF FROM CODE_APPLICATIONS WHERE VALUE_CODE = 'C_NEOS'
INSERT INTO [dbo].[REF_NITAAC_IDS] ([IDF],[ID_NUMBER],[NEXT_ID_NUMBER],[ORGANIZATION_IDF],[APPLICATION_IDF] ,[VALUE_CODE],[PREFIX],[SUFFIX],[CATEGORY_CODE],[TYPE_CODE],[ACRONYM_NAME]
            ,[NAME_CODE],[DESCRIPTION],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_BY],[CREATED_DATE],[UPDATED_BY],[UPDATED_DATE],[UPDATED_COUNT],[VERSION],[POSITION_ORDER],[ACCESS_LEVEL],[STATUS_CODE],[STATUS_DATE])
SELECT  dbo.fn_NewIDFExt('RFP',[CREATED_WHEN],Cast(NEXT_VAL as varchar(5))),[NEXT_VAL]-1,[NEXT_VAL], NULL, @v_IDF, CAST(NEXT_VAL as varchar(7)),'RFP','','C_SP','C_ORDER', 'C_SP3',
'Customer Requested ID for RFP:','Migrated ID from CIOCSBK.DBO.SEQ_CIOSP3 on Date: '+ Cast(@v_SDATE as varchar(20)),Cast(NEXT_VAL as varchar(5)),'CIOCSBK.DBO.SEQ_CIOSP3:'+cast(NEXT_VAL as varchar(8)),'CIOCSBK.DBO.SEQ_CIOSP3', [CREATED_BY],[CREATED_WHEN],[MODIFIED_BY],[MODIFIED_WHEN],1,'VERSION:'+cast([VERSION] as varchar(4)),NEXT_VAL, 744, 'COMPLETE',[CREATED_WHEN]
FROM CIOCSBK.DBO.SEQ_CIOSP3

---- For  SYM_ORDER Intiailly
INSERT INTO [dbo].[ORDERS]([IDF],[OWNER_IDF],[CONTACT_IDF],[CUSTOMER_IDF],[SUBMITTER_IDF],[APPLICATION_IDF],[AUTH_NUMBER],[CUSTOMER_NOTE_TEXT],[NOTE_TEXT],[EMAIL_NOTIFICATIONS],[FO_EXCEPTION_CODE],[FO_IDR],[FO_REASON]
           ,[LAST_ACTIVE_STATUS],[AREA_LOT_MASK],[PBC_IDR],[PBC_JUSTIFICATION],SOLE_IDR,[SOLE_CONTRACTOR_IDF],[ASSISTED_ORDER_IDR], ASSISTED_CUSTOMER_IDF
           ,[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_BY],[CREATED_DATE],[UPDATED_BY],[UPDATED_DATE],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION]
           ,[CONTRACT_TYPE_CODE],[SB_DESIGNATION_CODE],[TITLE],[DETAIL_IDR],[SOURCE_EXCLUDED_IDR],[SOURCE_EXCLUDED_CERTIFIED_IDR],[VERIFY_TM_IDR]
           ,[CO_IDF],[CO_ALT_IDF],[CS_IDF],[CS_ALT_IDF],[COTR_IDF],[COTR_ALT_IDF],[AMO_IDF],[AMO_ALT_IDF],[REVIEWER_IDF],[ISSO_IDF],[ISSO_ALT_IDF],[POC_IDF])
SELECT dbo.fn_NewIDFExt('ORD',o.Created_WHEN, cast(o.[ID] as varchar(8))),dbo.fn_GetIDF(o.[OWNER],'C_PERSON'),Null,dbo.fn_GetIDF(o.[CUSTOMER_ORG_ID],'C_ORGANIZATION'),isNull(e.IDF,dbo.fn_GetMapIDF(dbo.fn_GetIDF(o.[OWNER],'C_PERSON'),'C_USER')), dbo.fn_GetIDF(o.[GWAC],'C_APPLICATION'),o.[AUTH_NUMBER],o.[CUSTOMER_NOTES],t.[DESCRIPTION],o.[EMAIL_NOTIFICATIONS],dbo.fn_GetMapSetCode([FO_EXCEPTION],'C_FO_EXCEPTION_TYPE'),o.[FO],o.[FO_REASON]
      ,dbo.fn_GetMapSetCode(o.[LAST_ACTIVE_STATUS],'C_ORDER_STATUS'), o.[LOTS],o.[PBC],o.[PBC_JUSTIFICATION],case when isnull(o.SOLE_ID,0) = 0 then 1 else 0 end,  dbo.fn_MG_GetIDF(o.[SOLE_ID],'C_ORGANIZATION'),case [ASSISTED_ORDER] when 'T' then 1 else 0 END, dbo.fn_GetIDF(o.[ASSISTED_ORG_ID],'C_ORGANIZATION')
      ,'Order ID:' + cast(o.ID as varchar(8)),cast(o.ID as varchar(8)),'C_ORDER',dbo.fn_GetMapSetCode(o.[TYPE],'C_ORDER_TYPE'),o.[GWAC_NOTES],'Migrated From SYM_ORDER On Date: '+cast(@v_SDATE as varchar(24)),cast(o.ID as varchar(8)),'SYM_ORDER:'+cast(o.DBID as varchar(8)),'SYM_ORDER',1, dbo.fn_GetMapSetCode(o.[STATUS],'C_ORDER_STATUS'),@v_SDATE,o.[CREATED_BY],o.[CREATED_WHEN],o.[MODIFIED_BY],o.[MODIFIED_WHEN],o.[VERSION],744, 'VERSION:' + CAST(o.[VERSION] as varchar(6))
      ,dbo.fn_GetMapSetCode(t.[CONTRACT_TYPE],'C_CONTRACT_TYPE'),t.[SB_DESIGNATION_CODE],t.[TITLE], case when t.[CIOCS_ORDER_DETAILS_ID] is null then null else 1 END,case o.[SOURCE_EXCLUDED] WHEN 'T' THEN 1 ELSE 0 END,CASE o.[SOURCE_EXCLUDED_CERTIFIED] WHEN 'T' THEN 1 ELSE 0 END,[VERIFY_TM_FLAG]
      ,dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_CO],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_CO_ALT],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(t.[CUSTOMER_CS],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_CS_ALT],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_COTR],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_COTR_ALT],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_AMO],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_AMO_ALT],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([REVIEWER_ID],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_ISSO],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF([CUSTOMER_ISSO_ALT],'C_PERSON'),'C_USER'),dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(isNull(t.[PRIMARY_POC],t.[PREVIOUS_PRIMARY_POC]), 'C_PERSON'),'C_USER')
FROM [CIOCSBK].[dbo].[SYM_ORDER] o INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER] t on o.DBID = t.[ORDER_DBID] Left Join USERS e on e.username = o.created_by

---- install default order tasks
INSERT INTO [dbo].[ORDER_TASKS]([IDF],[ORDER_IDF],FINANCE_IDR,DELIVERABLE_IDR,[PRIMARY_IDR],[REFERENCE_CODE],[TITLE],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[CONTACT_IDF], PARENT_IDF)
SELECT 'ODEF_'+RIGHT(IDF,59), IDF,1,1,1, REFERENCE_CODE,[TITLE],[NAME_CODE],[VALUE_CODE],'C_ORDER','C_DEFAULT','Task for whole scope of Order',[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],0,[ACCESS_LEVEL],[VERSION],[CONTACT_IDF], NULL
FROM ORDERS

--- handle duplicated schedules for order
if Object_ID('Tempdb..#tmpR') is null
    Create table #tmpR(CH_ID int, ORD_ID int, ID int null, cnt int null)
else
    DELETE #tmpR
insert into #tmpR(ORD_ID, cnt)
select TASK_ORDER_ID, count(*) from [CIOCSBK].[dbo].[SYM_TO_ORDER_SCHEDULE] Group By TASK_ORDER_ID HAVING COUNT(*) > 1
UPDATE t set ID = (select top 1 id from [CIOCSBK].[dbo].[SYM_TO_ORDER_SCHEDULE] where TASK_ORDER_ID = t.ORD_ID order by MODIFIED_WHEN desc )
from #tmpR t inner join [CIOCSBK].[dbo].[SYM_TO_ORDER_SCHEDULE] b on b.TASK_ORDER_ID = t.ORD_ID
insert into #tmpR(ID, ORD_ID, cnt)
select ID, TASK_ORDER_ID, 1 from [CIOCSBK].[dbo].[SYM_TO_ORDER_SCHEDULE] WHERE TASK_ORDER_ID not in (select ORD_ID From #tmpR)

---- install order compliances and information
INSERT INTO [dbo].[ORDER_COMPLIANCES]([IDF],[ORDER_IDF],[AMENDMENT_IDR],[REFERENCE_CODE]
           ,[IMMEDIATE_RELEASE_IDR],[RELEASE_DATE],RELEASE_STATUS_CODE, RELEASE_STATUS_DATE, RELEASE_NOTE_TEXT
           ,[QA_IDR],[QA_START_DATE],[QA_DEADLINE],QA_STATUS_CODE,QA_STATUS_DATE, QA_NOTE_TEXT
           ,[PROPOSAL_START_DATE],[PROPOSAL_DEADLINE],PROPOSAL_STATUS_CODE,PROPOSAL_STATUS_DATE, PROPOSAL_NOTE_TEXT
           ,[REVIEWER_ASSIGNED_DATE],ASSIGNMENT_STATUS_CODE, ASSIGNMENT_NOTE_TEXT
           ,[REVIEW_START_DATE],[REVIEW_DEADLINE], REVIEW_STATUS_CODE, REVIEW_STATUS_DATE, REVIEW_NOTE_TEXT
           ,[SELECTION_START_DATE],[SELECTION_DEADLINE],[SELECTION_STATUS_CODE],[SELECTION_STATUS_DATE], SELECTION_NOTE_TEXT
           ,[AWARD_START_DATE],[AWARD_DEADLINE],[AWARD_STATUS_CODE],[AWARD_STATUS_DATE],[AWARD_NOTE_TEXT]
           ,[BRAND_NAME_JUSTIFICATION_IDR],[EVALUATION_CRITERIA_TYPE_CODE],[HEALTH_IT_RELATED_IDR],[EXCLUDE_OTHER_THAN_SMALL_BUSINESS_IDR],[CUSTOMER_COTR_COST_PROPOSALS_VISIBLE_IDR],[PRE_REVIEWED_IDR],[AUTHORIZED_IDR]
           ,[PROPOSAL_DELIVERY_METHOD_CODE],[PROPOSAL_INSTRUCTIONS],[OTHER_INSTRUCTIONS],[OTHER_CONTRACT_DESCRIPTION],[INCUMBENT],[CANCEL_REASON_CODE],[CANCEL_REASON],[OSSO_IDR]
           ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('OCMP',o.CREATED_date, cast(t.[ORDER_DBID] as varchar(5))), o.IDF, 0, o.REFERENCE_CODE
      ,s.[IMMEDIATE_RELEASE_FLAG],s.[SCHEDULED_RELEASE_TIME], CASE WHEN s.[ACTUAL_RELEASE_TIME] is NULL THEN NULL ELSE 'COMPLETE' END, s.ACTUAL_RELEASE_TIME, NULL
      ,isNull(s.[QUESTION_PERIOD_FLAG],t.[QASP_FLAG]), NULL,s.[QUESTION_DEADLINE],dbo.fn_GetMapSetCode(t.[QA_STATUS],'C_QA_STATUS'),NULL,NULL
      ,NULL,s.[PROPOSAL_DEADLINE], NULL, NULL,NULL
      ,t.[REVIEWER_ASSIGNED_TIME],'COMPETE',NULL
      ,t.[SUBMIT_REVIEW_TIME], s.[PROP_REV_DEADLINE], 'COMPLETE', NULL, NULL
      ,t.[SELECTION_SUBMISSION_TIME],s.[SELECTION_DEADLINE], 'COMPLETE', NULL, NULL
      ,NULL,s.[EXPECTED_PO_TIME], CASE WHEN s.[ACTUAL_AWARD_TIME] is null THEN NULL ELSE 'COMPLETE' END, s.[ACTUAL_AWARD_TIME],NULL
      ,case when isNull(so.[BRAND_NAME],0)=0 then 0 else 1 end,so.[EVALUATION_CRITERIA_TYPE],case t.[HEALTH_IT_RELATED] when 'T' then 1 else 0 end,case t.[EXCLUDE_OTHER_THAN_SMALL_BUSINESS] WHEN 'T' THEN 1 else 0 END,CASE t.[CUSTOMER_COTR_COST_PROPOSALS_VISIBLE] WHEN 'T' THEN 1 ELSE 0 END,t.[PRE_REVIEWED],isNull(t.[CS_AUTHORIZED_TO_AWARD],CASE t.CUST_CS_AUTHORITY_LIMITED WHEN 'T' THEN 1 ELSE 0 END)
      ,dbo.fn_GetMapSetCode(t.[PROPOSAL_DELIVERY_METHOD],'C_PROPSOAL_DELEVERY_METHOD'),t.[PROPOSAL_INSTRUCTIONS],t.[OTHER_INSTRUCTIONS],t.[OTHER_CONTRACT_TYPE_DESCR],t.[INCUMBENT],dbo.fn_GetMapSetCode(t.[CANCEL_REASON_TYPE],'C_CANCEL_REASON'), t.[CANCEL_REASON], case t.[IS_OSSO ] when 'T' THEN 1 ELSE 0 END
      ,o.[NAME_CODE], o.[CATEGORY_CODE],o.[TYPE_CODE],o.[DESCRIPTION],o.[NOTE_TEXT],o.CREATED_DATE,NULL,isNull(s.STATUS,o.STATUS_CODE),o.[STATUS_DATE],'Migrated From SYM_TO_ORDER_SCHEDULESYM_TO_ORDER_SCHEDULE On Date:','SYM_TO_ORDER_SCHEDULE:'+cast(s.ID as varchar(8)),'SYM_TO_ORDER_SCHEDULE',s.[CREATED_WHEN],s.[CREATED_BY],s.[MODIFIED_WHEN],s.[MODIFIED_BY],s.[VERSION],o.[ACCESS_LEVEL],isNull('VERSION:'+ cast(s.[VERSION] as varchar(8)),o.VERSION)
FROM [dbo].[ORDERS] o INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER] t on o.REFERENCE_ID = 'SYM_ORDER:'+cast(t.[ORDER_DBID] as varchar(8)) INNER JOIN [CIOCSBK].[dbo].[SYM_ORDER] so on so.DBID = t.ORDER_DBID
LEFT JOIN [CIOCSBK].[dbo].[SYM_TO_ORDER_SCHEDULE] s on 'SYM_ORDER:'+CAST(s.TASK_ORDER_ID as varchar(8)) = o.REFERENCE_ID INNER JOIN #tmpR tr on tr.ID = s.id

--- INSTALL the Order finance
INSERT INTO [dbo].[ORDER_FINANCES]([IDF],[ORDER_IDF],[AMENDMENT_IDR],[REFERENCE_CODE]
           ,[LOE_FILLED_IDR],[TOTAL_FTES],[TOTAL_HOURS],[AMOUNT_UOM],[ESTIMATED_AMOUNT],[BUDGETED_AMOUNT],[REVISION_IDR],[REVISED_AMOUNT],[REVISION_NOTE_TEXT]
           ,[IGCE_AMOUNT],[IGCE_CODE],[AWARD_CEILING_AMOUNT],[FEE_TYPE_CODE],[FEE],[FEE_RATE],[FEE_CALCULATED],[FEE_OVERRIDE_IDR],[FEE_OVERRIDE_REASON], [NOTE_TEXT]
           ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER]
           ,[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF])
SELECT dbo.fn_NewIDFExt('OFIN',o.CREATED_DATE, cast(t.[Order_DBID] as varchar(5))), o.IDF, 0, o.REFERENCE_CODE
       ,NULL, NULL, NULL, 'C_USD',NULL,NULL,NULL,NULL,NULL
       ,isNull(t.[IGCE],t.[IGCE_BASE]),'C_MANUAL', so.[TOTAL_AWARD_CEILING],dbo.fn_GetMapSetCode(so.[FEE_TYPE],'C_FEE_TYPE'),so.[FEE],so.[FEE],so.[FEE_CALCULATED],so.[FEE_OVERRIDE],NULL,t.[FUNDING_STRATEGY]
       ,o.NAME_CODE,o.CATEGORY_CODE,o.TYPE_CODE, o.CREATED_DATE, NULL, o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.[REFERENCE_ID],o.[REFERENCE_NAME],o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],0
       ,o.[REVIEWED_DATE],o.[REVIEWED_BY],o.[APPROVED_DATE],o.[APPROVED_BY],o.[ACCESS_LEVEL],o.[VERSION],o.[PARENT_CODE],o.[PARENT_IDF]
FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_ORDER] so on 'SYM_ORDER:'+cast(so.[DBID] as varchar(8)) = o.REFERENCE_ID
INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER] t on so.DBID = t.[ORDER_DBID]

UPDATE c set MICROPURCHASE_IDR = case d.[MICROPURCHASE] WHEN 'T' THEN 1 ELSE 0 END, INCLUDE_OEM_IDR =CASE d.[INCLUDE_OEM]  WHEN 'T' THEN 1 ELSE 0 END, INCLUDE_VAR_IDR = CASE d.[INCLUDE_VAR] WHEN 'T' THEN 1 ELSE 0 END, AUTH_RESELLER_ONLY_IDR = CASE d.[AUTH_RESELLERS_ONLY] WHEN 'T' THEN 1 ELSE 0 END, BRAND_NAME_JUSTIFICATION_IDR = CASE  d.BRAND_NAME_JUSTIFICATION WHEN 'T' THEN 1 ELSE 0 END, EVALUATION_METHOD_CODE= dbo.fn_GetMapSetCode(d.[EVALUATION_METHOD],'C_EVALUATION_METHOD'), TAA_IDR = CASE d.TAA WHEN 'T' THEN 1 ELSE 0 END
FROM ORDER_COMPLIANCES c INNER JOIN ORDERS o on o.IDF = c.ORDER_IDF INNER JOIN [CIOCSBK].[dbo].[SYM_CIOCS_ORDER_DETAILS] d on o.REFERENCE_ID = 'SYM_ORDER:'+ cast(d.id as varchar(8))

UPDATE o SET ASSISTED_CUSTOMER_IDF =  dbo.fn_GetIDF(d.[ASSISTING_ORG_ID],'C_ORGANIZATION')
FROM [CIOCSBK].[dbo].[SYM_CIOCS_ORDER_DETAILS] d INNER JOIN ORDERS o on 'SYM_ORDER:'+ cast(d.id as varchar(8)) = o.REFERENCE_ID
WHERE isNUll(d.[ASSISTING_ORG_ID],0) <> 0 and o.ASSISTED_CUSTOMER_IDF is null

---------INSTALL SHIPMENTS in ORDER_Deliveries
INSERT INTO [dbo].[ORDER_DELIVERIES]([IDF],[ORDER_IDF],[SUBMITTER_IDF],[SUBMITTER_NAME_CODE],[REFERENCE_CODE],[CUSTOMER_IDF],[POC_IDF],[POC_NAME_CODE]
           ,[INSTRUCTIONS],[PROVIDER_NAME_CODE],[ALT_PROVIDER_NAME_CODE],[DELIVERY_ITEM_COUNT],[VERIFICATION_IDR],[PRIMARY_IDR],[TYPE_CODE],[DELIVERY_DAYS_AFTER],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[EXPEDITE_IDR],[ACTION_CODE]
           ,[FULL_DELIVERY_IDR], [LAST_DELIVERY_IDR],[PERCENT_TO_DELIVERY],[DELIVERY_START_DATE],[DELIVERY_END_DATE]
           ,[NAME_CODE],[CATEGORY_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION])
SELECT  dbo.fn_NewIDFExt('OSDLV',t.CREATED_WHEN, cast(t.[SHIPMENT_ID] as varchar(5))), o.IDF, o.SUBMITTER_IDF, o.SUBMITTER_NAME_CODE, o.REFERENCE_CODE,o.CUSTOMER_IDF, isNull(o.POC_IDF,o.SUBMITTER_IDF), isNUll(o.POC_NAME_CODE,o.SUBMITTER_NAME_CODE)
           ,t.comments,[PROVIDER],[OTHER_PROVIDER],1,1,1,o.TYPE_CODE,NULL,NULL,NULL,NULL,'C_DEFAULT'
           ,case [FULL_SHIPMENT] WHEN 'T' THEN 1 ELSE 0 END,CASE [LAST_SHIPMENT_POP] WHEN 'T' THEN 1 ELSE 0 END,t.[PERCENT_SHIPPED],t.[SHIP_DATE],t.[SHIP_DATE]
           ,o.NAME_CODE + ' Shipping Info','C_ORDER',NULL,o.STATUS_CODE, o.STATUS_DATE, 'Migrated From CIOCS_SHIPMENT On Date','CIOCS_SHIPMENT:'+cast(t.Shipment_ID as varchar(8)),t.[TRACKING_ID],t.[created_when],t.[created_by],t.[modified_when],t.[modified_by],t.[Version], 1, 744, 'VERSION:' + CAST(t.[Version] as varchar(6))
FROM [CIOCSBK].[dbo].[CIOCS_SHIPMENT] t INNER JOIN ORDERS o on 'SYM_ORDER:'+cast(t.[ORDER_DBID] as varchar(8)) = o.REFERENCE_ID

UPDATE OD SET ADDRESS_IDF = dbo.fn_GetIDF(d.[SHIPPING_ADDRESS_ID],'C_ADDRESS'), DOCUMENT_IDR = case d.[HAS_SHIPPING_DOCUMENT] when 'T' THEN 1 ELSE 0 END, DESCRIPTION= d.DESCRIPTION,
       TYPE_CODE = dbo.fn_GetMapSetCode(d.[DELIVERY_TYPE],'C_DELIVERY_TYPE'), DELIVERY_DAYS_AFTER = d.[DELIVERY_DAYS_AFTER],[EFFECTIVE_START_DATE]=d.[DELIVERY_POP_START],[EFFECTIVE_END_DATE] = d.[DELIVERY_POP_END], [EXPEDITE_IDR] =  CASE d.[EXPEDITE_SHIPPING] WHEN 'T' THEN 1 ElSE 0 END
FROM [CIOCSBK].[dbo].[SYM_CIOCS_ORDER_DETAILS] d INNER JOIN ORDERS o on 'SYM_ORDER:'+ cast(d.id as varchar(8)) = o.REFERENCE_ID INNER JOIN ORDER_DELIVERIES OD on OD.ORDER_IDF = o.IDF

UPDATE o set LINK_DELIVERY_IDF = o.IDF   FROM ORDERS o INNER JOIN ORDER_DELIVERIES  f on o.IDF = f.ORDER_IDF
UPDATE o set LINK_FINANCE_IDF = o.IDF    FROM ORDERS o INNER JOIN ORDER_FINANCES    f on o.IDF = f.ORDER_IDF
UPDATE o set LINK_COMPLIANCE_IDF = o.IDF FROM ORDERS o INNER JOIN ORDER_COMPLIANCES f on o.IDF = f.ORDER_IDF
UPDATE o set LINK_TASK_IDF = o.IDF       FROM ORDERS o INNER JOIN ORDER_TASKS       f on o.IDF = f.ORDER_IDF

---- install order reviews
INSERT INTO ORDER_REVIEWS (ORDER_IDF, REVIEWER_IDF, TASK_IDF, APPROVED_IDR, ACTIVE_IDR, REVIEW_START_DATE, REVIEW_DEADLINE, NOTE_TEXT, ACTION_CODE,
[NAME_CODE] ,[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY] ,[UPDATED_DATE],[UPDATED_BY] ,[UPDATED_COUNT],[ACCESS_LEVEL] ,[VERSION])
SELECT o.IDF, dbo.fn_GetIDF(r.[REVIEWER_ID],'C_PERSON'), t.IDF , r.[APPROVED], case r.[IS_ACTIVE] WHEN 'T' THEN 1 ELSE 0 END ,isNull(r.[REVIEW_TIME],s.REVIEW_START_DATE),s.REVIEW_DEADLINE, s.[COMMENTS], NULL
      ,o.[NAME_CODE],o.[CATEGORY_CODE] ,o.[TYPE_CODE],o.[DESCRIPTION],o.[STATUS_CODE],o.[STATUS_DATE],'Migrated From SYM_TASK_ORDER_REVIEW On Date:','SYM_TASK_ORDER_REVIEW:'+Cast(r.[ID] as varchar(8)),'SYM_TASK_ORDER_REVIEW',r.[CREATED_WHEN],r.[CREATED_BY],r.[MODIFIED_WHEN],r.[MODIFIED_BY],r.[VERSION],744, 'VERSION:' + cast(r.[VERSION] as varchar(8))
FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER_REVIEW] r on o.REFERENCE_ID = 'SYM_ORDER:'+cast(r.task_order_id as varchar(8))
INNER JOIN ORDER_COMPLIANCES s on s.ORDER_IDF = o.IDF INNER JOIN ORDER_TASKS t on t.ORDER_IDF = o.IDF
GO
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
------------- INSERT  Responses  very long process
if Object_ID('Tempdb..#tmpR') is null
    Create table #tmpR(CH_ID int, ORD_ID int, ID int null, cnt int null)
else
    DELETE #tmpR

insert into #tmpR(CH_ID, ORD_ID)
select  distinct CONTRACT_HOLDER_ORG_ID, ORDER_DBID from [CIOCSBK].[dbo].[SYM_BIDS]
UPDATE t set ID = (select top 1 b.id from [CIOCSBK].[dbo].[SYM_BIDS] where CONTRACT_HOLDER_ORG_ID = t.CH_ID and ORDER_DBID = t.ORD_ID order by MODIFIED_WHEN desc )
from #tmpR t inner join [CIOCSBK].[dbo].[SYM_BIDS] b on b.CONTRACT_HOLDER_ORG_ID = t.CH_ID and b.ORDER_DBID = t.ORD_ID

INSERT INTO ORDER_RESPONSES(ORDER_IDF, CONTRACTOR_IDF, PROPOSAL_IDF, REFERENCE_CODE,NO_BID_IDR, REASON_CODE, DESCRIPTION, NOTE_TEXT, REVISION_IDR, REVISION_MESSAGE, [VERIFICATION_IDR],[APPLICATION_IDF]
      ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT o.IDF, e.IDF, case WHEN b.[PROPOSAL_ID] is null then null else dbo.fn_GetIDF(b.[PROPOSAL_ID],'C_PROPOSAL') end, o.REFERENCE_CODE,case b.[NO_BID] when 'T' THEN 1 WHEN 'F' THEN 0 else NULL END, v.VALUE_CODE, Substring(b.[NO_BID_REASON],1,256), isNull(b.[NO_BID_REASON],v.Name_code), case b.[REVISION_REQUESTED] WHEN 'T' THEN 1 ELSE 0 END, b.[REVISION_MESSAGE], 1,o.[APPLICATION_IDF]
      ,'Contractor Response to Customer Order: '+o.VALUE_CODE,'C_ORDER',CASE b.[NO_BID] when 'T' THEN 'C_NOBID' ELSE 'C_INTENT' END, s.[QA_START_DATE],s.PROPOSAL_START_DATE, o.STATUS_CODE, o.STATUS_DATE,'Migrated From SYM_TO_SYM_BIDS on Date: '+ cast(@v_SDATE as varchar(24)),'SYM_BIDS:'+cast(b.ID as varchar(8)),'SYM_BIDS',b.[CREATED_WHEN],b.[CREATED_BY],b.[MODIFIED_WHEN],b.[MODIFIED_BY],b.[VERSION],744,'VERSION:' + cast(b.[VERSION] as varchar(8))
FROM  #tmpR t inner join [CIOCSBK].[dbo].[SYM_BIDS] b on b.CONTRACT_HOLDER_ORG_ID = t.CH_ID and b.ORDER_DBID = t.ORD_ID and t.ID = b.ID INNER JOIN ORDERS o on o.REFERENCE_ID = 'SYM_ORDER:'+cast(b.ORDER_DBID as varchar(8))
INNER JOIN ORDER_COMPLIANCES s on o.IDF = s.ORDER_IDF INNER JOIN SYM_ORGANIZATION_EXT e on e.id = t.CH_ID LEFT JOIN Code_Valuesets v on v.value_number = b.[NO_BID_REASON_ID] and  v.category_code = 'C_NOBID' and v.TYPE_CODE = 'C_REASON'
WHERE s.AMENDMENT_IDR = 0
drop Table #tmpR

GO
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
---------- AMENDMENT
INSERT INTO ORDERS(IDF, PARENT_IDF, PARENT_CODE, [VALUE_CODE], [OWNER_IDF],[CONTACT_IDF],[CUSTOMER_IDF],[APPLICATION_IDF],[SUBMITTER_IDF]
           ,[AUTH_NUMBER],[CUSTOMER_NOTE_TEXT],[NOTE_TEXT],[EMAIL_NOTIFICATIONS],[FO_EXCEPTION_CODE],[FO_IDR],[FO_REASON],[LAST_ACTIVE_STATUS],[AREA_LOT],[PBC_IDR],[PBC_JUSTIFICATION],[SOLE_IDR],[SOURCE_EXCLUDED_IDR],[SOURCE_EXCLUDED_CERTIFIED_IDR],[ASSISTED_ORDER_IDR],[VERIFY_TM_IDR]
           ,[NAME_CODE],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[REFERENCE_CODE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[STATUS_CODE],[STATUS_DATE],[CREATED_BY],[CREATED_DATE],[UPDATED_BY],[UPDATED_DATE],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION]
           ,[CONTRACT_TYPE_CODE],[SB_DESIGNATION_CODE],[TITLE],[DETAIL_IDR],[APPROVED_BY],[APPROVED_DATE],[APPROVER_IDF]
           ,[LINK_FINANCE_IDF],[LINK_DELIVERY_IDF],[LINK_COMPLIANCE_IDF],[LINK_TASK_IDF]
           ,[CO_IDF],[CO_ALT_IDF],[CS_IDF],[CS_ALT_IDF],[COTR_IDF],[COTR_ALT_IDF],[AMO_IDF],[AMO_ALT_IDF],[REVIEWER_IDF],[ISSO_IDF],[ISSO_ALT_IDF])
SELECT dbo.fn_NewIDFExt('AMND',a.CREATED_WHEN,o.VALUE_CODE + '_' + CAST(a.[SEQUENCE_NUMBER] as varchar(4))), o.IDF,'C_AMENDMENT', o.VALUE_CODE + '_' + CAST([SEQUENCE_NUMBER] as varchar(4)), o.[OWNER_IDF],o.[CONTACT_IDF],o.[CUSTOMER_IDF],o.[APPLICATION_IDF], isNull(e.IDF,o.SUBMITTER_IDF)
      ,o.[AUTH_NUMBER],o.[CUSTOMER_NOTE_TEXT],o.[NOTE_TEXT],o.[EMAIL_NOTIFICATIONS],o.[FO_EXCEPTION_CODE],o.[FO_IDR],o.[FO_REASON],o.[LAST_ACTIVE_STATUS],o.[AREA_LOT],o.[PBC_IDR],o.[PBC_JUSTIFICATION],o.[SOLE_IDR],o.[SOURCE_EXCLUDED_IDR],o.[SOURCE_EXCLUDED_CERTIFIED_IDR],o.[ASSISTED_ORDER_IDR],o.[VERIFY_TM_IDR]
      ,o.[NAME_CODE],o.[ACRONYM_NAME],o.[CATEGORY_CODE],'C_'+a.[AMENDMENT_TYPE],o.[DESCRIPTION],o.REFERENCE_CODE,'Migrated From SYM_TO_AMENDMENT On Date' + CAST(@v_SDATE as varchar(24)), 'SYM_TO_AMENDMENT:'+cast(a.[ID] as varchar(4)),'SYM_TO_AMENDMENT',o.VERIFICATION_IDR, a.[STATUS],o.STATUS_DATE, a.[CREATED_BY],a.[CREATED_WHEN],a.[MODIFIED_BY],a.[MODIFIED_WHEN],a.[VERSION], 744, 'VERSION:'+CAST(a.[VERSION] as varchar(4))
      ,o.[CONTRACT_TYPE_CODE],o.[SB_DESIGNATION_CODE],o.[TITLE],1,isNull(a.[APPROVED_BY],o.[APPROVED_BY]), isNull(a.[APPROVED_DATE],o.[APPROVED_DATE]), IsNull(dbo.fn_GetIDFByName(a.APPROVED_BY,'C_USERNAME'),o.APPROVER_IDF)
      ,o.[LINK_FINANCE_IDF],o.[LINK_DELIVERY_IDF],o.[LINK_COMPLIANCE_IDF],o.[LINK_TASK_IDF]
      ,isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_CO],'C_PERSON'),'C_USER'),o.[CO_IDF]),isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_CO_ALT],'C_PERSON'),'C_USER'),o.[CO_ALT_IDF])
      ,isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_CS],'C_PERSON'),'C_USER'),  o.[CS_IDF]),  isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_CS_ALT],'C_PERSON'),'C_USER'),  o.[CS_ALT_IDF])
      ,isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_COTR],'C_PERSON'),'C_USER'),o.[COTR_IDF]),isNull(dbo.fn_GetMapIDF(dbo.fn_MG_GetIDF(a.[CUSTOMER_COTR_ALT],'C_PERSON'),'C_USER'),o.[COTR_ALT_IDF])
      ,o.[AMO_IDF],  o.[AMO_ALT_IDF],o.[REVIEWER_IDF], o.[ISSO_IDF],o.[ISSO_ALT_IDF]
      FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_TO_AMENDMENT] a on 'SYM_ORDER:'+cast(a.Task_Order_ID as varchar(8)) = o.REFERENCE_ID LEFT JOIN USERS e on e.UserName = a.CREATED_BY

------ install NAME_CODEs
UPDATE ORDERS SET [ACRONYM_NAME] = 'C_' + replace(left(APPLICATION_IDF,5),'_',''), CATEGORY_CODE = 'C_'+replace(left(APPLICATION_IDF,2),'GS','CS'), NAME_CODE = 'CUSTOMER ORDER FOR: ' + VALUE_CODE, TYPE_CODE = CASE WHEN left(APPLICATION_IDF,2) in ('CS','GS') THEN 'C_RFQ' ELSE 'C_RFP' END
UPDATE ORDERS SET REVIEWER_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(REVIEWER_IDF,'C_PERSON'),default), SUBMITTER_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(SUBMITTER_IDF,'C_PERSON'),default), POC_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(POC_IDF,'C_PERSON'),default), CO_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(CO_IDF,'C_PERSON'),default), CO_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(CO_ALT_IDF,'C_PERSON'),default),
CS_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(CS_IDF,'C_PERSON'),default), CS_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(CS_ALT_IDF,'C_PERSON'),default),COTR_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(COTR_IDF,'C_PERSON'),default), COTR_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(COTR_ALT_IDF,'C_PERSON'),default),
AMO_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(AMO_IDF,'C_PERSON'),default), AMO_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(AMO_ALT_IDF,'C_PERSON'),default),ISSO_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(ISSO_IDF,'C_PERSON'),default), ISSO_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(ISSO_ALT_IDF,'C_PERSON'),default)

INSERT INTO [dbo].[ORDER_COMPLIANCES]([IDF],[ORDER_IDF],[AMENDMENT_IDR],[REFERENCE_CODE],[AMEND_DESCRIPTION],[AMEND_SUMMARY],[REJECTION_MESSAGE]
           ,[IMMEDIATE_RELEASE_IDR],[RELEASE_DATE],RELEASE_STATUS_CODE, RELEASE_STATUS_DATE, RELEASE_NOTE_TEXT
           ,[QA_IDR],[QA_START_DATE],[QA_DEADLINE],QA_STATUS_CODE,QA_STATUS_DATE, QA_NOTE_TEXT
           ,[PROPOSAL_START_DATE],[PROPOSAL_DEADLINE],PROPOSAL_STATUS_CODE,PROPOSAL_STATUS_DATE, PROPOSAL_NOTE_TEXT
           ,[REVIEWER_ASSIGNED_DATE],ASSIGNMENT_STATUS_CODE, ASSIGNMENT_NOTE_TEXT
           ,[REVIEW_START_DATE],[REVIEW_DEADLINE], REVIEW_STATUS_CODE, REVIEW_STATUS_DATE, REVIEW_NOTE_TEXT
           ,[SELECTION_START_DATE],[SELECTION_DEADLINE],[SELECTION_STATUS_CODE],[SELECTION_STATUS_DATE], SELECTION_NOTE_TEXT
           ,[AWARD_START_DATE],[AWARD_DEADLINE],[AWARD_STATUS_CODE],[AWARD_STATUS_DATE],[AWARD_NOTE_TEXT]
           ,[OSSO_IDR],[TAA_IDR],[MICROPURCHASE_IDR],[AUTH_RESELLER_ONLY_IDR],[AUTHORIZED_IDR],[PRE_REVIEWED_IDR],[INCLUDE_VAR_IDR],[INCLUDE_OEM_IDR],[EVALUATION_METHOD_CODE],[EVALUATION_CRITERIA_TYPE_CODE],[OTHER_INSTRUCTIONS],[CANCEL_REASON_CODE],[CANCEL_REASON]
           ,[CUSTOMER_COTR_COST_PROPOSALS_VISIBLE_IDR],[HEALTH_IT_RELATED_IDR],[EXCLUDE_OTHER_THAN_SMALL_BUSINESS_IDR],[INCUMBENT],[BRAND_NAME_JUSTIFICATION_IDR],[OTHER_CONTRACT_DESCRIPTION],[PROPOSAL_INSTRUCTIONS],[PROPOSAL_DELIVERY_METHOD_CODE]
           ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION] )
SELECT dbo.fn_NewIDFExt('OSCH',oa.CREATED_DATE, cast(a.[SEQUENCE_NUMBER] as varchar(5))), oa.IDF, 1,oa.REFERENCE_CODE, a.[DESCRIPTION], a.SUMMARY,a.[REJECTION_MESSAGE]
      ,s.[IMMEDIATE_RELEASE_IDR],isNull(a.[RELEASE_TIME],s.[RELEASE_DATE]),s.RELEASE_STATUS_CODE, s.RELEASE_STATUS_DATE, s.RELEASE_NOTE_TEXT
      ,s.[QA_IDR],s.[QA_START_DATE],isNull(a.[QUESTION_TIME],s.[QA_DEADLINE]),s.QA_STATUS_CODE,s.QA_STATUS_DATE, s.QA_NOTE_TEXT
      ,s.[PROPOSAL_START_DATE],isNull(a.[PROPOSAL_TIME],s.[PROPOSAL_DEADLINE]),s.PROPOSAL_STATUS_CODE,s.PROPOSAL_STATUS_DATE, s.PROPOSAL_NOTE_TEXT
      ,s.[REVIEWER_ASSIGNED_DATE],s.ASSIGNMENT_STATUS_CODE, s.ASSIGNMENT_NOTE_TEXT
      ,s.[REVIEW_START_DATE],s.[REVIEW_DEADLINE], s.REVIEW_STATUS_CODE, s.REVIEW_STATUS_DATE, s.REVIEW_NOTE_TEXT
      ,s.[SELECTION_START_DATE],isNull(a.[SELECTION_TIME],s.[SELECTION_DEADLINE]),s.[SELECTION_STATUS_CODE],s.[SELECTION_STATUS_DATE],s.SELECTION_NOTE_TEXT
      ,isNull(a.[AWARD_TIME],s.[AWARD_START_DATE]),isNull(a.[PO_TIME],s.[AWARD_DEADLINE]),s.[AWARD_STATUS_CODE],s.[AWARD_STATUS_DATE],s.[AWARD_NOTE_TEXT]
      ,s.[OSSO_IDR],s.[TAA_IDR],s.[MICROPURCHASE_IDR],s.[AUTH_RESELLER_ONLY_IDR],s.[AUTHORIZED_IDR],s.[PRE_REVIEWED_IDR],s.[INCLUDE_VAR_IDR],s.[INCLUDE_OEM_IDR],s.[EVALUATION_METHOD_CODE],s.[EVALUATION_CRITERIA_TYPE_CODE],s.[OTHER_INSTRUCTIONS],s.[CANCEL_REASON_CODE],s.[CANCEL_REASON]
      ,s.[CUSTOMER_COTR_COST_PROPOSALS_VISIBLE_IDR],s.[HEALTH_IT_RELATED_IDR],s.[EXCLUDE_OTHER_THAN_SMALL_BUSINESS_IDR],s.[INCUMBENT],s.[BRAND_NAME_JUSTIFICATION_IDR],s.[OTHER_CONTRACT_DESCRIPTION],s.[PROPOSAL_INSTRUCTIONS],s.[PROPOSAL_DELIVERY_METHOD_CODE]
      ,oa.[NAME_CODE],'C_AMENDMENT',oa.[TYPE_CODE],oa.[DESCRIPTION],oa.[NOTE_TEXT],s.[EFFECTIVE_START_DATE],s.[EFFECTIVE_END_DATE],oa.STATUS_CODE, oa.[STATUS_DATE],oa.COMMENTS,oa.REFERENCE_ID,oa.REFERENCE_NAME,oa.CREATED_DATE,oa.[CREATED_BY],oa.[UPDATED_DATE],oa.[UPDATED_BY],oa.[UPDATED_COUNT],744,oa.VERSION
FROM ORDER_COMPLIANCES s INNER JOIN ORDERS o on s.ORDER_IDF = o.IDF INNER JOIN ORDERS oa on o.IDF = oa.PARENT_IDF and oa.PARENT_CODE = 'C_AMENDMENT'
INNER JOIN [CIOCSBK].[dbo].[SYM_TO_AMENDMENT] a on 'SYM_TO_AMENDMENT:'+cast(a.ID as varchar(8)) = oa.REFERENCE_ID

UPDATE o SET LINK_COMPLIANCE_IDF = o.IDF
FROM ORDERS o INNER JOIN ORDER_COMPLIANCES s on o.IDF = s.ORDER_IDF WHERE s.CATEGORY_CODE = 'C_AMENDMENT'

----- Create a special records for amendment
INSERT INTO [dbo].[ORDER_DETAILS](IDF,[ORDER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME] ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL] ,[VERSION],[DOCUMENT_IDF],[NOTE_TEXT],[NOTE_CODE],[MESSAGE])
SELECT dbo.fn_NewIDFExt('AMDN',default,default), o.IDF, 'Additional info for Amendment: '+o.VALUE_CODE, 'C_SUMMARY','C_AMENDENT', a.[REJECTION_MESSAGE],o.[STATUS_CODE],o.[STATUS_DATE],'',o.REFERENCE_CODE, o.REFERENCE_ID,o.REFERENCE_NAME,o.CREATED_DATE, o.CREATED_BY, o.UPDATED_DATE, o.UPDATED_BY,  o.UPDATED_COUNT,o.[ACCESS_LEVEL] ,o.[VERSION],NULL, a.[DESCRIPTION], 'C_DESC_SUMMARY', a.SUMMARY
FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_TO_AMENDMENT] a on 'SYM_TO_AMENDMENT:'+cast(a.ID as varchar(8)) = o.REFERENCE_ID
WHERE left(o.IDF,4) = 'AMND'
GO
---------- Second part
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
---- Order Questions
INSERT INTO ORDER_QUESTIONS(IDF, ORDER_IDF, CONTRACTOR_IDF, CUSTOMER_IDF, OWNER_IDF, QUESTION_NUMBER, ORDER_STAGE_CODE
      ,NAME_CODE,[DESCRIPTION],NOTE_TEXT,[CATEGORY_CODE],[TYPE_CODE], POSITION_ORDER,RESPONSE_READY_IDR, RELEASE_READY_IDR, REVISION_IDR
      ,[COMMENTS],[REFERENCE_CODE], [REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_BY],[CREATED_DATE],[UPDATED_BY],[UPDATED_DATE],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION]
           )
SELECT dbo.fn_NewIDFExt('OQUS',q.CREATED_WHEN,CAST(q.ID as varchar(8))), o.IDF, dbo.fn_GetIDF(q.[ORGANIZATION_ID],'C_ORGANIZATION'), o.CUSTOMER_IDF, o.OWNER_IDF, q.QUESTION_NUMBER, 'C_ORD_RESPONSE'
      ,o.NAME_CODE, SubString(q.[QUESTION_TEXT],1,256),q.[QUESTION_TEXT],'C_PUBLIC','C_CONTRACTOR', q.[QUESTION_NUMBER],case q.[HAS_ANSWER] when 'T' THEN 1 else 0 END, CASE q.[READY_FOR_RELEASE] WHEN 'T' THEN 1 ELSE 0 END, 0
      ,'Migrated From SYM_TASK_ORDER_QUESTION_ANSWER on Date: ', o.REFERENCE_CODE, 'SYM_TASK_ORDER_QUESTION_ANSWER:'+cast(q.id as varchar(8)),'SYM_TASK_ORDER_QUESTION_ANSWER',o.[STATUS_CODE],o.[STATUS_DATE], q.[CREATED_BY],q.[CREATED_WHEN],q.[MODIFIED_BY],q.[MODIFIED_WHEN],q.[VERSION], 744,'VERSION:'+CAST(q.[VERSION] as varchar(4))
FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER_QUESTION_ANSWER] q on o.REFERENCE_ID = 'SYM_ORDER:'+cast(q.task_order_id as varchar(8))

--- Answers to Questions
INSERT INTO QUESTION_ANSWERS(IDF, QUESTION_IDF, CONTRACTOR_IDF, CUSTOMER_IDF, OWNER_IDF, ANSWER_NUMBER
       ,NAME_CODE,[DESCRIPTION], NOTE_TEXT,[CATEGORY_CODE],[TYPE_CODE], POSITION_ORDER, RELEASE_READY_IDR, REVISION_IDR
       ,[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[STATUS_CODE],[STATUS_DATE],[CREATED_BY],[CREATED_DATE],[UPDATED_BY],[UPDATED_DATE],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('ANWS',q.CREATED_WHEN,CAST(q.ID as varchar(8))), o.IDF, o.CONTRACTOR_IDF, o.CUSTOMER_IDF, o.OWNER_IDF,1
      , o.NAME_CODE,substring(q.[ANSWER_TEXT],1,256),q.[ANSWER_TEXT],'C_PUBLIC','C_CONTRACTOR', 1, CASE q.[READY_FOR_RELEASE] WHEN 'T' THEN 1 ELSE 0 END , 0
      ,'Migrated From SYM_TASK_ORDER_QUESTION_ANSWER on Date: ', o.REFERENCE_CODE, 'SYM_TASK_ORDER_QUESTION_ANSWER:'+cast(q.id as varchar(8)),'SYM_TASK_ORDER_QUESTION_ANSWER',o.[STATUS_CODE],o.[STATUS_DATE], q.[CREATED_BY],q.[CREATED_WHEN], q.[MODIFIED_BY],q.[MODIFIED_WHEN], q.[VERSION], 744,'VERSION:'+CAST(q.[VERSION] as varchar(4))
FROM ORDER_QUESTIONS o INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER_QUESTION_ANSWER] q on o.REFERENCE_ID = 'SYM_TASK_ORDER_QUESTION_ANSWER:'+cast(q.ID as varchar(8))

UPDATE q SET PARENT_IDF = p.IDF, PARENT_CODE = 'C_PARENT_QUES'
FROM ORDER_QUESTIONS q INNER JOIN [CIOCSBK].[dbo].[SYM_TASK_ORDER_QUESTION_ANSWER] sq on q.REFERENCE_ID = 'SYM_TASK_ORDER_QUESTION_ANSWER:'+cast(sq.id as varchar(8))
INNER JOIN ORDER_QUESTIONS p on p.REFERENCE_ID = 'SYM_TASK_ORDER_QUESTION_ANSWER:'+cast(sq.[REFER_TO_QUESTION_ID] as varchar(8))
where sq.[REFER_TO_QUESTION_ID] is not null

INSERT INTO [dbo].[NOTE_COMMENTS] ([IDF],[OWNER_IDF],[OWNER_CODE],[OWNER_STATUS_CODE],[WRITER_IDF],[PARENT_IDF],[PARENT_CODE],[PRIMARY_IDR],[DOCUMENT_IDF]
           ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[DESCRIPTION] ,[NOTE_TEXT],[BODY_TEXT],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION],[POSITION_ORDER])
SELECT dbo.fn_NewIDFExt('ONTE',n.CREATED_WHEN,cast(n.ID as varchar(5))), o.IDF, 'C_ORDER', dbo.fn_GetMapSetCode(n.[TASK_ORDER_STATUS],'C_ORDER_STAUS'), dbo.fn_GetIDF(n.[SYM_PERSON_ID],'C_PERSON'), NULL,NULL, 1, NULL
      ,'Note for Order ' + o.VALUE_CODE, 'C_PRIVATE','C_NITAAC', 'C_INTERNAL', '', n.NOTE_TEXT, n.NOTE_TEXT, NULL, NULL
      ,o.STATUS_CODE, o.STATUS_DATE, 'Migrated SYM_NOTE From On Date: ','SYM_NOTE:'+cast(n.ID as varchar(8)),'SYM_NOTE',  n.[CREATED_WHEN],n.[CREATED_BY],n.[MODIFIED_WHEN],n.[MODIFIED_BY],n.[VERSION], 744,'VERSION:'+CAST(n.[VERSION] as varchar(4)), 1
FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_NOTE] n on o.REFERENCE_ID = 'SYM_ORDER:'+ cast(n.task_order_id as varchar(8))

--- collect POCs
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.CO_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF,o.CO_NAME_CODE, NULL, 'C_FC_POC','C_CO','PREFFERED POC: ' + o.CO_NAME_CODE + ' a role of CO.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.CO_IDF,'') <> ''
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.CO_ALT_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.CO_ALT_NAME_CODE, NULL, 'C_FC_POC','C_CO_ALT','PREFFERED POC: ' + o.CO_ALT_NAME_CODE + ' a role of CO ALT.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.CO_ALT_IDF,'') <> '' AND o.CO_ALT_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])

INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.CS_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.CS_NAME_CODE, NULL, 'C_FC_POC','C_CS','PREFFERED POC: ' + o.CS_NAME_CODE + ' a role of CS.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.CS_IDF,'') <> ''  AND o.CS_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.CS_ALT_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.CS_ALT_NAME_CODE, NULL, 'C_FC_POC','C_CS_ALT','PREFFERED POC: ' + o.CS_ALT_NAME_CODE + ' a role of CS ALT.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.CS_ALT_IDF,'') <> '' AND o.CS_ALT_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])

INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.AMO_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.AMO_NAME_CODE, NULL, 'C_FC_POC','C_AMO','PREFFERED POC: ' + o.AMO_NAME_CODE + ' a role of AMO.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.AMO_IDF,'') <> ''  AND o.AMO_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.AMO_ALT_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.AMO_ALT_NAME_CODE, NULL, 'C_FC_POC','C_AMO_ALT','PREFFERED POC: ' + o.AMO_ALT_NAME_CODE + ' a role of CS ALT.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.AMO_ALT_IDF,'') <> '' AND o.AMO_ALT_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])

INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.COTR_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.COTR_NAME_CODE, NULL, 'C_FC_POC','C_COTR','PREFFERED POC: ' + o.COTR_NAME_CODE + ' a role of COTR.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.COTR_IDF,'') <> ''  AND o.COTR_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.COTR_ALT_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.COTR_ALT_NAME_CODE, NULL, 'C_FC_POC','C_COTR_ALT','PREFFERED POC: ' + o.COTR_ALT_NAME_CODE + ' a role of COTR ALT.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.COTR_ALT_IDF,'') <> '' AND o.COTR_ALT_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])

INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.ISSO_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.ISSO_NAME_CODE, NULL, 'C_FC_POC','C_ISSO','PREFFERED POC: ' + o.ISSO_NAME_CODE + ' a role of ISSO.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.ISSO_IDF,'') <> ''  AND o.ISSO_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])
INSERT INTO [dbo].[REF_REOURCE_SHARING]([IDF],[USER_IDF],[ORGANIZATION_IDF],[APPLICATION_IDF],[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE] ,[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[PRIMARY_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[ORGANIZATION_LEVEL_DEPTH],[ORGANIZATION_LEVEL_NAME])
SELECT  dbo.fn_NewIDFExt('POCFC',default,default), o.ISSO_ALT_IDF, o.CUSTOMER_IDF,o.APPLICATION_IDF, o.ISSO_ALT_NAME_CODE, NULL, 'C_FC_POC','C_ISSO_ALT','PREFFERED POC: ' + o.ISSO_ALT_NAME_CODE + ' a role of ISSO ALT.', NULL, o.CREATED_DATE
 ,o.[STATUS_CODE],o.[STATUS_DATE],o.[COMMENTS],o.IDF,f.LEVEL_I_NAME,1,o.[CREATED_DATE],o.[CREATED_BY],o.[UPDATED_DATE],o.[UPDATED_BY],o.[UPDATED_COUNT],NULL,o.[ACCESS_LEVEL],o.[VERSION],f.LEVEL_DEPTH, f.NAME_CODE
FROM ORDERS o INNER JOIN FEDERAL_ORGANIZATIONS f on o.CUSTOMER_IDF = f.IDF
WHERE isNull(o.ISSO_ALT_IDF,'') <> '' AND o.ISSO_ALT_IDF not in (select USER_IDF FROM [dbo].[REF_REOURCE_SHARING])

/*
INSERT INTO [dbo].[ORDER_CLINS]([ORDER_IDF],[CLIN_IDF],[REFERENCE_CODE]
           ,[BRAND_NAME_JUSTIFICATION_IDR],[TAA_IDR],[WARRANTY_IDR],[QUANTITY],[UNIT_PRICE],[SUBTOTAL]
           ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[REASON_CODE],[DESCRIPTION],[NOTE_TEXT],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT  c.ORDER_IDF, o.CLIN_IDF, o.REFERNENCE_CODE
FROM [dbo].[ORDER_CLINS] c INNER JOIN CIOCSBK].[dbo].[SYM_CIOCS_ORDER_DETAILS] d on cast(d.id as varchar(8)) = o.VALUE_CODE

      ,t.[CS_AUTHORIZED_TO_AWARD]    -- move to award
      ,t.[CUST_CS_AUTHORITY_LIMITED] -- move to award

UPDATE c [dbo].[ORDER_CLINS] set BRAND_NAME_JUSTIFICATION_IDR = d.[BRAND_NAME_JUSTIFICATION], SET TAA_IDR = d.[TAA]
FROM [dbo].[ORDER_CLINS] c INNER JOIN CIOCSBK].[dbo].[SYM_CIOCS_ORDER_DETAILS] d on cast(d.id as varchar(8)) = o.VALUE_CODE
*/

Print '------------- Data Migration  [dbo].[sc_Order_Amendment_Module]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Propoal_Module]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Propoal_Module]  -----START: ' + cast(GetDate() as varchar(24))
Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'

--- INSERT INTO PROPOSAL
INSERT INTO [dbo].[PROPOSALS]([IDF] ,[CONTRACT_IDF],[CONTRACTOR_IDF],[ORDER_IDF],[APPLICATION_IDF],FINANCE_IDR
           ,[REVISION_IDR],[REVISION_DOCUMENT_COUNT],[DOCUMENT_IDR],[DOCUMENT_COUNT],[SUBMISSION_DATE],[DOCUMENT_NOTE_TEXT]
           ,[POC_IDF],[SUBMITTER_IDF]
           ,[VALUE_CODE],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
          -- ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('BNP',p.[CREATED_WHEN], cast(p.ID as varchar(5))), dbo.fn_GetMapIDF(r.CONTRACTOR_IDF,'C_CONTRACT'), r.CONTRACTOR_IDF, r.ORDER_IDF, r.APPLICATION_IDF, 1
       ,Case when p.[REVISED_FILE_COUNT] > 0 then 1 else 0 END, p.[REVISED_FILE_COUNT],case when p.[FILE_COUNT] > 0 then 1 else 0 END, p.[FILE_COUNT],p.[SUBMISSION_TIME], p.[ATTACHMENT_DIR]
       ,e.IDF, isNull(e.IDF, dbo.fn_GetIDF(p.[SUBMITTER_ID],'C_USER'))
      ,cast(p.ID as varchar(10)),r.NAME_CODE, 'C_PROPOSAL', Case when p.[REVISED_FILE_COUNT] > 0 THEN 'C_REVISION' ELSE 'C_INITIAL' END,'PROPOSAL For Order: '+ r.REFERENCE_CODE
       ,r.[STATUS_CODE],r.[STATUS_DATE],'Migrated from SYM_PROPOSAL On Date: ','SYM_PROPOSAL:'+cast(p.ID as varchar(8)),'SYM_PROPOSAL',p.[CREATED_WHEN],p.[CREATED_BY],p.[MODIFIED_WHEN],p.[MODIFIED_BY],p.[VERSION],744,'VAERSION:'+cast(p.VERSION as varchar(8))
       FROM [CIOCSBK].[dbo].[SYM_PROPOSAL] p INNER JOIN [CIOCSBK].[dbo].[SYM_BIDS] b on p.ID = b.Proposal_ID INNER JOIN ORDER_RESPONSES r on r.REFERENCE_ID = 'SYM_BIDS:'+ cast(b.ID as varchar(8))
           INNER JOIN USERS e on e.UserName = p.CREATED_BY

Update P Set CONTACT_IDF = u.CONTACT_IDF
FROM PROPOSALS p INNER JOIN USERS u on u.IDF = p.SUBMITTER_IDF

UPDATE r Set PROPOSAL_IDF = p.IDF, SUBMITTER_IDF = p.SUBMITTER_IDF, CONTACT_IDF = p.CONTACT_IDF
FROM ORDER_RESPONSES r inner JOIN PROPOSALS p on p.ORDER_IDF = r.ORDER_IDF and p.CONTRACTOR_IDF = r.CONTRACTOR_IDF

------------Install proposal
INSERT INTO [dbo].[PROPOSAL_FINANCES](IDF, PROPOSAL_IDF, CONTRACTOR_IDF
,REVISED_FEE_CERT_IDR, REVISED_TOTAL_AMOUNT, FEE_CERT_IDR, TOTAL_AMOUNT, PROPOSED_AMOUNT,  AMOUNT_UOM
,FEE_TYPE_CODE,FEE_RATE, FEE_OVERRIDE_IDR, MODIFICATION_IDR,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
select dbo.fn_NewIDFExt('BPFIN',p.[CREATED_WHEN], cast(p.ID as varchar(8))),b.IDF, b.CONTRACTOR_IDF
,CASE [REVISED_FEE_CERT] WHEN 'T' THEN 1 ELSE 0 END,[REVISED_TOTAL_AMOUNT],CASE [FEE_CERT] WHEN 'T' THEN 1 ELSE 0 END, p.[TOTAL_AMOUNT], isNull(p.[REVISED_TOTAL_AMOUNT],p.[TOTAL_AMOUNT]),d.AMOUNT_UOM
,'C_DEFAULT',d.Rate,0,0,b.[NAME_CODE],b.[CATEGORY_CODE],b.[TYPE_CODE],'Proposal Finance: for Proposal ' + b.Value_Code
,b.[STATUS_CODE],b.[STATUS_DATE],b.[COMMENTS],b.[REFERENCE_ID],b.[REFERENCE_NAME],b.[CREATED_DATE],b.[CREATED_BY],b.[UPDATED_DATE],b.[UPDATED_BY],b.[UPDATED_COUNT],b.[ACCESS_LEVEL],b.[VERSION]
FROM [CIOCSBK].[dbo].[SYM_PROPOSAL] p INNER JOIN [dbo].[PROPOSALS] b on b.REFERENCE_ID = 'SYM_PROPOSAL:'+cast(p.ID as varchar(8))
INNER JOIN REF_NITAAC_FEE_RATES d on b.APPLICATION_IDF = d.APPLICATION_IDF and d.TYPE_CODE = 'C_RATE'
WHERE d.CATEGORY_CODE = 'C_NCAF' AND Left(d.VALUE_CODE,6) = 'C_FEE_'

UPDATE [dbo].[PROPOSAL_FINANCES] Set FEE =  FEE_RATE * PROPOSED_AMOUNT, CALCULATED_AMOUNT = (FEE_RATE + 1)*PROPOSED_AMOUNT, FEE_CALCULATED = FEE_RATE * PROPOSED_AMOUNT
WHERE FEE_RATE IS NOT NULL

--- ,[EVALUATION_DIR]

--- require Order_reponses and proposals
INSERT INTO [ORDER_MESSAGES](IDF,[ORDER_IDF],[MESSAGE_IDF],[PROPOSAL_IDF],[PRIMARY_IDR],RECEIVER_IDF, CONTRACTOR_IDF, CUSTOMER_IDF,SENDER_IDF,  [REVISION_IDR],[REVISION_DEADLINE]
      ,[NAME_CODE],[ACTION_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[NOTE_TEXT],[BODY_TEXT]
      ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE] ,[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT dbo.fn_NewIDFExt('OMSG',m.Created_When,default), o.IDF, NULL, r.PROPOSAL_IDF, 1,r.POC_IDF, isNull(dbo.fn_GetIDF(m.[CONTRACT_HOLDER_ORG_ID],'C_ORGANIZATION'),r.CONTRACTOR_IDF), o.CUSTOMER_IDF, e.IDF, 1,m.[REVISION_DEADLINE],
          'Message for Order revision for the order Proposal: '+o.VALUE_CODE,'C_RELEASE', 'C_ORDER','C_REVISION','Order Proposal Message:' + o.VALUE_CODE, m.[REVISION_MESSAGE],m.[REVISION_MESSAGE]
          ,m.CREATED_WHEN, NULL, o.STATUS_CODE, o.STATUS_DATE,'Migrated From SYM_REVISION_MESSAGE on Date: ', 'SYM_REVISION_MESSAGE:'+ cast(m.ID as varchar(10)), 'SYM_REVISION_MESSAGE',m.[created_when],m.[created_by],m.[modified_when],m.[modified_by],m.[Version],744, 'VERSION:'+cast(m.[Version] as varchar(6))
     FROM ORDERS o INNER JOIN [CIOCSBK].[dbo].[SYM_REVISION_MESSAGE] m on o.REFERENCE_ID = 'SYM_ORDER:'+cast(m.[ORDER_DBID] as varchar(8)) INNER JOIN USERS e on e.username = m.created_by
     LEFT JOIN ORDER_RESPONSES r on r.REFERENCE_ID = 'SYM_NOBID:'+Cast(m.[SYM_BID_ID] as varchar(8))

INSERT INTO [dbo].[PROPOSAL_DELIVERIES]([IDF],[PROPOSAL_IDF],[CUSTOMER_IDF],[ADDRESS_IDF],[TELECOM_ADDRESS_IDF],[SUBMITTED_IDR]
           ,[REVISION_IDR],[CERTIFIED_IDR],[SUPPORT_NOTE_TEXT],[POC_IDF],[POC_NAME_CODE]
           ---,[SHIPPING_HANDING],[TAX_AMOUNT],[TAX_IDR],[EXTENDED_PRICE],[EXTENDED_TAX] ,[EXTENDED_DELIVERY]
           ,[DIRECTION],[DOCUMENT_IDR],[DOCUMENT_IDF]
           ,[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION]
           ,[POSITION_ORDER],[DELIVERY_DAYS_AFTER],[DELIVERY_START_DATE],[DELIVERY_END_DATE],[LAST_DELIVERY_IDR],[EXPEDITE_IDR],[DELIVERY_ITEM_COUNT],[FULL_DELIVERY_IDR],[PERCENT_TO_DELIVERY],[TOTAL_DELIVERY_NUMBER]
           ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[PROVIDER_NAME_CODE],[PROVIDER_IDF],[ALT_PROVIDER_NAME_CODE],[ALT_PROVIDER_IDF])
SELECT 'PDLV_'+right(od.[IDF],59),p.[IDF],od.[CUSTOMER_IDF],od.[ADDRESS_IDF],od.[TELECOM_ADDRESS_IDF],od.[SUBMITTED_IDR]
      ,od.[REVISION_IDR],od.[CERTIFIED_IDR],od.[INSTRUCTIONS],isNull(p.[POC_IDF],p.[SUBMITTER_IDF]), dbo.fn_GetPersonName(dbo.fn_GetMapIDF(isNull(p.[POC_IDF],p.[SUBMITTER_IDF]),'C_PERSON'),default)
      ,od.[NAME_CODE],od.[DOCUMENT_IDR],od.[DOCUMENT_IDF]--,[ACTION_CODE]
      ,od.[CATEGORY_CODE],od.[TYPE_CODE],od.[DESCRIPTION],od.[STATUS_CODE],od.[STATUS_DATE],od.[COMMENTS],od.[REFERENCE_ID],od.[REFERENCE_NAME],od.[CREATED_DATE],od.[CREATED_BY],od.[UPDATED_DATE],od.[UPDATED_BY],od.[UPDATED_COUNT],od.[ACCESS_LEVEL],od.[VERSION]
      ,od.[POSITION_ORDER],od.[DELIVERY_DAYS_AFTER] ,od.[DELIVERY_START_DATE],od.[DELIVERY_END_DATE],od.[LAST_DELIVERY_IDR],od.[EXPEDITE_IDR],od.[DELIVERY_ITEM_COUNT],od.[FULL_DELIVERY_IDR],od.[PERCENT_TO_DELIVERY],od.[TOTAL_DELIVERY_NUMBER]
      ,od.[EFFECTIVE_START_DATE],od.[EFFECTIVE_END_DATE],od.[PROVIDER_NAME_CODE],od.[PROVIDER_IDF],od.[ALT_PROVIDER_NAME_CODE],od.[ALT_PROVIDER_IDF]
  FROM [dbo].[ORDER_DELIVERIES] od INNER JOIN PROPOSALS p on p.ORDER_IDF = od.ORDER_IDF

--- fix CICS Proposal
UPDATE P SET CONTENT_COUNT = c.clin_count, [EFFECTIVE_END_DATE] = c.quote_expire_date, POC_IDF = isNull(dbo.fn_GetMapIDF(dbo.fn_GetIDF(c.poc,'C_PERSON'),'C_USER'),POC_IDF), EXPIRED_DATE = c.quote_expire_date
FROM PROPOSALS P INNER JOIN [CIOCSBK].[dbo].[ciocs_proposal] c on p.REFERENCE_ID = 'SYM_PROPOSAL:'+cast(c.proposal_id as varchar(8))

UPDATE d SET [DELIVERY_DAYS_AFTER] = c.delivery_in_days
FROM [dbo].[PROPOSAL_DELIVERIES] d INNER JOIN PROPOSALS p on d.PROPOSAL_IDF = p.IDF INNER JOIN [CIOCSBK].[dbo].[ciocs_proposal] c on p.REFERENCE_ID = 'SYM_PROPOSAL:'+cast(c.proposal_id as varchar(8))
WHERE isNull(c.delivery_in_days, 0 ) > 0

UPDATE f SET Fee = c.contract_access_fee, SHIPPING_AMOUNT = c.Shipping_handling, FEE_CERT_IDR = c.certified, CALCULATED_AMOUNT = NULL
FROM [dbo].[PROPOSAL_FINANCES] f INNER JOIN PROPOSALS p on f.PROPOSAL_IDF = p.IDF INNER JOIN [CIOCSBK].[dbo].[ciocs_proposal] c on p.REFERENCE_ID = 'SYM_PROPOSAL:'+cast(c.proposal_id as varchar(8))
WHERE isNull(f.fee, -1 ) < 0

UPDATE [dbo].[PROPOSAL_FINANCES] SET CALCULATED_AMOUNT = FEE + PROPOSED_AMOUNT WHERE CALCULATED_AMOUNT is null

--- CLINS
INSERT INTO [dbo].[PROPOSED_CLINS]([ITEM_IDF],[PROPOSAL_IDF],[CLIN_IDF],[TRP_IDF],[ORDER_ITEM_IDF],[CONTRACT_IDF],[CONTRACTOR_CLIN_ID],[PARENT_IDF],[APPROVER_IDF],[CSR_APPROVED_PRICE_IDR],[SUBMITTED_IDR],[QUOTE_TYPE]
           ,[PRICE],[QUOTE_PRICE],[DISCOUNT],[QUANTITY],[PRODUCT_DESCRIPTION],[PRICE_JUSTIFICATION],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION]
           ,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[VERSION])
SELECT isNULL(e.CLIN_IDF, dbo.fn_NewIDFExt('ITCLN',c.Created_When,cast(c.id as varchar(12)))), p.IDF, e.CLIN_IDF, e.TRP_IDF, oc.ITEM_IDF,p.CONTRACT_IDF,c.[vendor_clin_id], NULL
      ,dbo.fn_GetMapIDF(dbo.fn_GetIDF(c.[approver_id],'C_PERSON'),'C_USER'),case c.[IS_CSR_APPRVD_QPRICE] when 'T' THEN 1 WHEN 'F' THEN 0 END,c.[SUBMITTED],[quote_type]
      ,c.[cs_price],c.[quote_price],c.[discount],c.[quantity],c.[product_description],c.[PRICE_JUSTIFICATION],'CLIN','C_PROPOSAL','C_CLIN', NULL
      ,@v_STATUS,c.Created_when,'Migrated From ciocs_proposal_clin on date: ', 'ciocs_proposal_clin:'+cast(c.id as varchar(12)),'ciocs_proposal_clin', c.[created_when], c.[created_by],c.[modified_when],c.[modified_by],c.[version], 744, 'VERSION:'+Cast(c.[version] as varchar(8))
  FROM PROPOSALS p inner join CIOCSBK.[dbo].[ciocs_proposal_clin] c on p.REFERENCE_ID = 'SYM_PROPOSAL:'+Cast(c.Proposal_ID as varchar(8)) INNER JOIN REF_NITAAC_CONTRACTOR_CLINS e on e.REFERENCE_ID = 'COMMODITY_CLINS:'+ cast(c.clin_id as varchar(12)) and e.CONTRACT_IDF = p.CONTRACT_IDF
  LEFT JOIN ORDER_CLINS oc on oc.ORDER_IDF = p.ORDER_IDF

Print '------------- Data Migration  [dbo].[sc_Propoal_Module]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Award_Mod_Module]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Award_Mod_Module]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'


Print '------------- Data Migration  [dbo].[sc_Award_Mod_Module]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Finance_Module]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Finance_Module]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'


Print '------------- Data Migration  [dbo].[sc_Finance_Module]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sc_Documentation_Module]
----
-------------
Print '------------- Data Migration  [dbo].[sc_Documentation_Module]  -----START: ' + cast(GetDate() as varchar(24))

Declare @v_Status as varchar(8) = 'ACTIVE', @v_SDATE as date = GetDate(), @v_User as varchar(128)= sUser_NAME(), @v_RV as int = 0, @v_IDF as varchar(64)='', @v_Code as varchar(16) = 'C_PARENT'
/*
INSERT INTO [dbo].[DOCUMENTS] ([IDF],[TITLE],[REQUIRED_IDR],[HIDDEN_IDR] ,[PRIMARY_IDR]
      ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[FORMAT],[CONTENT_TYPE_CODE],[DESCRIPTION]
      ,[BODY_TEXT],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF]
      ,[SUBMITTED_IDR],[SUBMITTED_DATE],[SUBMITTED_BY],[UPLOADED_DATE],[APPLICATION_IDF],[SUBMITTER_IDF],[SUBMITTER_TYPE_CODE],[CONTACT_IDF]
      ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],SPONSOR_IDF,[OWNER_IDF],[OWNER_CODE]

SELECT dbo.fn_NewIDFExt('DORD',a.[CREATED_WHEN],default),a.[TITLE],1,case a.[show_prop_attach_to_subcontractor] when 1 then 0 when 0 then 1 else null end, 1
      ,[ATTACHMENT_FILE],o.CATEGORY_CODE,dbo.fn_GetInfo(a.[DOCUMENT_TYPE_ID],'C_DOCUMENT_TYPE'),'PDF','C_UNKNOWN',a.[DESCRIPTION]
      ,'',[DIRECTORY_PATH],o.STATUS_CODE, o.STATUS_DATE, 'Migrated from SYM_ATTACHMENT on Date: ',o.VALUE_CODE, 'SYM_ATTACHMENT:' + cast(a.ID as varchar(8)),'SYM_ATTACHMENT',a.[CREATED_WHEN],a.[CREATED_BY],a.[MODIFIED_WHEN],a.[MODIFIED_BY],[VERSION],0, 744,'VERSION:'+cast(a.Version as varchar(8)),'C_BASE',o.IDF
      ,1,a.[CREATED_WHEN],a.[CREATED_BY],a.[CREATED_WHEN],o.APPLICATION_IDF,o.OWNER_IDF,'C_CUSTOMER',o.CONTACT_IDF
      ,a.[RELEASED_DATETIME],NULL,dbo.GetIDF(a.[ORGANIZATION_ID],'C_ORGANIZAITON'),o.IDF,'C_ORDER',
FROM [CIOCSBK].[dbo].[SYM_ATTACHMENT] a inner join ORDERS o on (o.REFERENCE_ID = 'SYM_ORDER:'+cast(a.[ORDER_DBID] as varchar(8)) or o.REFERENCE_ID = 'SYM_AMENDMENTS:'+cast(a.[AMENDMENT_ID] as varchar(8)))
WHERE isNull(a.[ORDER_DBID],0) <> 0 or isNull(a.[AMENDMENT_ID],0) <> 0

INSERT INTO [dbo].[DOCUMENTS] ([IDF],[TITLE],[REQUIRED_IDR],[HIDDEN_IDR] ,[PRIMARY_IDR]
      ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[FORMAT],[CONTENT_TYPE_CODE],[DESCRIPTION]
      ,[BODY_TEXT],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF]
      ,[SUBMITTED_IDR],[SUBMITTED_DATE],[SUBMITTED_BY],[UPLOADED_DATE],[APPLICATION_IDF],[SUBMITTER_IDF],[SUBMITTER_TYPE_CODE],[CONTACT_IDF]
      ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],SPONSOR_IDF,[OWNER_IDF],[OWNER_CODE]

SELECT dbo.fn_NewIDFExt('DORD',a.[CREATED_WHEN],default),a.[TITLE],1,case a.[show_prop_attach_to_subcontractor] when 1 then 0 when 0 then 1 else null end, 1
      ,[ATTACHMENT_FILE],'C_ORDER',dbo.fn_GetInfo(a.[DOCUMENT_TYPE_ID],'C_DOCUMENT_TYPE'),'PDF','C_UNKNOWN',a.[DESCRIPTION]
      ,'',[DIRECTORY_PATH],o.STATUS_CODE, o.STATUS_DATE, 'Migrated from SYM_ATTACHMENT on Date: ',o.VALUE_CODE, 'SYM_ATTACHMENT:' + cast(a.ID as varchar(8)),'SYM_ATTACHMENT',a.[CREATED_WHEN],a.[CREATED_BY],a.[MODIFIED_WHEN],a.[MODIFIED_BY],[VERSION],0, 744,'VERSION:'+cast(a.Version as varchar(8)),'C_BASE',o.IDF
      ,1,a.[CREATED_WHEN],a.[CREATED_BY],a.[CREATED_WHEN],o.APPLICATION_IDF,o.OWNER_IDF,'C_CUSTOMER',o.CONTACT_IDF
      ,a.[RELEASED_DATETIME],NULL,dbo.GetIDF(a.[ORGANIZATION_ID],'C_ORGANIZAITON'),o.IDF,'C_ORDER',
FROM [CIOCSBK].[dbo].[SYM_ATTACHMENT] a inner join ORDER_MESSAGES o on o.REFERENCE_ID = 'SYM_ORDER_REVISION_MESSAGE:'+cast(a.[REV_MSG_ID] as varchar(8))
WHERE isNull(a.[REV_MSG_ID],0) <> 0


INSERT INTO [dbo].[DOCUMENTS] ([IDF],[TITLE],[REQUIRED_IDR],[HIDDEN_IDR] ,[PRIMARY_IDR]
      ,[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[FORMAT],[CONTENT_TYPE_CODE],[DESCRIPTION]
      ,[BODY_TEXT],[NOTE_TEXT],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[PARENT_CODE],[PARENT_IDF]
      ,[SUBMITTED_IDR],[SUBMITTED_DATE],[SUBMITTED_BY],[UPLOADED_DATE],[APPLICATION_IDF]
      ,[SUBMITTER_IDF],[SUBMITTER_TYPE_CODE],[CONTACT_IDF]
      ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],SPONSOR_IDF,[OWNER_IDF],[OWNER_CODE]
SELECT dbo.fn_NewIDF('TRP',d.CREATED_WHEN, default), d.TITLE, 1, 0, 0
      ,d.[FILE_NAME],'C_TRP',dbo.fn_GetMapSetCode(d.[DOCUMENT_TYPE],'C_DOCUMENT_TYPE'),'C_DEFAULT','C_PDF',d.[COMMENTS]
      ,d.[FILE_LOCATION],@v_STATUS, @v_SDATE,'Migrated From on Date: ', case d.[UPDATE_FLAG] when 1 THEN 'C_UPDATE' else 'C_DEFAULT', 'TRP_UPLOADED_DOCUMENTS:'+cast(id as varchar(8)),'TRP_UPLOADED_DOCUMENTS',[CREATED_WHEN],[CREATED_BY],[MODIFIED_WHEN],[MODIFIED_BY],[VERSION], 744, 'VERSION:'+ cast(VERSION as varchar(8)), NULL,NULL
      ,d.SUBMITTED, d.[SUBMIT_DATE],d.CREATED_BY, d.CREATED_DATE, t.APPLICATION_IDF,
      ,dbo.fn_GetIDF([VENDOR_ID],'C_PERSON'),'C_CH_USER', NULL
      ,CREATED_DATE,NULL,t.CONTRACTOR_IDF,t.IDF, 'C_TRP'
FROM [CIOCSBK].[dbo].[TRP_UPLOADED_DOCUMENTS] d  INNER JOIN PROPOSED_TRPS t on 'TRP_NEW:'+cast(d.TRP_ID as varchar(20)) = t.REFERENCE_ID --- and d.Vendor_ID =


      ,[SYM_PROPOSAL_ID]      ,
      ,[sym_award_id]
      ,[FSSI_ORDER_ID]
      ,[TO_DELETE_AMEND_ID]
      ,[SYM_MOD_ID]
      ,[SYM_ACCOUNT_TRANSACTION_ID]
*/

Print '------------- Data Migration  [dbo].[sc_Documentation_Module]  -----END: ' + cast(GetDate() as varchar(24))
GO

------------- Data Migration  [dbo].[sp_Cleanup]
----
-------------
Print '------------- Data Migration  [dbo].[sp_Cleanup]  -----START: ' + cast(GetDate() as varchar(24))
---- clean up all intermediate tables
if OBJECT_ID('SYM_PERSON_EXT') is not null
   Drop Table SYM_PERSON_EXT
if OBJECT_ID('SYM_ORGANIZATION_EXT') is not null
   Drop Table SYM_ORGANIZATION_EXT
if OBJECT_ID('APX_USER_EXT') Is not null
   Drop Table APX_USER_EXT

UPDATE CONTRACTS SET STATUS_CODE = 'ACTIVE' WHERE STATUS_CODE = 'PENDING'
DELETE FROM CODE_ROLES WHERE STATUS_CODE = 'DELETE'

Print '------------- Data Migration  [dbo].[sp_Cleanup]  -----END: ' + cast(GetDate() as varchar(24))
--Delete CODE_ROLES WHERE STATUS_CODE = 'DELETE'

GO

/*================================================================================*/
/* CREATE TRIGGERS                                                                */
/*================================================================================*/

IF OBJECT_ID('[TR_ACCOUNT_AUTHORIZATION_AD]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_AUTHORIZATION_AD]
GO
CREATE TRIGGER [TR_ACCOUNT_AUTHORIZATION_AD]
ON [dbo].[ACCOUNT_AUTHORIZATION] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ACCOUNT_AUTHORIZATION]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_AUTHORIZATION] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_AUTHORIZATION]',USER_IDF + ':=:' + CONTRACT_IDF , CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ACCOUNT_AUTHORIZATION_AU]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_AUTHORIZATION_AU]
GO

CREATE TRIGGER [TR_ACCOUNT_AUTHORIZATION_AU]
ON [dbo].[ACCOUNT_AUTHORIZATION] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.USER_IDF = D.USER_IDF AND  I.CONTRACT_IDF = D.CONTRACT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ACCOUNT_AUTHORIZATION] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ACCOUNT_AUTHORIZATION] I INNER JOIN DELETED D on I.USER_IDF = D.USER_IDF AND  I.CONTRACT_IDF = D.CONTRACT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ACCOUNT_AUTHORIZATION]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_AUTHORIZATION] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_AUTHORIZATION]',USER_IDF + ':=:' + CONTRACT_IDF , CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ACCOUNT_STATEMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_STATEMENTS_AD]
GO
CREATE TRIGGER [TR_ACCOUNT_STATEMENTS_AD]
ON [dbo].[ACCOUNT_STATEMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ACCOUNT_STATEMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_STATEMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_STATEMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ACCOUNT_STATEMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_STATEMENTS_AU]
GO

CREATE TRIGGER [TR_ACCOUNT_STATEMENTS_AU]
ON [dbo].[ACCOUNT_STATEMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ACCOUNT_STATEMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ACCOUNT_STATEMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ACCOUNT_STATEMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_STATEMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_STATEMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ACCOUNT_TRANSACTIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_TRANSACTIONS_AD]
GO
CREATE TRIGGER [TR_ACCOUNT_TRANSACTIONS_AD]
ON [dbo].[ACCOUNT_TRANSACTIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ACCOUNT_TRANSACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_TRANSACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_TRANSACTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ACCOUNT_TRANSACTIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ACCOUNT_TRANSACTIONS_AU]
GO

CREATE TRIGGER [TR_ACCOUNT_TRANSACTIONS_AU]
ON [dbo].[ACCOUNT_TRANSACTIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ACCOUNT_TRANSACTIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ACCOUNT_TRANSACTIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ACCOUNT_TRANSACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ACCOUNT_TRANSACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ACCOUNT_TRANSACTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ADDRESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ADDRESSES_AD]
GO
CREATE TRIGGER [TR_ADDRESSES_AD]
ON [dbo].[ADDRESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ADDRESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ADDRESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ADDRESSES_AU]
GO

CREATE TRIGGER [TR_ADDRESSES_AU]
ON [dbo].[ADDRESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ADDRESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ADDRESSES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ADDRESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ANNOUNCEMENT_AD]','TR') is not NULL
     DROP TRIGGER [TR_ANNOUNCEMENT_AD]
GO
CREATE TRIGGER [TR_ANNOUNCEMENT_AD]
ON [dbo].[ANNOUNCEMENT] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ANNOUNCEMENT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ANNOUNCEMENT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ANNOUNCEMENT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ANNOUNCEMENT_AU]','TR') is not NULL
     DROP TRIGGER [TR_ANNOUNCEMENT_AU]
GO

CREATE TRIGGER [TR_ANNOUNCEMENT_AU]
ON [dbo].[ANNOUNCEMENT] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ANNOUNCEMENT] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ANNOUNCEMENT] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ANNOUNCEMENT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ANNOUNCEMENT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ANNOUNCEMENT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ANNOUNCEMENT_BI]','TR') is not NULL
     DROP TRIGGER [TR_ANNOUNCEMENT_BI]
GO
CREATE TRIGGER [TR_ANNOUNCEMENT_BI]
ON [dbo].[ANNOUNCEMENT]
INSTEAD OF INSERT AS
BEGIN /* CODE check the IDF */
      if (SElECT COUNT(*) from INSERTED WHERE IDF IS NULL ) > 0
      BEGIN
              SELECT * INTO #T FROM INSERTED
              UPDATE #T SET IDF =  dbo.fn_NewIDFExt('ANNO', Default, Default) WHERE IDF is null
              INSERT INTO [dbo].[ANNOUNCEMENT] SELECT * FROM #T
              DROP TABLE #T
      END
      ELSE
         INSERT INTO [dbo].[ANNOUNCEMENT] SELECT * FROM INSERTED
END
GO

IF OBJECT_ID('[TR_APPLICATION_CONTENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_CONTENTS_AD]
GO
CREATE TRIGGER [TR_APPLICATION_CONTENTS_AD]
ON [dbo].[APPLICATION_CONTENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[APPLICATION_CONTENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_CONTENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_CONTENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_CONTENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_CONTENTS_AU]
GO

CREATE TRIGGER [TR_APPLICATION_CONTENTS_AU]
ON [dbo].[APPLICATION_CONTENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[APPLICATION_CONTENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[APPLICATION_CONTENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[APPLICATION_CONTENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_CONTENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_CONTENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_DOMAINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_DOMAINS_AD]
GO
CREATE TRIGGER [TR_APPLICATION_DOMAINS_AD]
ON [dbo].[APPLICATION_DOMAINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[APPLICATION_DOMAINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_DOMAINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_DOMAINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_DOMAINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_DOMAINS_AU]
GO

CREATE TRIGGER [TR_APPLICATION_DOMAINS_AU]
ON [dbo].[APPLICATION_DOMAINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[APPLICATION_DOMAINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[APPLICATION_DOMAINS] I INNER JOIN DELETED D on I.IDF = D.IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[APPLICATION_DOMAINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_DOMAINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_DOMAINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_RELEASES_AD]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_RELEASES_AD]
GO
CREATE TRIGGER [TR_APPLICATION_RELEASES_AD]
ON [dbo].[APPLICATION_RELEASES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[APPLICATION_RELEASES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_RELEASES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_RELEASES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_RELEASES_AU]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_RELEASES_AU]
GO

CREATE TRIGGER [TR_APPLICATION_RELEASES_AU]
ON [dbo].[APPLICATION_RELEASES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[APPLICATION_RELEASES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[APPLICATION_RELEASES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[APPLICATION_RELEASES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_RELEASES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_RELEASES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_ROLES_AD]
GO
CREATE TRIGGER [TR_APPLICATION_ROLES_AD]
ON [dbo].[APPLICATION_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[APPLICATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_ROLES]',APPLICATION_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','APPLICATION_IDF:=:ROLE_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_ROLES_AU]
GO

CREATE TRIGGER [TR_APPLICATION_ROLES_AU]
ON [dbo].[APPLICATION_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ROLE_IDF = D.ROLE_IDF and I.APPLICATION_IDF = D.APPLICATION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[APPLICATION_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[APPLICATION_ROLES] I INNER JOIN DELETED D on I.ROLE_IDF = D.ROLE_IDF and I.APPLICATION_IDF = D.APPLICATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[APPLICATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_ROLES]',APPLICATION_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','APPLICATION_IDF:=:ROLE_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_USERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_USERS_AD]
GO
CREATE TRIGGER [TR_APPLICATION_USERS_AD]
ON [dbo].[APPLICATION_USERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[APPLICATION_USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_USERS]',USER_IDF + ':=:' + APPLICATION_IDF , CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_APPLICATION_USERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_APPLICATION_USERS_AU]
GO

CREATE TRIGGER [TR_APPLICATION_USERS_AU]
ON [dbo].[APPLICATION_USERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.USER_IDF = D.USER_IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[APPLICATION_USERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[APPLICATION_USERS] I INNER JOIN DELETED D on I.USER_IDF = D.USER_IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[APPLICATION_USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[APPLICATION_USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[APPLICATION_USERS]', USER_IDF + ':=:' + APPLICATION_IDF , CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AUDIT_LOGS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AUDIT_LOGS_AD]
GO
CREATE TRIGGER [TR_AUDIT_LOGS_AD]
ON [dbo].[AUDIT_LOGS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AUDIT_LOGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_LOGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AUDIT_LOGS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AUDIT_LOGS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AUDIT_LOGS_AU]
GO

CREATE TRIGGER [TR_AUDIT_LOGS_AU]
ON [dbo].[AUDIT_LOGS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AUDIT_LOGS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AUDIT_LOGS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AUDIT_LOGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_LOGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AUDIT_LOGS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AUDIT_LOGS_BI]','TR') is not NULL
     DROP TRIGGER [TR_AUDIT_LOGS_BI]
GO
CREATE TRIGGER [TR_AUDIT_LOGS_BI]
ON [dbo].[AUDIT_LOGS]
INSTEAD OF INSERT AS
BEGIN /* CODE check the IDF */
      if (SElECT COUNT(*) from INSERTED WHERE IDF IS NULL ) > 0
      BEGIN
              SELECT * INTO #T FROM INSERTED
              UPDATE #T SET IDF =  dbo.fn_NewIDFExt('DEF', Default, Default) WHERE IDF is null
              INSERT INTO [dbo].[AUDIT_LOGS] SELECT * FROM #T
              DROP TABLE #T
      END
      ELSE
         INSERT INTO [dbo].[AUDIT_LOGS] SELECT * FROM INSERTED
END
GO

IF OBJECT_ID('[TR_AWARD_DELIVERABLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_DELIVERABLES_AD]
GO
CREATE TRIGGER [TR_AWARD_DELIVERABLES_AD]
ON [dbo].[AWARD_DELIVERABLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_DELIVERABLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_DELIVERABLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_DELIVERABLES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_DELIVERABLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_DELIVERABLES_AU]
GO

CREATE TRIGGER [TR_AWARD_DELIVERABLES_AU]
ON [dbo].[AWARD_DELIVERABLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_DELIVERABLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_DELIVERABLES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_DELIVERABLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_DELIVERABLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_DELIVERABLES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_DELIVERIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_DELIVERIES_AD]
GO
CREATE TRIGGER [TR_AWARD_DELIVERIES_AD]
ON [dbo].[AWARD_DELIVERIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_DELIVERIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_DELIVERIES_AU]
GO

CREATE TRIGGER [TR_AWARD_DELIVERIES_AU]
ON [dbo].[AWARD_DELIVERIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_DELIVERIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_DELIVERIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_FINANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_FINANCES_AD]
GO
CREATE TRIGGER [TR_AWARD_FINANCES_AD]
ON [dbo].[AWARD_FINANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_FINANCES]',AWARD_IDF+':=:'+PROPOSAL_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','AWARD_IDF:=:PROPOSAL_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_FINANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_FINANCES_AU]
GO

CREATE TRIGGER [TR_AWARD_FINANCES_AU]
ON [dbo].[AWARD_FINANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.AWARD_IDF = D.AWARD_IDF and I.PROPOSAL_IDF = D.PROPOSAL_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_FINANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_FINANCES] I INNER JOIN DELETED D on I.AWARD_IDF = D.AWARD_IDF and I.PROPOSAL_IDF = D.PROPOSAL_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_FINANCES]',AWARD_IDF+':=:'+PROPOSAL_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','AWARD_IDF:=:PROPOSAL_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_MODIFICATION_APPLIED_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_MODIFICATION_APPLIED_AD]
GO
CREATE TRIGGER [TR_AWARD_MODIFICATION_APPLIED_AD]
ON [dbo].[AWARD_MODIFICATION_APPLIED] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_MODIFICATION_APPLIED]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_MODIFICATION_APPLIED] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_MODIFICATION_APPLIED]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_MODIFICATION_APPLIED_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_MODIFICATION_APPLIED_AU]
GO

CREATE TRIGGER [TR_AWARD_MODIFICATION_APPLIED_AU]
ON [dbo].[AWARD_MODIFICATION_APPLIED] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_MODIFICATION_APPLIED] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_MODIFICATION_APPLIED] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_MODIFICATION_APPLIED]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_MODIFICATION_APPLIED] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_MODIFICATION_APPLIED]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_MODIFICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_MODIFICATIONS_AD]
GO
CREATE TRIGGER [TR_AWARD_MODIFICATIONS_AD]
ON [dbo].[AWARD_MODIFICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_MODIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_MODIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_MODIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_MODIFICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_MODIFICATIONS_AU]
GO

CREATE TRIGGER [TR_AWARD_MODIFICATIONS_AU]
ON [dbo].[AWARD_MODIFICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_MODIFICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_MODIFICATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_MODIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_MODIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_MODIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_PAYMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_PAYMENTS_AD]
GO
CREATE TRIGGER [TR_AWARD_PAYMENTS_AD]
ON [dbo].[AWARD_PAYMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_PAYMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_PAYMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_PAYMENTS]',AWARD_IDF+':=:'+PAYMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','AWARD_IDF:=:PAYMENT_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_PAYMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_PAYMENTS_AU]
GO

CREATE TRIGGER [TR_AWARD_PAYMENTS_AU]
ON [dbo].[AWARD_PAYMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.AWARD_IDF= D.AWARD_IDF AND I.PAYMENT_IDF = D.PAYMENT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_PAYMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_PAYMENTS] I INNER JOIN DELETED D on I.AWARD_IDF= D.AWARD_IDF AND I.PAYMENT_IDF = D.PAYMENT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_PAYMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_PAYMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_PAYMENTS]',AWARD_IDF+':=:'+PAYMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','AWARD_IDF:=:PAYMENT_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_PERIODS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_PERIODS_AD]
GO
CREATE TRIGGER [TR_AWARD_PERIODS_AD]
ON [dbo].[AWARD_PERIODS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARD_PERIODS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_PERIODS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_PERIODS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARD_PERIODS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARD_PERIODS_AU]
GO

CREATE TRIGGER [TR_AWARD_PERIODS_AU]
ON [dbo].[AWARD_PERIODS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARD_PERIODS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARD_PERIODS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARD_PERIODS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARD_PERIODS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARD_PERIODS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDED_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARDED_CLINS_AD]
GO
CREATE TRIGGER [TR_AWARDED_CLINS_AD]
ON [dbo].[AWARDED_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARDED_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDED_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDED_CLINS]',AWARD_IDF+':'+PROPOSAL_IDF+':'+CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','AWARD_IDF:PROPOSAL_IDF:CLIN_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDED_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARDED_CLINS_AU]
GO

CREATE TRIGGER [TR_AWARDED_CLINS_AU]
ON [dbo].[AWARDED_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.AWARD_IDF = D.AWARD_IDF AND I.PROPOSAL_IDF = D.PROPOSAL_IDF AND I.CLIN_IDF = D.CLIN_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARDED_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARDED_CLINS] I INNER JOIN DELETED D on I.AWARD_IDF = D.AWARD_IDF AND I.PROPOSAL_IDF = D.PROPOSAL_IDF AND I.CLIN_IDF = D.CLIN_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARDED_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDED_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDED_CLINS]',AWARD_IDF+':'+PROPOSAL_IDF+':'+CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','AWARD_IDF:PROPOSAL_IDF:CLIN_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDED_PROPOSALS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARDED_PROPOSALS_AD]
GO
CREATE TRIGGER [TR_AWARDED_PROPOSALS_AD]
ON [dbo].[AWARDED_PROPOSALS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARDED_PROPOSALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDED_PROPOSALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDED_PROPOSALS]',AWARD_IDF+':=:'+PROPOSAL_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','AWARD_IDF:=:PROPOSAL_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDED_PROPOSALS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARDED_PROPOSALS_AU]
GO

CREATE TRIGGER [TR_AWARDED_PROPOSALS_AU]
ON [dbo].[AWARDED_PROPOSALS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.AWARD_IDF= D.AWARD_IDF AND I.PROPOSAL_IDF = D.PROPOSAL_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARDED_PROPOSALS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARDED_PROPOSALS] I INNER JOIN DELETED D on I.AWARD_IDF= D.AWARD_IDF AND I.PROPOSAL_IDF = D.PROPOSAL_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARDED_PROPOSALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDED_PROPOSALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDED_PROPOSALS]',AWARD_IDF+':=:'+PROPOSAL_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','AWARD_IDF:=:PROPOSAL_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDS_AD]','TR') is not NULL
     DROP TRIGGER [TR_AWARDS_AD]
GO
CREATE TRIGGER [TR_AWARDS_AD]
ON [dbo].[AWARDS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[AWARDS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDS_AU]','TR') is not NULL
     DROP TRIGGER [TR_AWARDS_AU]
GO

CREATE TRIGGER [TR_AWARDS_AU]
ON [dbo].[AWARDS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[AWARDS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[AWARDS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[AWARDS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[AWARDS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[AWARDS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_AWARDS_BI]','TR') is not NULL
     DROP TRIGGER [TR_AWARDS_BI]
GO
CREATE TRIGGER [TR_AWARDS_BI]
ON [dbo].[AWARDS]
INSTEAD OF INSERT AS
BEGIN /* CODE check the IDF */
      if (SElECT COUNT(*) from INSERTED WHERE IDF IS NULL ) > 0
      BEGIN
              SELECT * INTO #T FROM INSERTED
              UPDATE #T SET IDF =  dbo.fn_NewIDFExt('AWD') WHERE IDF is null
              INSERT INTO [dbo].[AWARDS] SELECT * FROM #T
              DROP TABLE #T
      END
      ELSE
         INSERT INTO [dbo].[AWARDS] SELECT * FROM INSERTED
END
GO

IF OBJECT_ID('[TR_CLIN_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CLIN_DETAILS_AD]
GO
CREATE TRIGGER [TR_CLIN_DETAILS_AD]
ON [dbo].[CLIN_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CLIN_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CLIN_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CLIN_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CLIN_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CLIN_DETAILS_AU]
GO

CREATE TRIGGER [TR_CLIN_DETAILS_AU]
ON [dbo].[CLIN_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CLIN_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CLIN_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CLIN_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CLIN_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CLIN_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ACTIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ACTIONS_AD]
GO
CREATE TRIGGER [TR_CODE_ACTIONS_AD]
ON [dbo].[CODE_ACTIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_ACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ACTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ACTIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ACTIONS_AU]
GO

CREATE TRIGGER [TR_CODE_ACTIONS_AU]
ON [dbo].[CODE_ACTIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_ACTIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_ACTIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_ACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ACTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ACTIVITIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ACTIVITIES_AD]
GO
CREATE TRIGGER [TR_CODE_ACTIVITIES_AD]
ON [dbo].[CODE_ACTIVITIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ACTIVITIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ACTIVITIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ACTIVITIES_AU]
GO

CREATE TRIGGER [TR_CODE_ACTIVITIES_AU]
ON [dbo].[CODE_ACTIVITIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_ACTIVITIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_ACTIVITIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ACTIVITIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_APPLICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_APPLICATIONS_AD]
GO
CREATE TRIGGER [TR_CODE_APPLICATIONS_AD]
ON [dbo].[CODE_APPLICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_APPLICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_APPLICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_APPLICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_APPLICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_APPLICATIONS_AU]
GO

CREATE TRIGGER [TR_CODE_APPLICATIONS_AU]
ON [dbo].[CODE_APPLICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_APPLICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_APPLICATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_APPLICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_APPLICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_APPLICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_CATEGORY_TYPES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_CATEGORY_TYPES_AD]
GO
CREATE TRIGGER [TR_CODE_CATEGORY_TYPES_AD]
ON [dbo].[CODE_CATEGORY_TYPES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_CATEGORY_TYPES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_CATEGORY_TYPES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_CATEGORY_TYPES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_CATEGORY_TYPES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_CATEGORY_TYPES_AU]
GO

CREATE TRIGGER [TR_CODE_CATEGORY_TYPES_AU]
ON [dbo].[CODE_CATEGORY_TYPES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_CATEGORY_TYPES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_CATEGORY_TYPES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_CATEGORY_TYPES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_CATEGORY_TYPES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_CATEGORY_TYPES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ERRORS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ERRORS_AD]
GO
CREATE TRIGGER [TR_CODE_ERRORS_AD]
ON [dbo].[CODE_ERRORS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_ERRORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ERRORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ERRORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ERRORS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ERRORS_AU]
GO

CREATE TRIGGER [TR_CODE_ERRORS_AU]
ON [dbo].[CODE_ERRORS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_ERRORS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_ERRORS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_ERRORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ERRORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ERRORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_EVENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_EVENTS_AD]
GO
CREATE TRIGGER [TR_CODE_EVENTS_AD]
ON [dbo].[CODE_EVENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_EVENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_EVENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_EVENTS_AU]
GO

CREATE TRIGGER [TR_CODE_EVENTS_AU]
ON [dbo].[CODE_EVENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_EVENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_EVENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_EVENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_GROUPS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_GROUPS_AD]
GO
CREATE TRIGGER [TR_CODE_GROUPS_AD]
ON [dbo].[CODE_GROUPS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_GROUPS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_GROUPS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_GROUPS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_GROUPS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_GROUPS_AU]
GO

CREATE TRIGGER [TR_CODE_GROUPS_AU]
ON [dbo].[CODE_GROUPS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_GROUPS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_GROUPS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_GROUPS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_GROUPS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_GROUPS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_HOLIDAYS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_HOLIDAYS_AD]
GO
CREATE TRIGGER [TR_CODE_HOLIDAYS_AD]
ON [dbo].[CODE_HOLIDAYS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_HOLIDAYS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_HOLIDAYS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_HOLIDAYS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_HOLIDAYS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_HOLIDAYS_AU]
GO

CREATE TRIGGER [TR_CODE_HOLIDAYS_AU]
ON [dbo].[CODE_HOLIDAYS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_HOLIDAYS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_HOLIDAYS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_HOLIDAYS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_HOLIDAYS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_HOLIDAYS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_MESSAGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_MESSAGES_AD]
GO
CREATE TRIGGER [TR_CODE_MESSAGES_AD]
ON [dbo].[CODE_MESSAGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_MESSAGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_MESSAGES_AU]
GO

CREATE TRIGGER [TR_CODE_MESSAGES_AU]
ON [dbo].[CODE_MESSAGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_MESSAGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_MESSAGES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_NOTIFICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_NOTIFICATIONS_AD]
GO
CREATE TRIGGER [TR_CODE_NOTIFICATIONS_AD]
ON [dbo].[CODE_NOTIFICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_NOTIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_NOTIFICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_NOTIFICATIONS_AU]
GO

CREATE TRIGGER [TR_CODE_NOTIFICATIONS_AU]
ON [dbo].[CODE_NOTIFICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_NOTIFICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_NOTIFICATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_NOTIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ORDERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ORDERS_AD]
GO
CREATE TRIGGER [TR_CODE_ORDERS_AD]
ON [dbo].[CODE_ORDERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_ORDERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ORDERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ORDERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ORDERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ORDERS_AU]
GO

CREATE TRIGGER [TR_CODE_ORDERS_AU]
ON [dbo].[CODE_ORDERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_ORDERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_ORDERS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_ORDERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ORDERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ORDERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REGISTRATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REGISTRATIONS_AD]
GO
CREATE TRIGGER [TR_CODE_REGISTRATIONS_AD]
ON [dbo].[CODE_REGISTRATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_REGISTRATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REGISTRATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REGISTRATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REGISTRATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REGISTRATIONS_AU]
GO

CREATE TRIGGER [TR_CODE_REGISTRATIONS_AU]
ON [dbo].[CODE_REGISTRATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_REGISTRATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_REGISTRATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_REGISTRATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REGISTRATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REGISTRATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REPORTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REPORTS_AD]
GO
CREATE TRIGGER [TR_CODE_REPORTS_AD]
ON [dbo].[CODE_REPORTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REPORTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REPORTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REPORTS_AU]
GO

CREATE TRIGGER [TR_CODE_REPORTS_AU]
ON [dbo].[CODE_REPORTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_REPORTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_REPORTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REPORTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REQUESTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REQUESTS_AD]
GO
CREATE TRIGGER [TR_CODE_REQUESTS_AD]
ON [dbo].[CODE_REQUESTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_REQUESTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REQUESTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REQUESTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_REQUESTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_REQUESTS_AU]
GO

CREATE TRIGGER [TR_CODE_REQUESTS_AU]
ON [dbo].[CODE_REQUESTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_REQUESTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_REQUESTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_REQUESTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_REQUESTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_REQUESTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ROLES_AD]
GO
CREATE TRIGGER [TR_CODE_ROLES_AD]
ON [dbo].[CODE_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ROLES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_ROLES_AU]
GO

CREATE TRIGGER [TR_CODE_ROLES_AU]
ON [dbo].[CODE_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_ROLES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_ROLES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_SCHEDULERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_SCHEDULERS_AD]
GO
CREATE TRIGGER [TR_CODE_SCHEDULERS_AD]
ON [dbo].[CODE_SCHEDULERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_SCHEDULERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_SCHEDULERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_SCHEDULERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_SCHEDULERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_SCHEDULERS_AU]
GO

CREATE TRIGGER [TR_CODE_SCHEDULERS_AU]
ON [dbo].[CODE_SCHEDULERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_SCHEDULERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_SCHEDULERS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_SCHEDULERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_SCHEDULERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_SCHEDULERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_TASKS_AD]
GO
CREATE TRIGGER [TR_CODE_TASKS_AD]
ON [dbo].[CODE_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_TASKS_AU]
GO

CREATE TRIGGER [TR_CODE_TASKS_AU]
ON [dbo].[CODE_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_TASKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_TEMPLATES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_TEMPLATES_AD]
GO
CREATE TRIGGER [TR_CODE_TEMPLATES_AD]
ON [dbo].[CODE_TEMPLATES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_TEMPLATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_TEMPLATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_TEMPLATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_TEMPLATES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_TEMPLATES_AU]
GO

CREATE TRIGGER [TR_CODE_TEMPLATES_AU]
ON [dbo].[CODE_TEMPLATES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_TEMPLATES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_TEMPLATES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_TEMPLATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_TEMPLATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_TEMPLATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_VALUESETS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_VALUESETS_AD]
GO
CREATE TRIGGER [TR_CODE_VALUESETS_AD]
ON [dbo].[CODE_VALUESETS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_VALUESETS]([IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION] )
      SELECT [IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION]
      FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_VALUESETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_VALUESETS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_VALUESETS_AU]
GO

CREATE TRIGGER [TR_CODE_VALUESETS_AU]
ON [dbo].[CODE_VALUESETS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_VALUESETS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_VALUESETS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_VALUESETS]([IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION] )
      SELECT [IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION]
      FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_VALUESETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_WOKRFLOWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CODE_WOKRFLOWS_AD]
GO
CREATE TRIGGER [TR_CODE_WOKRFLOWS_AD]
ON [dbo].[CODE_WOKRFLOWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CODE_WOKRFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_WOKRFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_WOKRFLOWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CODE_WOKRFLOWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CODE_WOKRFLOWS_AU]
GO

CREATE TRIGGER [TR_CODE_WOKRFLOWS_AU]
ON [dbo].[CODE_WOKRFLOWS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CODE_WOKRFLOWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CODE_WOKRFLOWS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CODE_WOKRFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CODE_WOKRFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CODE_WOKRFLOWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACT_ADDRESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTACT_ADDRESSES_AD]
GO
CREATE TRIGGER [TR_CONTACT_ADDRESSES_AD]
ON [dbo].[CONTACT_ADDRESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTACT_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACT_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACT_ADDRESSES]',ADDRESS_IDF+':=:'+CONTACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACT_ADDRESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTACT_ADDRESSES_AU]
GO

CREATE TRIGGER [TR_CONTACT_ADDRESSES_AU]
ON [dbo].[CONTACT_ADDRESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ADDRESS_IDF=D.ADDRESS_IDF AND I.CONTACT_IDF = D.CONTACT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTACT_ADDRESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTACT_ADDRESSES] I INNER JOIN DELETED D on I.ADDRESS_IDF=D.ADDRESS_IDF AND I.CONTACT_IDF = D.CONTACT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTACT_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACT_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACT_ADDRESSES]',ADDRESS_IDF+':=:'+CONTACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACT_TELECOM_ADDRESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTACT_TELECOM_ADDRESSES_AD]
GO
CREATE TRIGGER [TR_CONTACT_TELECOM_ADDRESSES_AD]
ON [dbo].[CONTACT_TELECOM_ADDRESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTACT_TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACT_TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACT_TELECOM_ADDRESSES]',TELECOM_ADDRESS_IDF +':=:'+ CONTACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACT_TELECOM_ADDRESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTACT_TELECOM_ADDRESSES_AU]
GO

CREATE TRIGGER [TR_CONTACT_TELECOM_ADDRESSES_AU]
ON [dbo].[CONTACT_TELECOM_ADDRESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.TELECOM_ADDRESS_IDF=D.TELECOM_ADDRESS_IDF AND I.CONTACT_IDF = D.CONTACT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTACT_TELECOM_ADDRESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTACT_TELECOM_ADDRESSES] I INNER JOIN DELETED D on I.TELECOM_ADDRESS_IDF=D.TELECOM_ADDRESS_IDF AND I.CONTACT_IDF = D.CONTACT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTACT_TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACT_TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACT_TELECOM_ADDRESSES]',TELECOM_ADDRESS_IDF+':=:'+CONTACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTACTS_AD]
GO
CREATE TRIGGER [TR_CONTACTS_AD]
ON [dbo].[CONTACTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTACTS_AU]
GO

CREATE TRIGGER [TR_CONTACTS_AU]
ON [dbo].[CONTACTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTACTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTACTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTACTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTACTS_BI]','TR') is not NULL
     DROP TRIGGER [TR_CONTACTS_BI]
GO
CREATE TRIGGER [TR_CONTACTS_BI]
ON [dbo].[CONTACTS]
INSTEAD OF INSERT AS
BEGIN /* CODE check the IDF */
      SET NOCOUNT OFF;
      if (SElECT COUNT(*) from INSERTED WHERE IDF IS NULL ) > 0
      BEGIN
              SELECT * INTO #T FROM INSERTED
              UPDATE #T SET IDF =  dbo.fn_NewIDFExt('CTAC', Default, Default) WHERE IDF is null
              INSERT INTO [dbo].[CONTACTS] SELECT * FROM #T
              DROP TABLE #T
      END
      ELSE
         INSERT INTO [dbo].[CONTACTS] SELECT * FROM INSERTED
END
GO

IF OBJECT_ID('[TR_CONTRACT_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACT_DETAILS_AD]
GO
CREATE TRIGGER [TR_CONTRACT_DETAILS_AD]
ON [dbo].[CONTRACT_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTRACT_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACT_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACT_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACT_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACT_DETAILS_AU]
GO

CREATE TRIGGER [TR_CONTRACT_DETAILS_AU]
ON [dbo].[CONTRACT_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTRACT_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTRACT_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTRACT_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACT_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACT_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACT_QUALIFIED_AERAS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACT_QUALIFIED_AERAS_AD]
GO
CREATE TRIGGER [TR_CONTRACT_QUALIFIED_AERAS_AD]
ON [dbo].[CONTRACT_QUALIFIED_AERAS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTRACT_QUALIFIED_AERAS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACT_QUALIFIED_AERAS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACT_QUALIFIED_AERAS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACT_QUALIFIED_AERAS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACT_QUALIFIED_AERAS_AU]
GO

CREATE TRIGGER [TR_CONTRACT_QUALIFIED_AERAS_AU]
ON [dbo].[CONTRACT_QUALIFIED_AERAS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTRACT_QUALIFIED_AERAS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTRACT_QUALIFIED_AERAS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTRACT_QUALIFIED_AERAS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACT_QUALIFIED_AERAS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACT_QUALIFIED_AERAS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACTOR_ACCOUNTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACTOR_ACCOUNTS_AD]
GO
CREATE TRIGGER [TR_CONTRACTOR_ACCOUNTS_AD]
ON [dbo].[CONTRACTOR_ACCOUNTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTRACTOR_ACCOUNTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACTOR_ACCOUNTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACTOR_ACCOUNTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACTOR_ACCOUNTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACTOR_ACCOUNTS_AU]
GO

CREATE TRIGGER [TR_CONTRACTOR_ACCOUNTS_AU]
ON [dbo].[CONTRACTOR_ACCOUNTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTRACTOR_ACCOUNTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTRACTOR_ACCOUNTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTRACTOR_ACCOUNTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACTOR_ACCOUNTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACTOR_ACCOUNTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACTS_AD]
GO
CREATE TRIGGER [TR_CONTRACTS_AD]
ON [dbo].[CONTRACTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[CONTRACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_CONTRACTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_CONTRACTS_AU]
GO

CREATE TRIGGER [TR_CONTRACTS_AU]
ON [dbo].[CONTRACTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[CONTRACTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[CONTRACTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[CONTRACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[CONTRACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[CONTRACTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_DOCUMENT_LOCATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_DOCUMENT_LOCATIONS_AD]
GO
CREATE TRIGGER [TR_DOCUMENT_LOCATIONS_AD]
ON [dbo].[DOCUMENT_LOCATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[DOCUMENT_LOCATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[DOCUMENT_LOCATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[DOCUMENT_LOCATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_DOCUMENT_LOCATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_DOCUMENT_LOCATIONS_AU]
GO

CREATE TRIGGER [TR_DOCUMENT_LOCATIONS_AU]
ON [dbo].[DOCUMENT_LOCATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[DOCUMENT_LOCATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[DOCUMENT_LOCATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[DOCUMENT_LOCATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[DOCUMENT_LOCATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[DOCUMENT_LOCATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_DOCUMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_DOCUMENTS_AD]
GO
CREATE TRIGGER [TR_DOCUMENTS_AD]
ON [dbo].[DOCUMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[DOCUMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_DOCUMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_DOCUMENTS_AU]
GO

CREATE TRIGGER [TR_DOCUMENTS_AU]
ON [dbo].[DOCUMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[DOCUMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[DOCUMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[DOCUMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_FEDERAL_ORGANIZATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_FEDERAL_ORGANIZATIONS_AD]
GO
CREATE TRIGGER [TR_FEDERAL_ORGANIZATIONS_AD]
ON [dbo].[FEDERAL_ORGANIZATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[FEDERAL_ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[FEDERAL_ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[FEDERAL_ORGANIZATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_FEDERAL_ORGANIZATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_FEDERAL_ORGANIZATIONS_AU]
GO

CREATE TRIGGER [TR_FEDERAL_ORGANIZATIONS_AU]
ON [dbo].[FEDERAL_ORGANIZATIONS] AFTER UPDATE AS
BEGIN
   if UPDATE(IDF) RETURN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[FEDERAL_ORGANIZATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[FEDERAL_ORGANIZATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF UPDATE (CONTACT_IDF) or UPDATE (PARENT_IDF) or UPDATE (NAME_CODE) or UPDATE(ASSOCIATED_NAME) or UPDATE(INTERNET_DOMAIN)
   BEGIN
           ALTER TABLE dbo.ORGANIZATIONS DISABLE TRIGGER tr_ORGANIZATIONS_AI
           UPDATE F SET F.CONTACT_IDF =  I.CONTACT_IDF, F.PARENT_IDF = I.PARENT_IDF, F.NAME_CODE = I.NAME_CODE, F.ASSOCIATED_NAME = I.ASSOCIATED_NAME, F.INTERNET_DOMAIN=I.INTERNET_DOMAIN FROM ORGANIZATIONS F INNER JOIN INSERTED I on F.IDF = I.IDF
           ALTER TABLE dbo.ORGANIZATIONS ENABLE TRIGGER tr_ORGANIZATIONS_AI
   END
   IF dbo.fn_IsAuditReady('[FEDERAL_ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[FEDERAL_ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[FEDERAL_ORGANIZATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_FEDERAL_ORGANIZATIONS_BI]','TR') is not NULL
     DROP TRIGGER [TR_FEDERAL_ORGANIZATIONS_BI]
GO
CREATE TRIGGER [TR_FEDERAL_ORGANIZATIONS_BI]
ON [dbo].[FEDERAL_ORGANIZATIONS]
INSTEAD OF INSERT AS
BEGIN
     BEGIN
         ALTER TABLE dbo.ORGANIZATIONS DISABLE TRIGGER tr_ORGANIZATIONS_AI
     END
     INSERT ORGANIZATIONS(IDF, VALUE_CODE, NAME_CODE, ASSOCIATED_NAME, ACRONYM_NAME, INTERNET_DOMAIN, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, FEDERAL_IDR, CATEGORY_CODE, TYPE_CODE, CONTACT_IDF, PARENT_IDF, PARENT_CODE, DESCRIPTION, COMMENTS, VERSION, ACCESS_LEVEL, VERIFICATION_IDR, REFERENCE_ID, REFERENCE_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY)
     SELECT IDF, VALUE_CODE, NAME_CODE,ASSOCIATED_NAME, ACRONYM_NAME, INTERNET_DOMAIN, EFFECTIVE_START_DATE, EFFECTIVE_END_DATE, 1, CATEGORY_CODE, TYPE_CODE, CONTACT_IDF, PARENT_IDF, PARENT_CODE, DESCRIPTION, COMMENTS, VERSION, ACCESS_LEVEL, VERIFICATION_IDR, REFERENCE_ID, REFERENCE_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY
     FROM INSERTED WHERE IDF NOT IN (SELECT IDF FROM ORGANIZATIONS)
     INSERT INTO FEDERAL_ORGANIZATIONS SELECT * FROM INSERTED
     BEGIN
          ALTER TABLE dbo.ORGANIZATIONS ENABLE TRIGGER tr_ORGANIZATIONS_AI
     END
END
GO

IF OBJECT_ID('[TR_GROUP_ACTIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ACTIONS_AD]
GO
CREATE TRIGGER [TR_GROUP_ACTIONS_AD]
ON [dbo].[GROUP_ACTIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_ACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ACTIONS]',GROUP_IDF+':=:'+ACTION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:ACTION_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ACTIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ACTIONS_AU]
GO

CREATE TRIGGER [TR_GROUP_ACTIONS_AU]
ON [dbo].[GROUP_ACTIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ACTION_IDF = D.ACTION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_ACTIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_ACTIONS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ACTION_IDF = D.ACTION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_ACTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ACTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ACTIONS]',GROUP_IDF+':=:'+ACTION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:ACTION_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ACTIVITIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ACTIVITIES_AD]
GO
CREATE TRIGGER [TR_GROUP_ACTIVITIES_AD]
ON [dbo].[GROUP_ACTIVITIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ACTIVITIES]',GROUP_IDF+':=:'+ACTIVITY_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:ACTIVITY_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ACTIVITIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ACTIVITIES_AU]
GO

CREATE TRIGGER [TR_GROUP_ACTIVITIES_AU]
ON [dbo].[GROUP_ACTIVITIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ACTIVITY_IDF = D.ACTIVITY_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_ACTIVITIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_ACTIVITIES] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ACTIVITY_IDF = D.ACTIVITY_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ACTIVITIES]',GROUP_IDF+':=:'+ACTIVITY_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:ACTIVITY_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_CONTRACTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_CONTRACTS_AD]
GO
CREATE TRIGGER [TR_GROUP_CONTRACTS_AD]
ON [dbo].[GROUP_CONTRACTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_CONTRACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_CONTRACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_CONTRACTS]',GROUP_IDF+':=:'+CONTRACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:CONTRACT_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_CONTRACTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_CONTRACTS_AU]
GO

CREATE TRIGGER [TR_GROUP_CONTRACTS_AU]
ON [dbo].[GROUP_CONTRACTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.CONTRACT_IDF = D.CONTRACT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_CONTRACTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_CONTRACTS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.CONTRACT_IDF = D.CONTRACT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_CONTRACTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_CONTRACTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_CONTRACTS]',GROUP_IDF+':=:'+CONTRACT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:CONTRACT_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_DOCUMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_DOCUMENTS_AD]
GO
CREATE TRIGGER [TR_GROUP_DOCUMENTS_AD]
ON [dbo].[GROUP_DOCUMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_DOCUMENTS]',GROUP_IDF+':=:'+DOCUMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:DOCUMENT_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_DOCUMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_DOCUMENTS_AU]
GO

CREATE TRIGGER [TR_GROUP_DOCUMENTS_AU]
ON [dbo].[GROUP_DOCUMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.DOCUMENT_IDF = D.DOCUMENT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_DOCUMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_DOCUMENTS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.DOCUMENT_IDF = D.DOCUMENT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_DOCUMENTS]',GROUP_IDF+':=:'+DOCUMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:DOCUMENT_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_EVENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_EVENTS_AD]
GO
CREATE TRIGGER [TR_GROUP_EVENTS_AD]
ON [dbo].[GROUP_EVENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_EVENTS]',GROUP_IDF+':=:'+EVENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:EVENT_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_EVENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_EVENTS_AU]
GO

CREATE TRIGGER [TR_GROUP_EVENTS_AU]
ON [dbo].[GROUP_EVENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.EVENT_IDF = D.EVENT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_EVENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_EVENTS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.EVENT_IDF = D.EVENT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_EVENTS]',GROUP_IDF+':=:'+EVENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:EVENT_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ITEMS_AD]
GO
CREATE TRIGGER [TR_GROUP_ITEMS_AD]
ON [dbo].[GROUP_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ITEMS]',GROUP_IDF+':=:'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:ITEM_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ITEMS_AU]
GO

CREATE TRIGGER [TR_GROUP_ITEMS_AU]
ON [dbo].[GROUP_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ITEM_IDF = D.ITEM_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_ITEMS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ITEM_IDF = D.ITEM_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ITEMS]',GROUP_IDF+':=:'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:ITEM_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_MEMBERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_MEMBERS_AD]
GO
CREATE TRIGGER [TR_GROUP_MEMBERS_AD]
ON [dbo].[GROUP_MEMBERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_MEMBERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_MEMBERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_MEMBERS]',GROUP_IDF+':=:'+OWNER_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:OWNER_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_MEMBERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_MEMBERS_AU]
GO

CREATE TRIGGER [TR_GROUP_MEMBERS_AU]
ON [dbo].[GROUP_MEMBERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.OWNER_IDF = D.OWNER_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_MEMBERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_MEMBERS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.OWNER_IDF = D.OWNER_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_MEMBERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_MEMBERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_MEMBERS]',GROUP_IDF+':=:'+OWNER_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:OWNER_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_MESSAGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_MESSAGES_AD]
GO
CREATE TRIGGER [TR_GROUP_MESSAGES_AD]
ON [dbo].[GROUP_MESSAGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_MESSAGES]',GROUP_IDF+':=:'+MESSAGE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:MESSAGE_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_MESSAGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_MESSAGES_AU]
GO

CREATE TRIGGER [TR_GROUP_MESSAGES_AU]
ON [dbo].[GROUP_MESSAGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.MESSAGE_IDF = D.MESSAGE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_MESSAGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_MESSAGES] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.MESSAGE_IDF = D.MESSAGE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_MESSAGES]',GROUP_IDF+':=:'+MESSAGE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:MESSAGE_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_NODES_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_NODES_AD]
GO
CREATE TRIGGER [TR_GROUP_NODES_AD]
ON [dbo].[GROUP_NODES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_NODES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_NODES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_NODES]',GROUP_IDF+':=:'+NODE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:NODE_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_NODES_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_NODES_AU]
GO

CREATE TRIGGER [TR_GROUP_NODES_AU]
ON [dbo].[GROUP_NODES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.NODE_IDF = D.NODE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_NODES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_NODES] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.NODE_IDF = D.NODE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_NODES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_NODES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_NODES]',GROUP_IDF+':=:'+NODE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:NODE_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_NOTIFICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_NOTIFICATIONS_AD]
GO
CREATE TRIGGER [TR_GROUP_NOTIFICATIONS_AD]
ON [dbo].[GROUP_NOTIFICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_NOTIFICATIONS]',GROUP_IDF+':=:'+NOTIFICATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:NOTIFICATION_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_NOTIFICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_NOTIFICATIONS_AU]
GO

CREATE TRIGGER [TR_GROUP_NOTIFICATIONS_AU]
ON [dbo].[GROUP_NOTIFICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.NOTIFICATION_IDF = D.NOTIFICATION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_NOTIFICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_NOTIFICATIONS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.NOTIFICATION_IDF = D.NOTIFICATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_NOTIFICATIONS]',GROUP_IDF+':=:'+NOTIFICATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:NOTIFICATION_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ORGANIZATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ORGANIZATIONS_AD]
GO
CREATE TRIGGER [TR_GROUP_ORGANIZATIONS_AD]
ON [dbo].[GROUP_ORGANIZATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ORGANIZATIONS]',GROUP_IDF+':=:'+ORGANIZATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:ORGANIZATION_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ORGANIZATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ORGANIZATIONS_AU]
GO

CREATE TRIGGER [TR_GROUP_ORGANIZATIONS_AU]
ON [dbo].[GROUP_ORGANIZATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ORGANIZATION_IDF = D.ORGANIZATION_IDF  where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_ORGANIZATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_ORGANIZATIONS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.ORGANIZATION_IDF = D.ORGANIZATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ORGANIZATIONS]',GROUP_IDF+':=:'+ORGANIZATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:ORGANIZATIOIN_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_PERSONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_PERSONS_AD]
GO
CREATE TRIGGER [TR_GROUP_PERSONS_AD]
ON [dbo].[GROUP_PERSONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_PERSONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_PERSONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_PERSONS]',GROUP_IDF+':=:'+PERSON_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:PERSON_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_PERSONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_PERSONS_AU]
GO

CREATE TRIGGER [TR_GROUP_PERSONS_AU]
ON [dbo].[GROUP_PERSONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.PERSON_IDF = D.PERSON_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_PERSONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_PERSONS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.PERSON_IDF = D.PERSON_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_PERSONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_PERSONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_PERSONS]',GROUP_IDF+':=:'+PERSON_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:PERSON_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_REPORTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_REPORTS_AD]
GO
CREATE TRIGGER [TR_GROUP_REPORTS_AD]
ON [dbo].[GROUP_REPORTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_REPORTS]',GROUP_IDF+':=:'+REPORT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:REPORT_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_REPORTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_REPORTS_AU]
GO

CREATE TRIGGER [TR_GROUP_REPORTS_AU]
ON [dbo].[GROUP_REPORTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.REPORT_IDF = D.REPORT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_REPORTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_REPORTS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.REPORT_IDF = D.REPORT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_REPORTS]',GROUP_IDF+':=:'+REPORT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:REPORT_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ROLES_AD]
GO
CREATE TRIGGER [TR_GROUP_ROLES_AD]
ON [dbo].[GROUP_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ROLES]',GROUP_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:ROLE_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_ROLES_AU]
GO

CREATE TRIGGER [TR_GROUP_ROLES_AU]
ON [dbo].[GROUP_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ROLE_IDF = D.ROLE_IDF and I.GROUP_IDF = D.GROUP_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_ROLES] I INNER JOIN DELETED D on I.ROLE_IDF = D.ROLE_IDF and I.GROUP_IDF = D.GROUP_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_ROLES]',GROUP_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:ROLE_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_TASKS_AD]
GO
CREATE TRIGGER [TR_GROUP_TASKS_AD]
ON [dbo].[GROUP_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_TASKS]', GROUP_IDF+':=:'+TASK_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:TASK_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_TASKS_AU]
GO

CREATE TRIGGER [TR_GROUP_TASKS_AU]
ON [dbo].[GROUP_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.TASK_IDF = D.TASK_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_TASKS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.TASK_IDF = D.TASK_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_TASKS]',GROUP_IDF+':=:'+TASK_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:TASK_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_TELECOM_ADDRESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_TELECOM_ADDRESSES_AD]
GO
CREATE TRIGGER [TR_GROUP_TELECOM_ADDRESSES_AD]
ON [dbo].[GROUP_TELECOM_ADDRESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_TELECOM_ADDRESSES]',GROUP_IDF+':=:'+TELECOM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:TELECOM_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_TELECOM_ADDRESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_TELECOM_ADDRESSES_AU]
GO

CREATE TRIGGER [TR_GROUP_TELECOM_ADDRESSES_AU]
ON [dbo].[GROUP_TELECOM_ADDRESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.TELECOM_IDF = D.TELECOM_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_TELECOM_ADDRESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_TELECOM_ADDRESSES] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.TELECOM_IDF = D.TELECOM_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_TELECOM_ADDRESSES]',GROUP_IDF+':=:'+TELECOM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:TELECOM_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_USERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_USERS_AD]
GO
CREATE TRIGGER [TR_GROUP_USERS_AD]
ON [dbo].[GROUP_USERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_USERS]',GROUP_IDF+':=:'+USER_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:USER_IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_USERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_USERS_AU]
GO

CREATE TRIGGER [TR_GROUP_USERS_AU]
ON [dbo].[GROUP_USERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.USER_IDF = D.USER_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_USERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_USERS] I INNER JOIN DELETED D on I.GROUP_IDF = D.GROUP_IDF and I.USER_IDF = D.USER_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_USERS]',GROUP_IDF+':=:'+USER_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:USER_IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_VALUESETS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_VALUESETS_AD]
GO
CREATE TRIGGER [TR_GROUP_VALUESETS_AD]
ON [dbo].[GROUP_VALUESETS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_VALUESETS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_VALUESETS]',GROUP_IDF+':=:'+VALUE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:VALUEIDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_VALUESETS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_VALUESETS_AU]
GO

CREATE TRIGGER [TR_GROUP_VALUESETS_AU]
ON [dbo].[GROUP_VALUESETS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF=D.GROUP_IDF AND I.VALUE_IDF = D.VALUE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_VALUESETS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_VALUESETS] I INNER JOIN DELETED D on I.GROUP_IDF=D.GROUP_IDF AND I.VALUE_IDF = D.VALUE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_VALUESETS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_VALUESETS]',GROUP_IDF+':=:'+VALUE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:VALUE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_WORKFLOWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_WORKFLOWS_AD]
GO
CREATE TRIGGER [TR_GROUP_WORKFLOWS_AD]
ON [dbo].[GROUP_WORKFLOWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GROUP_WORKFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_WORKFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_WORKFLOWS]',GROUP_IDF+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','GROUP_IDF:=:WORKFLOW_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GROUP_WORKFLOWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GROUP_WORKFLOWS_AU]
GO

CREATE TRIGGER [TR_GROUP_WORKFLOWS_AU]
ON [dbo].[GROUP_WORKFLOWS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.GROUP_IDF=D.GROUP_IDF AND I.WORKFLOW_IDF = D.WORKFLOW_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GROUP_WORKFLOWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GROUP_WORKFLOWS] I INNER JOIN DELETED D on I.GROUP_IDF=D.GROUP_IDF AND I.WORKFLOW_IDF = D.WORKFLOW_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GROUP_WORKFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GROUP_WORKFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GROUP_WORKFLOWS]',GROUP_IDF+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','GROUP_IDF:=:WORKFLOW_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GSS_SOLUTION_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_GSS_SOLUTION_CLINS_AD]
GO
CREATE TRIGGER [TR_GSS_SOLUTION_CLINS_AD]
ON [dbo].[GSS_SOLUTION_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[GSS_SOLUTION_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GSS_SOLUTION_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GSS_SOLUTION_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_GSS_SOLUTION_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_GSS_SOLUTION_CLINS_AU]
GO

CREATE TRIGGER [TR_GSS_SOLUTION_CLINS_AU]
ON [dbo].[GSS_SOLUTION_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[GSS_SOLUTION_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[GSS_SOLUTION_CLINS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[GSS_SOLUTION_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[GSS_SOLUTION_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[GSS_SOLUTION_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_HOLIDAYS_AD]','TR') is not NULL
     DROP TRIGGER [TR_HOLIDAYS_AD]
GO
CREATE TRIGGER [TR_HOLIDAYS_AD]
ON [dbo].[HOLIDAYS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[HOLIDAYS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[HOLIDAYS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[HOLIDAYS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_HOLIDAYS_AU]','TR') is not NULL
     DROP TRIGGER [TR_HOLIDAYS_AU]
GO

CREATE TRIGGER [TR_HOLIDAYS_AU]
ON [dbo].[HOLIDAYS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[HOLIDAYS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[HOLIDAYS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[HOLIDAYS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[HOLIDAYS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[HOLIDAYS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_INVOICES_AD]','TR') is not NULL
     DROP TRIGGER [TR_INVOICES_AD]
GO
CREATE TRIGGER [TR_INVOICES_AD]
ON [dbo].[INVOICES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[INVOICES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[INVOICES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[INVOICES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_INVOICES_AU]','TR') is not NULL
     DROP TRIGGER [TR_INVOICES_AU]
GO

CREATE TRIGGER [TR_INVOICES_AU]
ON [dbo].[INVOICES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[INVOICES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[INVOICES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[INVOICES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[INVOICES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[INVOICES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGE_BASE_AD]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGE_BASE_AD]
GO
CREATE TRIGGER [TR_KNOWLEDGE_BASE_AD]
ON [dbo].[KNOWLEDGE_BASE] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[KNOWLEDGE_BASE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGE_BASE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGE_BASE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGE_BASE_AU]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGE_BASE_AU]
GO

CREATE TRIGGER [TR_KNOWLEDGE_BASE_AU]
ON [dbo].[KNOWLEDGE_BASE] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[KNOWLEDGE_BASE] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[KNOWLEDGE_BASE] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[KNOWLEDGE_BASE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGE_BASE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGE_BASE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGE_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGE_DETAILS_AD]
GO
CREATE TRIGGER [TR_KNOWLEDGE_DETAILS_AD]
ON [dbo].[KNOWLEDGE_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[KNOWLEDGE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGE_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGE_DETAILS_AU]
GO

CREATE TRIGGER [TR_KNOWLEDGE_DETAILS_AU]
ON [dbo].[KNOWLEDGE_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[KNOWLEDGE_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[KNOWLEDGE_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[KNOWLEDGE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGES_AD]
GO
CREATE TRIGGER [TR_KNOWLEDGES_AD]
ON [dbo].[KNOWLEDGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[KNOWLEDGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_KNOWLEDGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_KNOWLEDGES_AU]
GO

CREATE TRIGGER [TR_KNOWLEDGES_AU]
ON [dbo].[KNOWLEDGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[KNOWLEDGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[KNOWLEDGES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[KNOWLEDGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[KNOWLEDGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[KNOWLEDGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MASTER_PAYMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_MASTER_PAYMENTS_AD]
GO
CREATE TRIGGER [TR_MASTER_PAYMENTS_AD]
ON [dbo].[MASTER_PAYMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[MASTER_PAYMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MASTER_PAYMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MASTER_PAYMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MASTER_PAYMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_MASTER_PAYMENTS_AU]
GO

CREATE TRIGGER [TR_MASTER_PAYMENTS_AU]
ON [dbo].[MASTER_PAYMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[MASTER_PAYMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[MASTER_PAYMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[MASTER_PAYMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MASTER_PAYMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MASTER_PAYMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MESSAGE_DOCUMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_MESSAGE_DOCUMENTS_AD]
GO
CREATE TRIGGER [TR_MESSAGE_DOCUMENTS_AD]
ON [dbo].[MESSAGE_DOCUMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[MESSAGE_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MESSAGE_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MESSAGE_DOCUMENTS]',MESSAGE_IDF+':=:'+DOCUMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','MESSAGE_IDF:=:DOCUMENT_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MESSAGE_DOCUMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_MESSAGE_DOCUMENTS_AU]
GO

CREATE TRIGGER [TR_MESSAGE_DOCUMENTS_AU]
ON [dbo].[MESSAGE_DOCUMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.MESSAGE_IDF = D.MESSAGE_IDF AND I.DOCUMENT_IDF = D.DOCUMENT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[MESSAGE_DOCUMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[MESSAGE_DOCUMENTS] I INNER JOIN DELETED D on I.MESSAGE_IDF = D.MESSAGE_IDF AND I.DOCUMENT_IDF = D.DOCUMENT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[MESSAGE_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MESSAGE_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MESSAGE_DOCUMENTS]',MESSAGE_IDF+':=:'+DOCUMENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','MESSAGE_IDF:=:DOCUMENT_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_METADATA_DEFINITION_AD]','TR') is not NULL
     DROP TRIGGER [TR_METADATA_DEFINITION_AD]
GO
CREATE TRIGGER [TR_METADATA_DEFINITION_AD]
ON [dbo].[METADATA_DEFINITION] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[METADATA_DEFINITION]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[METADATA_DEFINITION] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[METADATA_DEFINITION]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_METADATA_DEFINITION_AU]','TR') is not NULL
     DROP TRIGGER [TR_METADATA_DEFINITION_AU]
GO

CREATE TRIGGER [TR_METADATA_DEFINITION_AU]
ON [dbo].[METADATA_DEFINITION] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[METADATA_DEFINITION] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[METADATA_DEFINITION] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[METADATA_DEFINITION]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[METADATA_DEFINITION] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[METADATA_DEFINITION]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_METADATA_VALUE_AD]','TR') is not NULL
     DROP TRIGGER [TR_METADATA_VALUE_AD]
GO
CREATE TRIGGER [TR_METADATA_VALUE_AD]
ON [dbo].[METADATA_VALUE] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[METADATA_VALUE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[METADATA_VALUE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[METADATA_VALUE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_METADATA_VALUE_AU]','TR') is not NULL
     DROP TRIGGER [TR_METADATA_VALUE_AU]
GO

CREATE TRIGGER [TR_METADATA_VALUE_AU]
ON [dbo].[METADATA_VALUE] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[METADATA_VALUE] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[METADATA_VALUE] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[METADATA_VALUE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[METADATA_VALUE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[METADATA_VALUE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MODIFICATION_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_MODIFICATION_DETAILS_AD]
GO
CREATE TRIGGER [TR_MODIFICATION_DETAILS_AD]
ON [dbo].[MODIFICATION_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[MODIFICATION_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MODIFICATION_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MODIFICATION_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MODIFICATION_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_MODIFICATION_DETAILS_AU]
GO

CREATE TRIGGER [TR_MODIFICATION_DETAILS_AU]
ON [dbo].[MODIFICATION_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[MODIFICATION_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[MODIFICATION_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[MODIFICATION_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MODIFICATION_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MODIFICATION_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MONTHLY_INVOICES_AD]','TR') is not NULL
     DROP TRIGGER [TR_MONTHLY_INVOICES_AD]
GO
CREATE TRIGGER [TR_MONTHLY_INVOICES_AD]
ON [dbo].[MONTHLY_INVOICES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[MONTHLY_INVOICES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MONTHLY_INVOICES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MONTHLY_INVOICES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_MONTHLY_INVOICES_AU]','TR') is not NULL
     DROP TRIGGER [TR_MONTHLY_INVOICES_AU]
GO

CREATE TRIGGER [TR_MONTHLY_INVOICES_AU]
ON [dbo].[MONTHLY_INVOICES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[MONTHLY_INVOICES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[MONTHLY_INVOICES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[MONTHLY_INVOICES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[MONTHLY_INVOICES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[MONTHLY_INVOICES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NODE_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_NODE_DETAILS_AD]
GO
CREATE TRIGGER [TR_NODE_DETAILS_AD]
ON [dbo].[NODE_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[NODE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NODE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NODE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NODE_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_NODE_DETAILS_AU]
GO

CREATE TRIGGER [TR_NODE_DETAILS_AU]
ON [dbo].[NODE_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[NODE_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[NODE_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[NODE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NODE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NODE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NODE_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_NODE_TASKS_AD]
GO
CREATE TRIGGER [TR_NODE_TASKS_AD]
ON [dbo].[NODE_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[NODE_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NODE_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NODE_TASKS]',NODE_IDF+':=:'+TASK_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','NODE_IDF:=:TASK_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NODE_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_NODE_TASKS_AU]
GO

CREATE TRIGGER [TR_NODE_TASKS_AU]
ON [dbo].[NODE_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.NODE_IDF = D.NODE_IDF AND I.TASK_IDF = D.TASK_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[NODE_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[NODE_TASKS] I INNER JOIN DELETED D on I.NODE_IDF = D.NODE_IDF AND I.TASK_IDF = D.TASK_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[NODE_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NODE_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NODE_TASKS]',NODE_IDF+':=:'+TASK_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','NODE_IDF:=:TASK_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NOTE_COMMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_NOTE_COMMENTS_AD]
GO
CREATE TRIGGER [TR_NOTE_COMMENTS_AD]
ON [dbo].[NOTE_COMMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[NOTE_COMMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NOTE_COMMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NOTE_COMMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NOTE_COMMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_NOTE_COMMENTS_AU]
GO

CREATE TRIGGER [TR_NOTE_COMMENTS_AU]
ON [dbo].[NOTE_COMMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[NOTE_COMMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[NOTE_COMMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[NOTE_COMMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NOTE_COMMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NOTE_COMMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NOTIFICATION_MESSAGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_NOTIFICATION_MESSAGES_AD]
GO
CREATE TRIGGER [TR_NOTIFICATION_MESSAGES_AD]
ON [dbo].[NOTIFICATION_MESSAGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[NOTIFICATION_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NOTIFICATION_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NOTIFICATION_MESSAGES]',NOTIFICATION_IDF+':=:'+MESSAGE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','NOTIFICATION_IDF:=:MESSAGE_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_NOTIFICATION_MESSAGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_NOTIFICATION_MESSAGES_AU]
GO

CREATE TRIGGER [TR_NOTIFICATION_MESSAGES_AU]
ON [dbo].[NOTIFICATION_MESSAGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.NOTIFICATION_IDF=D.NOTIFICATION_IDF AND I.MESSAGE_IDF=D.MESSAGE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[NOTIFICATION_MESSAGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[NOTIFICATION_MESSAGES] I INNER JOIN DELETED D on I.NOTIFICATION_IDF=D.NOTIFICATION_IDF AND I.MESSAGE_IDF=D.MESSAGE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[NOTIFICATION_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[NOTIFICATION_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[NOTIFICATION_MESSAGES]',NOTIFICATION_IDF+':=:'+MESSAGE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','NOTIFICATION_IDF:=:MESSAGE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_APPROVALS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_APPROVALS_AD]
GO
CREATE TRIGGER [TR_ORDER_APPROVALS_AD]
ON [dbo].[ORDER_APPROVALS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_APPROVALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_APPROVALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_APPROVALS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_APPROVALS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_APPROVALS_AU]
GO

CREATE TRIGGER [TR_ORDER_APPROVALS_AU]
ON [dbo].[ORDER_APPROVALS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_APPROVALS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_APPROVALS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_APPROVALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_APPROVALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_APPROVALS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_CLINS_AD]
GO
CREATE TRIGGER [TR_ORDER_CLINS_AD]
ON [dbo].[ORDER_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_CLINS]',ORDER_IDF+':'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','ORDER_IDF:ITEM_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_CLINS_AU]
GO

CREATE TRIGGER [TR_ORDER_CLINS_AU]
ON [dbo].[ORDER_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ORDER_IDF = D.ORDER_IDF AND I.ITEM_IDF = D.ITEM_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_CLINS] I INNER JOIN DELETED D on I.ORDER_IDF = D.ORDER_IDF AND I.ITEM_IDF = D.ITEM_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_CLINS]',ORDER_IDF+':'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','ORDER_IDF:ITEM_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_COMPLIANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_COMPLIANCES_AD]
GO
CREATE TRIGGER [TR_ORDER_COMPLIANCES_AD]
ON [dbo].[ORDER_COMPLIANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_COMPLIANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_COMPLIANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_COMPLIANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_COMPLIANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_COMPLIANCES_AU]
GO

CREATE TRIGGER [TR_ORDER_COMPLIANCES_AU]
ON [dbo].[ORDER_COMPLIANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_COMPLIANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_COMPLIANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_COMPLIANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_COMPLIANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_COMPLIANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DELIVERIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DELIVERIES_AD]
GO
CREATE TRIGGER [TR_ORDER_DELIVERIES_AD]
ON [dbo].[ORDER_DELIVERIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DELIVERIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DELIVERIES_AU]
GO

CREATE TRIGGER [TR_ORDER_DELIVERIES_AU]
ON [dbo].[ORDER_DELIVERIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_DELIVERIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_DELIVERIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DETAILS_AD]
GO
CREATE TRIGGER [TR_ORDER_DETAILS_AD]
ON [dbo].[ORDER_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DETAILS_AU]
GO

CREATE TRIGGER [TR_ORDER_DETAILS_AU]
ON [dbo].[ORDER_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DOCUMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DOCUMENTS_AD]
GO
CREATE TRIGGER [TR_ORDER_DOCUMENTS_AD]
ON [dbo].[ORDER_DOCUMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DOCUMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_DOCUMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_DOCUMENTS_AU]
GO

CREATE TRIGGER [TR_ORDER_DOCUMENTS_AU]
ON [dbo].[ORDER_DOCUMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_DOCUMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_DOCUMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_DOCUMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_DOCUMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_DOCUMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_FINANCE_LOES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_FINANCE_LOES_AD]
GO
CREATE TRIGGER [TR_ORDER_FINANCE_LOES_AD]
ON [dbo].[ORDER_FINANCE_LOES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_FINANCE_LOES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_FINANCE_LOES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_FINANCE_LOES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_FINANCE_LOES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_FINANCE_LOES_AU]
GO

CREATE TRIGGER [TR_ORDER_FINANCE_LOES_AU]
ON [dbo].[ORDER_FINANCE_LOES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_FINANCE_LOES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_FINANCE_LOES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_FINANCE_LOES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_FINANCE_LOES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_FINANCE_LOES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_FINANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_FINANCES_AD]
GO
CREATE TRIGGER [TR_ORDER_FINANCES_AD]
ON [dbo].[ORDER_FINANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_FINANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_FINANCES_AU]
GO

CREATE TRIGGER [TR_ORDER_FINANCES_AU]
ON [dbo].[ORDER_FINANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_FINANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_FINANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_MESSAGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_MESSAGES_AD]
GO
CREATE TRIGGER [TR_ORDER_MESSAGES_AD]
ON [dbo].[ORDER_MESSAGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_MESSAGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_MESSAGES_AU]
GO

CREATE TRIGGER [TR_ORDER_MESSAGES_AU]
ON [dbo].[ORDER_MESSAGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_MESSAGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_MESSAGES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_QUESTIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_QUESTIONS_AD]
GO
CREATE TRIGGER [TR_ORDER_QUESTIONS_AD]
ON [dbo].[ORDER_QUESTIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_QUESTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_QUESTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_QUESTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_QUESTIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_QUESTIONS_AU]
GO

CREATE TRIGGER [TR_ORDER_QUESTIONS_AU]
ON [dbo].[ORDER_QUESTIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_QUESTIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_QUESTIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_QUESTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_QUESTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_QUESTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_RATING_FACTORS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_RATING_FACTORS_AD]
GO
CREATE TRIGGER [TR_ORDER_RATING_FACTORS_AD]
ON [dbo].[ORDER_RATING_FACTORS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_RATING_FACTORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_RATING_FACTORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_RATING_FACTORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_RATING_FACTORS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_RATING_FACTORS_AU]
GO

CREATE TRIGGER [TR_ORDER_RATING_FACTORS_AU]
ON [dbo].[ORDER_RATING_FACTORS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_RATING_FACTORS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_RATING_FACTORS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_RATING_FACTORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_RATING_FACTORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_RATING_FACTORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_RESPONSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_RESPONSES_AD]
GO
CREATE TRIGGER [TR_ORDER_RESPONSES_AD]
ON [dbo].[ORDER_RESPONSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_RESPONSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_RESPONSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_RESPONSES]',ORDER_IDF +':=:'+CONTRACTOR_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','ORDER_IDF:=:CONTRACTOR_IDF,' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_RESPONSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_RESPONSES_AU]
GO

CREATE TRIGGER [TR_ORDER_RESPONSES_AU]
ON [dbo].[ORDER_RESPONSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ORDER_IDF = D.ORDER_IDF AND I.CONTRACTOR_IDF = D.CONTRACTOR_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_RESPONSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_RESPONSES] I INNER JOIN DELETED D on I.ORDER_IDF = D.ORDER_IDF AND I.CONTRACTOR_IDF = D.CONTRACTOR_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_RESPONSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_RESPONSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_RESPONSES]',ORDER_IDF +':=:'+CONTRACTOR_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','ORDER_IDF:=:CONTRACTOR_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_REVIEW_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_REVIEW_DETAILS_AD]
GO
CREATE TRIGGER [TR_ORDER_REVIEW_DETAILS_AD]
ON [dbo].[ORDER_REVIEW_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_REVIEW_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_REVIEW_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_REVIEW_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_REVIEW_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_REVIEW_DETAILS_AU]
GO

CREATE TRIGGER [TR_ORDER_REVIEW_DETAILS_AU]
ON [dbo].[ORDER_REVIEW_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_REVIEW_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_REVIEW_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_REVIEW_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_REVIEW_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_REVIEW_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_REVIEWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_REVIEWS_AD]
GO
CREATE TRIGGER [TR_ORDER_REVIEWS_AD]
ON [dbo].[ORDER_REVIEWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_REVIEWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_REVIEWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_REVIEWS_AU]
GO

CREATE TRIGGER [TR_ORDER_REVIEWS_AU]
ON [dbo].[ORDER_REVIEWS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_REVIEWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_REVIEWS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_REVIEWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASK_FINANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASK_FINANCES_AD]
GO
CREATE TRIGGER [TR_ORDER_TASK_FINANCES_AD]
ON [dbo].[ORDER_TASK_FINANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_TASK_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASK_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASK_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASK_FINANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASK_FINANCES_AU]
GO

CREATE TRIGGER [TR_ORDER_TASK_FINANCES_AU]
ON [dbo].[ORDER_TASK_FINANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_TASK_FINANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_TASK_FINANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_TASK_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASK_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASK_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASKS_AD]
GO
CREATE TRIGGER [TR_ORDER_TASKS_AD]
ON [dbo].[ORDER_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASKS_AU]
GO

CREATE TRIGGER [TR_ORDER_TASKS_AU]
ON [dbo].[ORDER_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_TASKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASKS_DELIVERABLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASKS_DELIVERABLES_AD]
GO
CREATE TRIGGER [TR_ORDER_TASKS_DELIVERABLES_AD]
ON [dbo].[ORDER_TASKS_DELIVERABLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_TASKS_DELIVERABLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASKS_DELIVERABLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASKS_DELIVERABLES]',TASK_IDF+':=:'+DELIVERABLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','TASK_IDF:=:DELIVERABLE_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TASKS_DELIVERABLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TASKS_DELIVERABLES_AU]
GO

CREATE TRIGGER [TR_ORDER_TASKS_DELIVERABLES_AU]
ON [dbo].[ORDER_TASKS_DELIVERABLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.TASK_IDF= D.TASK_IDF AND I.DELIVERABLE_IDF = D.DELIVERABLE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_TASKS_DELIVERABLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_TASKS_DELIVERABLES] I INNER JOIN DELETED D on I.TASK_IDF= D.TASK_IDF AND I.DELIVERABLE_IDF = D.DELIVERABLE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_TASKS_DELIVERABLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TASKS_DELIVERABLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TASKS_DELIVERABLES]',TASK_IDF+':=:'+DELIVERABLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','TASK_IDF:=:DELIVERABLE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TO_DO_LISTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TO_DO_LISTS_AD]
GO
CREATE TRIGGER [TR_ORDER_TO_DO_LISTS_AD]
ON [dbo].[ORDER_TO_DO_LISTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDER_TO_DO_LISTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TO_DO_LISTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TO_DO_LISTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDER_TO_DO_LISTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDER_TO_DO_LISTS_AU]
GO

CREATE TRIGGER [TR_ORDER_TO_DO_LISTS_AU]
ON [dbo].[ORDER_TO_DO_LISTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDER_TO_DO_LISTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDER_TO_DO_LISTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDER_TO_DO_LISTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDER_TO_DO_LISTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDER_TO_DO_LISTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORDERS_AD]
GO
CREATE TRIGGER [TR_ORDERS_AD]
ON [dbo].[ORDERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORDERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDERS_AI]','TR') is not NULL
     DROP TRIGGER [TR_ORDERS_AI]
GO
CREATE TRIGGER [TR_ORDERS_AI]
ON [dbo].[ORDERS] AFTER INSERT AS
BEGIN
     INSERT INTO [dbo].[ORDER_TASKS]([IDF],[ORDER_IDF],FINANCE_IDR,DELIVERABLE_IDR,[PRIMARY_IDR],[REFERENCE_CODE],[TITLE],[NAME_CODE],[VALUE_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[POSITION_ORDER],[ACCESS_LEVEL],[VERSION],[CONTACT_IDF])
     SELECT 'ODEF_'+RIGHT(IDF,59), IDF,1,1,1, REFERENCE_CODE,[TITLE],[NAME_CODE],[VALUE_CODE],'C_ORDER','C_DEFAULT','Task for the whole scope of the Order: ' + VALUE_CODE,[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],0,[ACCESS_LEVEL],[VERSION],[CONTACT_IDF]
     FROM INSERTED
END
GO

IF OBJECT_ID('[TR_ORDERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORDERS_AU]
GO

CREATE TRIGGER [TR_ORDERS_AU]
ON [dbo].[ORDERS] AFTER UPDATE AS
BEGIN
   if UPDATE(SUBMITTER_NAME_CODE) or  UPDATE(COTR_NAME_CODE) or UPDATE(AMO_NAME_CODE) or UPDATE(CO_NAME_CODE) or UPDATE(CS_NAME_CODE) or UPDATE(POC_NAME_CODE) or UPDATE(ISSO_NAME_CODE) or UPDATE(REVIEWER_NAME_CODE)
      OR UPDATE(COTR_ALT_NAME_CODE) or UPDATE(AMO_ALT_NAME_CODE) or UPDATE(CO_ALT_NAME_CODE) or UPDATE(CS_ALT_NAME_CODE) or UPDATE(ISSO_ALT_NAME_CODE) or UPDATE(REVIEWER_NAME_CODE)
      RETURN

   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.SUBMITTER_IDF=D.SUBMITTER_IDF)
      UPDATE o SET SUBMITTER_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.SUBMITTER_IDF,'C_PERSON'),'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.REVIEWER_IDF=D.REVIEWER_IDF)
      UPDATE o SET REVIEWER_NAME_CODE  = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.REVIEWER_IDF,'C_PERSON'), 'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.CO_IDF=D.CO_IDF)
      UPDATE o SET CO_NAME_CODE        = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.CO_IDF,'C_PERSON'),       'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.CO_ALT_IDF=D.CO_ALT_IDF)
      UPDATE o SET CO_ALT_NAME_CODE   = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.CO_ALT_IDF,'C_PERSON'),    'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.CS_IDF=D.CS_IDF)
      UPDATE o SET CS_NAME_CODE       = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.CS_IDF,'C_PERSON'),        'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.CS_ALT_IDF=D.CS_ALT_IDF)
      UPDATE o SET CS_ALT_NAME_CODE   = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.CS_ALT_IDF,'C_PERSON'),    'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.COTR_IDF=D.COTR_IDF)
      UPDATE o SET COTR_NAME_CODE     = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.COTR_IDF,'C_PERSON'),     'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.COTR_ALT_IDF=D.COTR_ALT_IDF)
      UPDATE o SET COTR_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.COTR_ALT_IDF,'C_PERSON'), 'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.ISSO_IDF=D.ISSO_IDF)
      UPDATE o SET ISSO_NAME_CODE     = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.ISSO_IDF,'C_PERSON'),     'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.ISSO_ALT_IDF=D.ISSO_ALT_IDF)
      UPDATE o SET ISSO_ALT_NAME_CODE = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.ISSO_ALT_IDF,'C_PERSON'), 'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.POC_IDF=D.POC_IDF)
      UPDATE o SET POC_NAME_CODE      = dbo.fn_GetPersonName(dbo.fn_GetMapIDF(i.POC_IDF,'C_PERSON'),      'C_PERSON') FROM ORDERS o inner JOIN INSERTED I on o.IDF = I.IDF


   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORDERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORDERS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORDERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORDERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORDERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORDERS_BI]','TR') is not NULL
     DROP TRIGGER [TR_ORDERS_BI]
GO
CREATE TRIGGER [TR_ORDERS_BI]
ON [dbo].[ORDERS]
INSTEAD OF INSERT AS
BEGIN /* CODE check the IDF */
      if (SElECT COUNT(*) from INSERTED WHERE IDF IS NULL ) > 0
      BEGIN
              SELECT * INTO #T FROM INSERTED
              UPDATE #T SET IDF =  dbo.fn_NewIDFExt('ORD') WHERE IDF is null
              INSERT INTO [dbo].[ORDERS] SELECT * FROM #T
              DROP TABLE #T
      END
      ELSE
         INSERT INTO [dbo].[ORDERS] SELECT * FROM INSERTED
END
GO

IF OBJECT_ID('[TR_ORGANIZATION_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORGANIZATION_ROLES_AD]
GO
CREATE TRIGGER [TR_ORGANIZATION_ROLES_AD]
ON [dbo].[ORGANIZATION_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORGANIZATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORGANIZATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORGANIZATION_ROLES]',ORGANIZATION_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','ORGANIZATION_IDF:=:ROLE_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORGANIZATION_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORGANIZATION_ROLES_AU]
GO

CREATE TRIGGER [TR_ORGANIZATION_ROLES_AU]
ON [dbo].[ORGANIZATION_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ORGANIZATION_IDF =D.ORGANIZATION_IDF AND I.ROLE_IDF = D.ROLE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORGANIZATION_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORGANIZATION_ROLES] I INNER JOIN DELETED D on I.ORGANIZATION_IDF =D.ORGANIZATION_IDF AND I.ROLE_IDF = D.ROLE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[ORGANIZATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORGANIZATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORGANIZATION_ROLES]',ORGANIZATION_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','ORGANIZATION_IDF:=:ROLE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORGANIZATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_ORGANIZATIONS_AD]
GO
CREATE TRIGGER [TR_ORGANIZATIONS_AD]
ON [dbo].[ORGANIZATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORGANIZATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_ORGANIZATIONS_AI]','TR') is not NULL
     DROP TRIGGER [TR_ORGANIZATIONS_AI]
GO

CREATE TRIGGER [TR_ORGANIZATIONS_AI]
ON [dbo].[ORGANIZATIONS]
INSTEAD OF INSERT AS
BEGIN

   INSERT INTO ORGANIZATIONS SELECT * FROM INSERTED WHERE IsNull(FEDERAL_IDR,0) = 0
   if (select count(*) from INSERTED where isNull(Federal_IDR,0) != 0) > 0
   BEGIN
     INSERT INTO ORGANIZATIONS([IDF]
      ,[NAME_CODE]
      ,[ASSOCIATED_NAME]
      ,[ACRONYM_NAME]
      ,[VALUE_CODE]
      ,[INTERNET_DOMAIN]
      ,[FEDERAL_IDR]
      ,[SBA_MASKED_IDR]
      ,[CAGE]
      ,[DUNS]
      ,[EIN]
      ,[CATEGORY_CODE]
      ,[TYPE_CODE]
      ,[DESCRIPTION]
      ,[EFFECTIVE_START_DATE]
      ,[EFFECTIVE_END_DATE]
      ,[STATUS_CODE]
      ,[STATUS_DATE]
      ,[COMMENTS]
      ,[REFERENCE_CODE]
      ,[REFERENCE_ID]
      ,[REFERENCE_NAME]
      ,[VERIFICATION_IDR]
      ,[PRIMARY_IDR]
      ,[CREATED_DATE]
      ,[CREATED_BY]
      ,[ACCESS_LEVEL]
      ,[VERSION]
      ,[PARENT_CODE]
      ,[PARENT_IDF]
      ,[CONTACT_IDF])
     SELECT replace([IDF],'ORGX_','FORG_')
      ,[NAME_CODE]
      ,[ASSOCIATED_NAME]
      ,[ACRONYM_NAME]
      ,[VALUE_CODE]
      ,[INTERNET_DOMAIN]
      ,[FEDERAL_IDR]
      ,[SBA_MASKED_IDR]
      ,[CAGE]
      ,[DUNS]
      ,[EIN]
      ,[CATEGORY_CODE]
      ,[TYPE_CODE]
      ,[DESCRIPTION]
      ,[EFFECTIVE_START_DATE]
      ,[EFFECTIVE_END_DATE]
      ,[STATUS_CODE]
      ,[STATUS_DATE]
      ,[COMMENTS]
      ,[REFERENCE_CODE]
      ,[REFERENCE_ID]
      ,[REFERENCE_NAME]
      ,[VERIFICATION_IDR]
      ,[PRIMARY_IDR]
      ,[CREATED_DATE]
      ,[CREATED_BY]
      ,[ACCESS_LEVEL]
      ,[VERSION]
      ,[PARENT_CODE]
      ,[PARENT_IDF]
      ,[CONTACT_IDF]
     FROM INSERTED
     WHERE isNull(FEDERAL_IDR,0) > 0

     INSERT FEDERAL_ORGANIZATIONS([IDF]
      ,[NAME_CODE]
      ,[ASSOCIATED_NAME]
      ,[ACRONYM_NAME]
      ,[VALUE_CODE]
      ,[INTERNET_DOMAIN]
      ,[CATEGORY_CODE]
      ,[TYPE_CODE]
      ,[DESCRIPTION]
      ,[EFFECTIVE_START_DATE]
      ,[EFFECTIVE_END_DATE]
      ,[STATUS_CODE]
      ,[STATUS_DATE]
      ,[COMMENTS]
      ,[REFERENCE_CODE]
      ,[REFERENCE_ID]
      ,[REFERENCE_NAME]
      ,[VERIFICATION_IDR]
      ,[CREATED_DATE]
      ,[CREATED_BY]
      ,[UPDATED_DATE]
      ,[UPDATED_BY]
      ,[UPDATED_COUNT]
      ,[ACCESS_LEVEL]
      ,[VERSION]
      ,[PARENT_CODE]
      ,[PARENT_IDF]
      ,[CONTACT_IDF] )
     SELECT replace([IDF],'ORGX_','FORG_')
      ,[NAME_CODE]
      ,[ASSOCIATED_NAME]
      ,[ACRONYM_NAME]
      ,[VALUE_CODE]
      ,[INTERNET_DOMAIN]
      ,[CATEGORY_CODE]
      ,[TYPE_CODE]
      ,[DESCRIPTION]
      ,[EFFECTIVE_START_DATE]
      ,[EFFECTIVE_END_DATE]
      ,[STATUS_CODE]
      ,[STATUS_DATE]
      ,[COMMENTS]
      ,[REFERENCE_CODE]
      ,[REFERENCE_ID]
      ,[REFERENCE_NAME]
      ,[VERIFICATION_IDR]
      ,[CREATED_DATE]
      ,[CREATED_BY]
      ,[UPDATED_DATE]
      ,[UPDATED_BY]
      ,[UPDATED_COUNT]
      ,[ACCESS_LEVEL]
      ,[VERSION]
      ,[PARENT_CODE]
      ,[PARENT_IDF]
      ,[CONTACT_IDF]
     FROM INSERTED WHERE isNull(FEDERAL_IDR,0) > 0
   END
END
GO

IF OBJECT_ID('[TR_ORGANIZATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_ORGANIZATIONS_AU]
GO

CREATE TRIGGER [TR_ORGANIZATIONS_AU]
ON [dbo].[ORGANIZATIONS] AFTER UPDATE AS
BEGIN
   if UPDATE(IDF) RETURN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[ORGANIZATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[ORGANIZATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF UPDATE (CONTACT_IDF) or UPDATE (PARENT_IDF) or UPDATE (NAME_CODE) or UPDATE(ASSOCIATED_NAME) or UPDATE(INTERNET_DOMAIN)
   BEGIN
           UPDATE F SET F.CONTACT_IDF =  I.CONTACT_IDF, F.PARENT_IDF = I.PARENT_IDF, F.NAME_CODE = I.NAME_CODE, F.ASSOCIATED_NAME = I.ASSOCIATED_NAME, F.INTERNET_DOMAIN = I.INTERNET_DOMAIN   FROM FEDERAL_ORGANIZATIONS F INNER JOIN INSERTED I on F.IDF = I.IDF
   END
   IF dbo.fn_IsAuditReady('[ORGANIZATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[ORGANIZATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[ORGANIZATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_ACTIVITIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_ACTIVITIES_AD]
GO
CREATE TRIGGER [TR_OWN_ACTIVITIES_AD]
ON [dbo].[OWN_ACTIVITIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_ACTIVITIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_ACTIVITIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_ACTIVITIES_AU]
GO

CREATE TRIGGER [TR_OWN_ACTIVITIES_AU]
ON [dbo].[OWN_ACTIVITIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_ACTIVITIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_ACTIVITIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_ACTIVITIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_ERRORS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_ERRORS_AD]
GO
CREATE TRIGGER [TR_OWN_ERRORS_AD]
ON [dbo].[OWN_ERRORS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_ERRORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_ERRORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_ERRORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_ERRORS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_ERRORS_AU]
GO

CREATE TRIGGER [TR_OWN_ERRORS_AU]
ON [dbo].[OWN_ERRORS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_ERRORS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_ERRORS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_ERRORS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_ERRORS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_ERRORS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_EVENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_EVENTS_AD]
GO
CREATE TRIGGER [TR_OWN_EVENTS_AD]
ON [dbo].[OWN_EVENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_EVENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_EVENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_EVENTS_AU]
GO

CREATE TRIGGER [TR_OWN_EVENTS_AU]
ON [dbo].[OWN_EVENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_EVENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_EVENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_EVENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_MESSAGES_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_MESSAGES_AD]
GO
CREATE TRIGGER [TR_OWN_MESSAGES_AD]
ON [dbo].[OWN_MESSAGES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_MESSAGES_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_MESSAGES_AU]
GO

CREATE TRIGGER [TR_OWN_MESSAGES_AU]
ON [dbo].[OWN_MESSAGES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_MESSAGES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_MESSAGES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_MESSAGES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_MESSAGES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_MESSAGES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_NOTIFICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_NOTIFICATIONS_AD]
GO
CREATE TRIGGER [TR_OWN_NOTIFICATIONS_AD]
ON [dbo].[OWN_NOTIFICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_NOTIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_NOTIFICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_NOTIFICATIONS_AU]
GO

CREATE TRIGGER [TR_OWN_NOTIFICATIONS_AU]
ON [dbo].[OWN_NOTIFICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_NOTIFICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_NOTIFICATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_NOTIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_NOTIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_NOTIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_REQUESTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_REQUESTS_AD]
GO
CREATE TRIGGER [TR_OWN_REQUESTS_AD]
ON [dbo].[OWN_REQUESTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_REQUESTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_REQUESTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_REQUESTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_REQUESTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_REQUESTS_AU]
GO

CREATE TRIGGER [TR_OWN_REQUESTS_AU]
ON [dbo].[OWN_REQUESTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_REQUESTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_REQUESTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_REQUESTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_REQUESTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_REQUESTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_TASKS_AD]
GO
CREATE TRIGGER [TR_OWN_TASKS_AD]
ON [dbo].[OWN_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_TASKS_AU]
GO

CREATE TRIGGER [TR_OWN_TASKS_AU]
ON [dbo].[OWN_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_TASKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_TEMPLATES_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_TEMPLATES_AD]
GO
CREATE TRIGGER [TR_OWN_TEMPLATES_AD]
ON [dbo].[OWN_TEMPLATES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_TEMPLATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_TEMPLATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_TEMPLATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_TEMPLATES_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_TEMPLATES_AU]
GO

CREATE TRIGGER [TR_OWN_TEMPLATES_AU]
ON [dbo].[OWN_TEMPLATES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_TEMPLATES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_TEMPLATES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_TEMPLATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_TEMPLATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_TEMPLATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_VALUESETS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_VALUESETS_AD]
GO
CREATE TRIGGER [TR_OWN_VALUESETS_AD]
ON [dbo].[OWN_VALUESETS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_VALUESETS]([IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION] )
      SELECT [IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION]
      FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_VALUESETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_VALUESETS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_VALUESETS_AU]
GO

CREATE TRIGGER [TR_OWN_VALUESETS_AU]
ON [dbo].[OWN_VALUESETS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_VALUESETS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_VALUESETS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_VALUESETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_VALUESETS]([IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION] )
      SELECT [IDF] ,[NAME_CODE] ,[VALUE_CODE] ,[VALUE_STRING],[VALUE_NUMBER],[VALUE_INTEGER],[VALUE_MONEY],[VALUE_NOTE],[VALUE_UOM],[ACRONYM_NAME],[CATEGORY_CODE],[TYPE_CODE] ,[DESCRIPTION],[STATUS_CODE],[STATUS_DATE],[COMMENTS],[REFERENCE_ID],[REFERENCE_NAME]
            ,[VERIFICATION_IDR],[REQUIRED_IDR],[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT],[ACCESS_LEVEL],[PARENT_CODE],[PARENT_IDF],[VERSION]
      FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_VALUESETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_VERIFY_PROCESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_VERIFY_PROCESSES_AD]
GO
CREATE TRIGGER [TR_OWN_VERIFY_PROCESSES_AD]
ON [dbo].[OWN_VERIFY_PROCESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_VERIFY_PROCESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_VERIFY_PROCESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_VERIFY_PROCESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_VERIFY_PROCESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_VERIFY_PROCESSES_AU]
GO

CREATE TRIGGER [TR_OWN_VERIFY_PROCESSES_AU]
ON [dbo].[OWN_VERIFY_PROCESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_VERIFY_PROCESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_VERIFY_PROCESSES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_VERIFY_PROCESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_VERIFY_PROCESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_VERIFY_PROCESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_WORKFLOWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWN_WORKFLOWS_AD]
GO
CREATE TRIGGER [TR_OWN_WORKFLOWS_AD]
ON [dbo].[OWN_WORKFLOWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWN_WORKFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_WORKFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_WORKFLOWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWN_WORKFLOWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWN_WORKFLOWS_AU]
GO

CREATE TRIGGER [TR_OWN_WORKFLOWS_AU]
ON [dbo].[OWN_WORKFLOWS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWN_WORKFLOWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWN_WORKFLOWS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWN_WORKFLOWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWN_WORKFLOWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWN_WORKFLOWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWNER_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_OWNER_ITEMS_AD]
GO
CREATE TRIGGER [TR_OWNER_ITEMS_AD]
ON [dbo].[OWNER_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[OWNER_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWNER_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWNER_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_OWNER_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_OWNER_ITEMS_AU]
GO

CREATE TRIGGER [TR_OWNER_ITEMS_AU]
ON [dbo].[OWNER_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[OWNER_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[OWNER_ITEMS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[OWNER_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[OWNER_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[OWNER_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PAYMENT_REPORT_AD]','TR') is not NULL
     DROP TRIGGER [TR_PAYMENT_REPORT_AD]
GO
CREATE TRIGGER [TR_PAYMENT_REPORT_AD]
ON [dbo].[PAYMENT_REPORT] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PAYMENT_REPORT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PAYMENT_REPORT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PAYMENT_REPORT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PAYMENT_REPORT_AU]','TR') is not NULL
     DROP TRIGGER [TR_PAYMENT_REPORT_AU]
GO

CREATE TRIGGER [TR_PAYMENT_REPORT_AU]
ON [dbo].[PAYMENT_REPORT] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PAYMENT_REPORT] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PAYMENT_REPORT] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PAYMENT_REPORT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PAYMENT_REPORT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PAYMENT_REPORT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PAYMENT_REPORT_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PAYMENT_REPORT_ITEMS_AD]
GO
CREATE TRIGGER [TR_PAYMENT_REPORT_ITEMS_AD]
ON [dbo].[PAYMENT_REPORT_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PAYMENT_REPORT_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PAYMENT_REPORT_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PAYMENT_REPORT_ITEMS]',REPORT_IDF+':=:'+INVOICE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','REPORT_IDF:=:INVOICE_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PAYMENT_REPORT_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PAYMENT_REPORT_ITEMS_AU]
GO

CREATE TRIGGER [TR_PAYMENT_REPORT_ITEMS_AU]
ON [dbo].[PAYMENT_REPORT_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.REPORT_IDF=D.REPORT_IDF AND I.INVOICE_IDF = D.INVOICE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PAYMENT_REPORT_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PAYMENT_REPORT_ITEMS] I INNER JOIN DELETED D on I.REPORT_IDF=D.REPORT_IDF AND I.INVOICE_IDF = D.INVOICE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PAYMENT_REPORT_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PAYMENT_REPORT_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PAYMENT_REPORT_ITEMS]',REPORT_IDF+':=:'+INVOICE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','REPORT_IDF:=:INVOICE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PERSON_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_PERSON_ROLES_AD]
GO
CREATE TRIGGER [TR_PERSON_ROLES_AD]
ON [dbo].[PERSON_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PERSON_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PERSON_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PERSON_ROLES]',PERSON_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','PERSON_IDF:=:ROLE_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PERSON_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_PERSON_ROLES_AU]
GO

CREATE TRIGGER [TR_PERSON_ROLES_AU]
ON [dbo].[PERSON_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.PERSON_IDF=D.PERSON_IDF AND I.ROLE_IDF = D.ROLE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PERSON_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PERSON_ROLES] I INNER JOIN DELETED D on I.PERSON_IDF=D.PERSON_IDF AND I.ROLE_IDF = D.ROLE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PERSON_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PERSON_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PERSON_ROLES]',PERSON_IDF+':=:'+ROLE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','PERSON_IDF:=:ROLE_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PERSONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PERSONS_AD]
GO
CREATE TRIGGER [TR_PERSONS_AD]
ON [dbo].[PERSONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PERSONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PERSONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PERSONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PERSONS_AI]','TR') is not NULL
     DROP TRIGGER [TR_PERSONS_AI]
GO
CREATE TRIGGER [TR_PERSONS_AI]
ON [dbo].[PERSONS] AFTER INSERT AS
BEGIN
     if (SELECT COUNT(*) FROM INSERTED I INNER JOIN [dbo].[PERSONS] U on upper(LTRIM(RTRIM(I.FIRST_NAME))) = upper(LTRIM(RTRIM(U.FIRST_NAME))) AND upper(LTRIM(RTRIM(I.LAST_NAME))) = upper(LTRIM(RTRIM(U.LAST_NAME))) and (I.EMAIL = U.EMAIL or I.Phone = U.Phone) ) > 0
     BEGIN
             Declare @Description as varchar(512);
             exec sp_Log_Error @P_SEVERITY_CODE='C_FATAL',@P_REFERENCE_NAME='TRIGGER: [TR_PERSONS_AI] on TABLE: [dbo].[PERSONS]',@P_CATEGORY_CODE='C_ERR_DATABASE', @P_ERR_CODE='C_REC_DUPLICATE', @ReturnValue=@Description OUT
             set @Description += 'C_ERR_DUPLICATE: '
             ;THROW 50001, @Description, 1;
     END
     ELSE IF (SELECT COUNT(*) FROM INSERTED where dbo.fn_IsValidEmail(EMail,CATEGORY_CODE) < 1) > 0
            THROW 80001, 'C_ERR_EMAIL', 1;
     ELSE IF (SELECT COUNT(*) FROM INSERTED where dbo.fn_IsValidPhone(Phone) < 1) > 0
            THROW 80003, 'C_ERR_PHONE', 1;
     --- handle basic tables CONTACTS, TELECOM_ADDRESSES, AND CONTACT_TELECOM_ADDRESSES
     INSERT INTO TELECOM_ADDRESSES(IDF, NAME_CODE,PHONE,FAX, EMAIL, CATEGORY_CODE, TYPE_CODE, USAGE_CODE, DESCRIPTION, COMMENTS, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY)
     SELECT 'TADR_'+ right(IDF,59), PREFERRED_NAME,PHONE, FAX, EMAIL,'C_PUBLIC', 'C_PERSON', 'C_BUSINESS','Personal Telecom Address for ' + REFERENCE_NAME,'Created by [TR_PERSONS_AI] as a default telecom for: ' + PREFERRED_NAME, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY
     FROM INSERTED

     INSERT INTO CONTACTS(IDF, OWNER_IDF, OWNER_TYPE, NAME_CODE,CATEGORY_CODE, TYPE_CODE, USAGE_CODE, DESCRIPTION, COMMENTS, STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY, ACCESS_LEVEL ,[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR], VERSION)
     SELECT 'CTAP_'+ right(IDF,59), IDF, 'C_PERSON', PREFERRED_NAME, 'C_PUBLIC', 'C_PERSON', 'C_BUSINESS', 'Created as a primary contact for: '+ PREFERRED_NAME, 'Created from a triiger: ([TR_PERSONS_AI]).' , STATUS_CODE, STATUS_DATE, CREATED_DATE, CREATED_BY, ACCESS_LEVEL, CREATED_DATE,NULL, 1, 1, 1, 'VERSION:0'
     FROM INSERTED

     INSERT INTO CONTACT_TELECOM_ADDRESSES( [CONTACT_IDF],[TELECOM_ADDRESS_IDF],[OWNER_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE],[DESCRIPTION],[USAGE_CODE],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE] ,[STATUS_DATE] ,[COMMENTS],[REFERENCE_NAME],[VERIFICATION_IDR],[PRIMARY_IDR],[PREFERRED_IDR],[CREATED_DATE],[CREATED_BY],[POSITION_ORDER],[VERSION])
     SELECT C.IDF, T.IDF, I.IDF, C.NAME_CODE,C.[CATEGORY_CODE],C.[TYPE_CODE],T.[DESCRIPTION],C.[USAGE_CODE],C.[EFFECTIVE_START_DATE],C.[EFFECTIVE_END_DATE],C.[STATUS_CODE],C.[STATUS_DATE],T.[COMMENTS],I.[REFERENCE_NAME],C.[VERIFICATION_IDR],C.[PRIMARY_IDR],C.[PREFERRED_IDR],C.[CREATED_DATE],C.[CREATED_BY],1,C.[VERSION]
     FROM INSERTED I INNER JOIN CONTACTS C on Left(I.IDF,59) = LEFT(C.IDF,59) INNER JOIN TELECOM_ADDRESSES T on Left(I.IDF,59) = LEFT(T.IDF,59)
END
GO

IF OBJECT_ID('[TR_PERSONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PERSONS_AU]
GO

CREATE TRIGGER [TR_PERSONS_AU]
ON [dbo].[PERSONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PERSONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PERSONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   if UPDATE(EMAIL)
   BEGIN
          IF (SELECT COUNT(*) FROM INSERTED where dbo.fn_IsValidEmail(EMail,TYPE_CODE) < 1) > 0
              THROW 80001, 'C_ERR_EMAIL', 1;
          ELSE
          BEGIN
              UPDATE u SET EMAIL = I.EMAIL
              FROM USERS u INNER JOIN DELETED D on u.OWNER_IDF = D.IDF INNER JOIN INSERTED I on I.IDF = D.IDF
              WHERE u.EMAIL = D.EMAIL AND I.EMAIL <> D.EMAIL
          END
   END
   ELSE IF UPDATE(PHONE) AND (SELECT COUNT(*) FROM INSERTED where dbo.fn_IsValidPhone(PHONE) < 1) > 0
          THROW 80003, 'C_ERR_PHONE', 1;
   IF dbo.fn_IsAuditReady('[PERSONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PERSONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PERSONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROCESS_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROCESS_DETAILS_AD]
GO
CREATE TRIGGER [TR_PROCESS_DETAILS_AD]
ON [dbo].[PROCESS_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROCESS_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROCESS_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROCESS_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROCESS_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROCESS_DETAILS_AU]
GO

CREATE TRIGGER [TR_PROCESS_DETAILS_AU]
ON [dbo].[PROCESS_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROCESS_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROCESS_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROCESS_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROCESS_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROCESS_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_DELIVERIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_DELIVERIES_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_DELIVERIES_AD]
ON [dbo].[PROPOSAL_DELIVERIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_DELIVERIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_DELIVERIES_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_DELIVERIES_AU]
ON [dbo].[PROPOSAL_DELIVERIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_DELIVERIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_DELIVERIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_DELIVERIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_DELIVERIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_DELIVERIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_DETAILS_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_DETAILS_AD]
ON [dbo].[PROPOSAL_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_DETAILS_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_DETAILS_AU]
ON [dbo].[PROPOSAL_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_FINANCE_LOES_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_FINANCE_LOES_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_FINANCE_LOES_AD]
ON [dbo].[PROPOSAL_FINANCE_LOES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_FINANCE_LOES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_FINANCE_LOES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_FINANCE_LOES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_FINANCE_LOES_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_FINANCE_LOES_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_FINANCE_LOES_AU]
ON [dbo].[PROPOSAL_FINANCE_LOES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_FINANCE_LOES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_FINANCE_LOES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_FINANCE_LOES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_FINANCE_LOES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_FINANCE_LOES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_FINANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_FINANCES_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_FINANCES_AD]
ON [dbo].[PROPOSAL_FINANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_FINANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_FINANCES_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_FINANCES_AU]
ON [dbo].[PROPOSAL_FINANCES] AFTER UPDATE AS
BEGIN
   if UPDATE(TAX_IDR) AND EXISTS(SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF AND I.TAX_IDR <> D.TAX_IDR)
   BEGIN
         UPDATE D SET TAX_IDR = I.TAX_IDR
         FROM PROPSOAL_DELIVERIES D INNER JOIN INSERTED I on D.PROPOSAL_IDF = I.PROPOSAL_IDF

         UPDATE t SET TAX_AMOUNT =  isNull(dbo.fn_GetTax(D.ADDRESS_IDF, t.PROPOSED_AMOUNT),0)
         FROM [dbo].[PROPOSAL_FINANCES] t INNER JOIN INSERTED I On t.IDF = I.IDF INNER JOIN DELETED D on I.IDF = D.IDF AND I.TAX_IDR <> D.TAX_IDR
         INNER JOIN PROPSOAL_DELIVERIES D on D.PROPOSAL_IDF = I.PROPOSAL_IDF
         WHERE I.TAX_IDR > 0

         UPDATE t SET TAX_AMOUNT = 0.0
         FROM [dbo].[PROPOSAL_FINANCES] t INNER JOIN INSERTED I On t.IDF = I.IDF INNER JOIN DELETED D on I.IDF = D.IDF AND I.TAX_IDR <> D.TAX_IDR
         WHERE I.TAX_IDR = 0
         UPDATE t SET TOTAL_AMOUNT = isNUll(I.SHIPPING_AMOUNT,0) + IsNull(I.TAX_AMOUNT,0) + I.PROPOSED_AMOUNT + isNull(I.OTHER_COST,0)
         FROM  [dbo].[PROPOSAL_FINANCES] t INNER JOIN INSERTED I on t.IDF = I.IDF
   END
   ELSE IF UPDATE(TAX_AMOUNT)
        RETURN

   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_FINANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_FINANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_RATINGS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_RATINGS_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_RATINGS_AD]
ON [dbo].[PROPOSAL_RATINGS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_RATINGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_RATINGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_RATINGS]',REVIEW_IDF+':'+RATE_FACTOR_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','REVIEW_IDF:RATE_FACTOR_IDF for DELETE' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_RATINGS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_RATINGS_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_RATINGS_AU]
ON [dbo].[PROPOSAL_RATINGS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.REVIEW_IDF = D.REVIEW_IDF AND I.RATE_FACTOR_IDF = D.RATE_FACTOR_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_RATINGS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_RATINGS] I INNER JOIN DELETED D on I.REVIEW_IDF = D.REVIEW_IDF AND I.RATE_FACTOR_IDF = D.RATE_FACTOR_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_RATINGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_RATINGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_RATINGS]',REVIEW_IDF+':'+RATE_FACTOR_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','REVIEW_IDF:RATE_FACTOR_IDF  Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_REVIEWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_REVIEWS_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_REVIEWS_AD]
ON [dbo].[PROPOSAL_REVIEWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_REVIEWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_REVIEWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_REVIEWS_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_REVIEWS_AU]
ON [dbo].[PROPOSAL_REVIEWS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_REVIEWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_REVIEWS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_REVIEWS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_REVISIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_REVISIONS_AD]
GO
CREATE TRIGGER [TR_PROPOSAL_REVISIONS_AD]
ON [dbo].[PROPOSAL_REVISIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSAL_REVISIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_REVISIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_REVISIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSAL_REVISIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSAL_REVISIONS_AU]
GO

CREATE TRIGGER [TR_PROPOSAL_REVISIONS_AU]
ON [dbo].[PROPOSAL_REVISIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSAL_REVISIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSAL_REVISIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSAL_REVISIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSAL_REVISIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSAL_REVISIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSALS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSALS_AD]
GO
CREATE TRIGGER [TR_PROPOSALS_AD]
ON [dbo].[PROPOSALS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSALS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSALS_AI]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSALS_AI]
GO
CREATE TRIGGER [TR_PROPOSALS_AI]
ON [dbo].[PROPOSALS] AFTER INSERT AS
BEGIN
        IF EXISTS (select * from Order_Responses r inner join INSERTED I on r.ORDER_IDF = I.ORDER_IDF AND I.CONTRACTOR_IDF = r.CONTRACTOR_IDF WHERE r.NO_BID_IDR = 1 )
               RAISERROR ('C_ERR_NOBID: Already Submit NoBid for the proposal.', 16, 1);
        ELSE IF NOT EXISTS (select * from Order_Responses r inner join INSERTED I on r.ORDER_IDF = I.ORDER_IDF AND I.CONTRACTOR_IDF = r.CONTRACTOR_IDF)
               INSERT INTO ORDER_RESPONSES([ORDER_IDF],[CONTRACTOR_IDF],[CONTACT_IDF],[PROPOSAL_IDF],[SUBMITTER_IDF] ,[POC_IDF], [APPLICATION_IDF],[NAME_CODE],[CATEGORY_CODE],[TYPE_CODE]
           ,[DESCRIPTION],[EFFECTIVE_START_DATE],[EFFECTIVE_END_DATE],[STATUS_CODE] ,[STATUS_DATE],[COMMENTS]
           ,[REFERENCE_CODE],[REFERENCE_ID],[REFERENCE_NAME],[VERIFICATION_IDR] ,[CREATED_DATE],[CREATED_BY],[UPDATED_DATE],[UPDATED_BY],[UPDATED_COUNT]
           ,[REVIEWED_DATE],[REVIEWED_BY],[APPROVED_DATE],[APPROVED_BY],[ACCESS_LEVEL],[VERSION]
           ,[NO_BID_IDR],[REASON_CODE],[NOTE_TEXT],[REVISION_IDR],[REVISION_MESSAGE],[REVISION_DATE])
            SELECT I.ORDER_IDF, I.CONTRACTOR_IDF, I.CONTRACT_IDF, I.IDF, I.SUBMITTER_IDF, I.POC_IDF, I.APPLICATION_IDF, 'Response to Order with a Proposal: ' + I.VALUE_CODE,'C_ORDER','C_SUBMISSION'
            ,'Contrator Submit the proposal: ('+I.VALUE_CODE+') without the previous response for the order: '+o.VALUE_CODE, o.CREATED_DATE, I.CREATED_DATE, 'SUBMIT', I.CREATED_DATE,''
            ,o.[REFERENCE_CODE],NULL,NULL,1,I.[CREATED_DATE],I.[CREATED_BY],I.[UPDATED_DATE],I.[UPDATED_BY],I.[UPDATED_COUNT]
            ,I.[REVIEWED_DATE],I.[REVIEWED_BY],I.[APPROVED_DATE],I.[APPROVED_BY],I.[ACCESS_LEVEL],I.[VERSION]
            ,0, 'C_SUBMISSION', NULL, 0, NULL,NULL
            FROM INSERTED I INNER JOIN ORDERS o on I.ORDER_IDF = I.IDF
        ELSE
               UPDATE r SET [CONTACT_IDF] = isNull(I.CONTACT_IDF, r.CONTACT_IDF), CONTRACT_IDF = I.CONTRACT_IDF, [PROPOSAL_IDF] = I.IDF, [SUBMITTER_IDF] = I.[SUBMITTER_IDF],[POC_IDF] = I.[POC_IDF],[UPDATED_DATE]=I.[UPDATED_DATE],[UPDATED_BY]=I.[UPDATED_BY],[UPDATED_COUNT]=r.[UPDATED_COUNT]+1
               ,[DESCRIPTION]= 'Contrator submits the proposal: ('+I.VALUE_CODE+') in response for the order: '+r.REFERENCE_CODE,[REVIEWED_DATE] = isNull(r.[REVIEWED_DATE],I.[REVIEWED_DATE]),[REVIEWED_BY] = IsNull(r.[REVIEWED_BY],I.[REVIEWED_BY]),[APPROVED_DATE]=IsNull(r.[APPROVED_DATE],I.[APPROVED_DATE]),[APPROVED_BY]=isNull(r.[APPROVED_BY],I.[APPROVED_BY])
               from ORDER_RESPONSES r inner join INSERTED I on r.ORDER_IDF = I.ORDER_IDF AND I.CONTRACTOR_IDF = r.CONTRACTOR_IDF WHERE r.NO_BID_IDR = 0
END
GO

IF OBJECT_ID('[TR_PROPOSALS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSALS_AU]
GO

CREATE TRIGGER [TR_PROPOSALS_AU]
ON [dbo].[PROPOSALS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSALS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSALS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSALS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSALS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSALS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_CLINS_AD]
GO
CREATE TRIGGER [TR_PROPOSED_CLINS_AD]
ON [dbo].[PROPOSED_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSED_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_CLINS]',PROPOSAL_IDF+':'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','PROPOSAL_IDF:ITEM_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_CLINS_AU]
GO

CREATE TRIGGER [TR_PROPOSED_CLINS_AU]
ON [dbo].[PROPOSED_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.PROPOSAL_IDF=D.PROPOSAL_IDF AND I.ITEM_IDF = D.ITEM_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSED_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSED_CLINS] I INNER JOIN DELETED D on I.PROPOSAL_IDF=D.PROPOSAL_IDF AND I.ITEM_IDF = D.ITEM_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSED_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_CLINS]',PROPOSAL_IDF+':'+ITEM_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','PROPOSAL_IDF:ITEM_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_TASK_FINANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_TASK_FINANCES_AD]
GO
CREATE TRIGGER [TR_PROPOSED_TASK_FINANCES_AD]
ON [dbo].[PROPOSED_TASK_FINANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSED_TASK_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_TASK_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_TASK_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_TASK_FINANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_TASK_FINANCES_AU]
GO

CREATE TRIGGER [TR_PROPOSED_TASK_FINANCES_AU]
ON [dbo].[PROPOSED_TASK_FINANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSED_TASK_FINANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSED_TASK_FINANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSED_TASK_FINANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_TASK_FINANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_TASK_FINANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_TASKS_AD]
GO
CREATE TRIGGER [TR_PROPOSED_TASKS_AD]
ON [dbo].[PROPOSED_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[PROPOSED_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_PROPOSED_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_PROPOSED_TASKS_AU]
GO

CREATE TRIGGER [TR_PROPOSED_TASKS_AU]
ON [dbo].[PROPOSED_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[PROPOSED_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[PROPOSED_TASKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[PROPOSED_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[PROPOSED_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[PROPOSED_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_QUESTION_ANSWERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_QUESTION_ANSWERS_AD]
GO
CREATE TRIGGER [TR_QUESTION_ANSWERS_AD]
ON [dbo].[QUESTION_ANSWERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[QUESTION_ANSWERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[QUESTION_ANSWERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[QUESTION_ANSWERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_QUESTION_ANSWERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_QUESTION_ANSWERS_AU]
GO

CREATE TRIGGER [TR_QUESTION_ANSWERS_AU]
ON [dbo].[QUESTION_ANSWERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[QUESTION_ANSWERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[QUESTION_ANSWERS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[QUESTION_ANSWERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[QUESTION_ANSWERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[QUESTION_ANSWERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_CONTRACTOR_TRP_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_CONTRACTOR_TRP_CLINS_AD]
GO
CREATE TRIGGER [TR_REF_CONTRACTOR_TRP_CLINS_AD]
ON [dbo].[REF_CONTRACTOR_TRP_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_CONTRACTOR_TRP_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_CONTRACTOR_TRP_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_CONTRACTOR_TRP_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_CONTRACTOR_TRP_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_CONTRACTOR_TRP_CLINS_AU]
GO

CREATE TRIGGER [TR_REF_CONTRACTOR_TRP_CLINS_AU]
ON [dbo].[REF_CONTRACTOR_TRP_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_CONTRACTOR_TRP_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_CONTRACTOR_TRP_CLINS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_CONTRACTOR_TRP_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_CONTRACTOR_TRP_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_CONTRACTOR_TRP_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_CONTRACTOR_TRPS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_CONTRACTOR_TRPS_AD]
GO
CREATE TRIGGER [TR_REF_CONTRACTOR_TRPS_AD]
ON [dbo].[REF_CONTRACTOR_TRPS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_CONTRACTOR_TRPS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_CONTRACTOR_TRPS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_CONTRACTOR_TRPS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_CONTRACTOR_TRPS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_CONTRACTOR_TRPS_AU]
GO

CREATE TRIGGER [TR_REF_CONTRACTOR_TRPS_AU]
ON [dbo].[REF_CONTRACTOR_TRPS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_CONTRACTOR_TRPS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_CONTRACTOR_TRPS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_CONTRACTOR_TRPS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_CONTRACTOR_TRPS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_CONTRACTOR_TRPS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_LOOKUP_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_LOOKUP_ITEMS_AD]
GO
CREATE TRIGGER [TR_REF_LOOKUP_ITEMS_AD]
ON [dbo].[REF_LOOKUP_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_LOOKUP_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_LOOKUP_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_LOOKUP_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_LOOKUP_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_LOOKUP_ITEMS_AU]
GO

CREATE TRIGGER [TR_REF_LOOKUP_ITEMS_AU]
ON [dbo].[REF_LOOKUP_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_LOOKUP_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_LOOKUP_ITEMS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_LOOKUP_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_LOOKUP_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_LOOKUP_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CATEGORY_COMMODITY_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CATEGORY_COMMODITY_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CATEGORY_COMMODITY_AD]
ON [dbo].[REF_NITAAC_CATEGORY_COMMODITY] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CATEGORY_COMMODITY]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CATEGORY_COMMODITY] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CATEGORY_COMMODITY]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CATEGORY_COMMODITY_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CATEGORY_COMMODITY_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CATEGORY_COMMODITY_AU]
ON [dbo].[REF_NITAAC_CATEGORY_COMMODITY] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_CATEGORY_COMMODITY] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_CATEGORY_COMMODITY] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CATEGORY_COMMODITY]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CATEGORY_COMMODITY] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CATEGORY_COMMODITY]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CLIN_OFFER_TYPE_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CLIN_OFFER_TYPE_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CLIN_OFFER_TYPE_AD]
ON [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CLIN_OFFER_TYPE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CLIN_OFFER_TYPE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CLIN_OFFER_TYPE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CLIN_OFFER_TYPE_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CLIN_OFFER_TYPE_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CLIN_OFFER_TYPE_AU]
ON [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_CLIN_OFFER_TYPE] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CLIN_OFFER_TYPE]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CLIN_OFFER_TYPE] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CLIN_OFFER_TYPE]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CLINS_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CLINS_AD]
ON [dbo].[REF_NITAAC_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CLINS_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CLINS_AU]
ON [dbo].[REF_NITAAC_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_CLINS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CLINS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_CLINS_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_CLINS_AD]
ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_CLINS]',CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_CLINS_AI]
ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] AFTER INSERT AS
BEGIN

     if (SELECT count(*) from INSERTED i INNER JOIN REF_NITAAC_CLINS r on i.CLIN_IDF = r.IDF and  i.OEM_PART_NUM = r.OEM_PART_NUM and i.OEM_MFR_NAME = r.OEM_MFR_NAME) <> (SELECT Count(*) from INSERTED)
         RAISERROR ('C_ERR_PN_MFR. non existence of PN/MFR- ', 10,1)
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_CLINS_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_CLINS_AU]
ON [dbo].[REF_NITAAC_CONTRACTOR_CLINS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.CLIN_IDF = D.CLIN_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_CONTRACTOR_CLINS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_CONTRACTOR_CLINS] I INNER JOIN DELETED D on I.CLIN_IDF = D.CLIN_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_CLINS]',CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AD]
ON [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] AFTER DELETE AS
BEGIN
   Declare @SDATE as DATE = GETDATE(), @USER as varchar(128)=SUSER_NAME()
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_GSS_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS]',CLIN_IDF, @USER, @SDATE, @USER, @SDATE, 1, 'DELETE', 'DB DELETE','' From DELETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_GSS_CLINS_AU]
ON [dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] AFTER UPDATE AS
BEGIN
   Declare @SDATE as DATE = GETDATE(), @USER as varchar(128)=SUSER_NAME()
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_GSS_CLINS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_GSS_CLINS]',CLIN_IDF, @USER, @SDATE, @USER, @SDATE, 1, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_RATES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_RATES_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_RATES_AD]
ON [dbo].[REF_NITAAC_CONTRACTOR_RATES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_CONTRACTOR_RATES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_CONTRACTOR_RATES_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_CONTRACTOR_RATES_AU]
ON [dbo].[REF_NITAAC_CONTRACTOR_RATES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_CONTRACTOR_RATES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_CONTRACTOR_RATES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_CONTRACTOR_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_CONTRACTOR_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_CONTRACTOR_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_DEFINITIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_DEFINITIONS_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_DEFINITIONS_AD]
ON [dbo].[REF_NITAAC_DEFINITIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_DEFINITIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_DEFINITIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_DEFINITIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_DEFINITIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_DEFINITIONS_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_DEFINITIONS_AU]
ON [dbo].[REF_NITAAC_DEFINITIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_DEFINITIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_DEFINITIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_DEFINITIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_DEFINITIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_DEFINITIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_FEE_RATES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_FEE_RATES_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_FEE_RATES_AD]
ON [dbo].[REF_NITAAC_FEE_RATES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_FEE_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_FEE_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_FEE_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_FEE_RATES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_FEE_RATES_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_FEE_RATES_AU]
ON [dbo].[REF_NITAAC_FEE_RATES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_FEE_RATES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_FEE_RATES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_FEE_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_FEE_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_FEE_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_IDS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_IDS_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_IDS_AD]
ON [dbo].[REF_NITAAC_IDS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_IDS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_IDS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_IDS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_IDS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_IDS_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_IDS_AU]
ON [dbo].[REF_NITAAC_IDS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_IDS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_IDS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_IDS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_IDS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_IDS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_LABOR_CATEGORIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_LABOR_CATEGORIES_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_LABOR_CATEGORIES_AD]
ON [dbo].[REF_NITAAC_LABOR_CATEGORIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_LABOR_CATEGORIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_LABOR_CATEGORIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_LABOR_CATEGORIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_LABOR_CATEGORIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_LABOR_CATEGORIES_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_LABOR_CATEGORIES_AU]
ON [dbo].[REF_NITAAC_LABOR_CATEGORIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_LABOR_CATEGORIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_LABOR_CATEGORIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_LABOR_CATEGORIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_LABOR_CATEGORIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_LABOR_CATEGORIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_LABOR_RATES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_LABOR_RATES_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_LABOR_RATES_AD]
ON [dbo].[REF_NITAAC_LABOR_RATES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_LABOR_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_LABOR_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_LABOR_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_LABOR_RATES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_LABOR_RATES_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_LABOR_RATES_AU]
ON [dbo].[REF_NITAAC_LABOR_RATES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_LABOR_RATES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_LABOR_RATES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_LABOR_RATES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_LABOR_RATES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_LABOR_RATES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_OEM_MFR_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_OEM_MFR_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_OEM_MFR_AD]
ON [dbo].[REF_NITAAC_OEM_MFR] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_OEM_MFR]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_OEM_MFR] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_OEM_MFR]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_OEM_MFR_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_OEM_MFR_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_OEM_MFR_AU]
ON [dbo].[REF_NITAAC_OEM_MFR] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_OEM_MFR] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_OEM_MFR] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_OEM_MFR]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_OEM_MFR] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_OEM_MFR]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_REVIEW_SCOPES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_REVIEW_SCOPES_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_REVIEW_SCOPES_AD]
ON [dbo].[REF_NITAAC_REVIEW_SCOPES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_REVIEW_SCOPES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_REVIEW_SCOPES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_REVIEW_SCOPES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_REVIEW_SCOPES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_REVIEW_SCOPES_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_REVIEW_SCOPES_AU]
ON [dbo].[REF_NITAAC_REVIEW_SCOPES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_REVIEW_SCOPES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_REVIEW_SCOPES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_REVIEW_SCOPES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_REVIEW_SCOPES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_REVIEW_SCOPES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_UPC_INFO_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_UPC_INFO_AD]
GO
CREATE TRIGGER [TR_REF_NITAAC_UPC_INFO_AD]
ON [dbo].[REF_NITAAC_UPC_INFO] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_NITAAC_UPC_INFO]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_UPC_INFO] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_UPC_INFO]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_NITAAC_UPC_INFO_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_NITAAC_UPC_INFO_AU]
GO

CREATE TRIGGER [TR_REF_NITAAC_UPC_INFO_AU]
ON [dbo].[REF_NITAAC_UPC_INFO] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_NITAAC_UPC_INFO] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_NITAAC_UPC_INFO] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_NITAAC_UPC_INFO]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_NITAAC_UPC_INFO] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_NITAAC_UPC_INFO]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_REOURCE_SHARING_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_REOURCE_SHARING_AD]
GO
CREATE TRIGGER [TR_REF_REOURCE_SHARING_AD]
ON [dbo].[REF_REOURCE_SHARING] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_REOURCE_SHARING]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_REOURCE_SHARING] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_REOURCE_SHARING]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_REOURCE_SHARING_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_REOURCE_SHARING_AU]
GO

CREATE TRIGGER [TR_REF_REOURCE_SHARING_AU]
ON [dbo].[REF_REOURCE_SHARING] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_REOURCE_SHARING] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_REOURCE_SHARING] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_REOURCE_SHARING]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_REOURCE_SHARING] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_REOURCE_SHARING]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_STATE_COUNTRIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REF_STATE_COUNTRIES_AD]
GO
CREATE TRIGGER [TR_REF_STATE_COUNTRIES_AD]
ON [dbo].[REF_STATE_COUNTRIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REF_STATE_COUNTRIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_STATE_COUNTRIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_STATE_COUNTRIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REF_STATE_COUNTRIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REF_STATE_COUNTRIES_AU]
GO

CREATE TRIGGER [TR_REF_STATE_COUNTRIES_AU]
ON [dbo].[REF_STATE_COUNTRIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REF_STATE_COUNTRIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REF_STATE_COUNTRIES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REF_STATE_COUNTRIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REF_STATE_COUNTRIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REF_STATE_COUNTRIES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_RELEASE_CONTENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_RELEASE_CONTENTS_AD]
GO
CREATE TRIGGER [TR_RELEASE_CONTENTS_AD]
ON [dbo].[RELEASE_CONTENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[RELEASE_CONTENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[RELEASE_CONTENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[RELEASE_CONTENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_RELEASE_CONTENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_RELEASE_CONTENTS_AU]
GO

CREATE TRIGGER [TR_RELEASE_CONTENTS_AU]
ON [dbo].[RELEASE_CONTENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[RELEASE_CONTENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[RELEASE_CONTENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[RELEASE_CONTENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[RELEASE_CONTENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[RELEASE_CONTENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_RELEASE_ENVIRONMENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_RELEASE_ENVIRONMENTS_AD]
GO
CREATE TRIGGER [TR_RELEASE_ENVIRONMENTS_AD]
ON [dbo].[RELEASE_ENVIRONMENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[RELEASE_ENVIRONMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[RELEASE_ENVIRONMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[RELEASE_ENVIRONMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_RELEASE_ENVIRONMENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_RELEASE_ENVIRONMENTS_AU]
GO

CREATE TRIGGER [TR_RELEASE_ENVIRONMENTS_AU]
ON [dbo].[RELEASE_ENVIRONMENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[RELEASE_ENVIRONMENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[RELEASE_ENVIRONMENTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[RELEASE_ENVIRONMENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[RELEASE_ENVIRONMENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[RELEASE_ENVIRONMENTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REPORT_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REPORT_DETAILS_AD]
GO
CREATE TRIGGER [TR_REPORT_DETAILS_AD]
ON [dbo].[REPORT_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REPORT_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REPORT_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REPORT_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REPORT_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REPORT_DETAILS_AU]
GO

CREATE TRIGGER [TR_REPORT_DETAILS_AU]
ON [dbo].[REPORT_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REPORT_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REPORT_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REPORT_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REPORT_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REPORT_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REPORTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_REPORTS_AD]
GO
CREATE TRIGGER [TR_REPORTS_AD]
ON [dbo].[REPORTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REPORTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REPORTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_REPORTS_AU]
GO

CREATE TRIGGER [TR_REPORTS_AU]
ON [dbo].[REPORTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REPORTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REPORTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REPORTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REPORTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REPORTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REQUEST_RESPONSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_REQUEST_RESPONSES_AD]
GO
CREATE TRIGGER [TR_REQUEST_RESPONSES_AD]
ON [dbo].[REQUEST_RESPONSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[REQUEST_RESPONSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REQUEST_RESPONSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REQUEST_RESPONSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_REQUEST_RESPONSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_REQUEST_RESPONSES_AU]
GO

CREATE TRIGGER [TR_REQUEST_RESPONSES_AU]
ON [dbo].[REQUEST_RESPONSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[REQUEST_RESPONSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[REQUEST_RESPONSES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[REQUEST_RESPONSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[REQUEST_RESPONSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[REQUEST_RESPONSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SALES_REPORT_AD]','TR') is not NULL
     DROP TRIGGER [TR_SALES_REPORT_AD]
GO
CREATE TRIGGER [TR_SALES_REPORT_AD]
ON [dbo].[SALES_REPORT] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SALES_REPORT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SALES_REPORT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SALES_REPORT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SALES_REPORT_AU]','TR') is not NULL
     DROP TRIGGER [TR_SALES_REPORT_AU]
GO

CREATE TRIGGER [TR_SALES_REPORT_AU]
ON [dbo].[SALES_REPORT] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SALES_REPORT] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SALES_REPORT] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SALES_REPORT]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SALES_REPORT] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SALES_REPORT]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SALES_REPORT_ITEM_AD]','TR') is not NULL
     DROP TRIGGER [TR_SALES_REPORT_ITEM_AD]
GO
CREATE TRIGGER [TR_SALES_REPORT_ITEM_AD]
ON [dbo].[SALES_REPORT_ITEM] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SALES_REPORT_ITEM]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SALES_REPORT_ITEM] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SALES_REPORT_ITEM]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SALES_REPORT_ITEM_AU]','TR') is not NULL
     DROP TRIGGER [TR_SALES_REPORT_ITEM_AU]
GO

CREATE TRIGGER [TR_SALES_REPORT_ITEM_AU]
ON [dbo].[SALES_REPORT_ITEM] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SALES_REPORT_ITEM] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SALES_REPORT_ITEM] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SALES_REPORT_ITEM]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SALES_REPORT_ITEM] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SALES_REPORT_ITEM]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SCHEDULE_JOBS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SCHEDULE_JOBS_AD]
GO
CREATE TRIGGER [TR_SCHEDULE_JOBS_AD]
ON [dbo].[SCHEDULE_JOBS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SCHEDULE_JOBS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SCHEDULE_JOBS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SCHEDULE_JOBS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SCHEDULE_JOBS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SCHEDULE_JOBS_AU]
GO

CREATE TRIGGER [TR_SCHEDULE_JOBS_AU]
ON [dbo].[SCHEDULE_JOBS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SCHEDULE_JOBS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SCHEDULE_JOBS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SCHEDULE_JOBS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SCHEDULE_JOBS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SCHEDULE_JOBS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SHOP_CART_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SHOP_CART_ITEMS_AD]
GO
CREATE TRIGGER [TR_SHOP_CART_ITEMS_AD]
ON [dbo].[SHOP_CART_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SHOP_CART_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SHOP_CART_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SHOP_CART_ITEMS]',SHOP_CART_IDF+':=:'+CONTRACTOR_IDF+':=:'+CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','SHOP_CART_IDF:=:CONTRACTOR_IDF:=:CLIN_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SHOP_CART_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SHOP_CART_ITEMS_AU]
GO

CREATE TRIGGER [TR_SHOP_CART_ITEMS_AU]
ON [dbo].[SHOP_CART_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.SHOP_CART_IDF= D.SHOP_CART_IDF AND I.CONTRACTOR_IDF= D.CONTRACTOR_IDF AND I.CLIN_IDF = D.CLIN_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SHOP_CART_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SHOP_CART_ITEMS] I INNER JOIN DELETED D on I.SHOP_CART_IDF= D.SHOP_CART_IDF AND I.CONTRACTOR_IDF= D.CONTRACTOR_IDF AND I.CLIN_IDF = D.CLIN_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SHOP_CART_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SHOP_CART_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SHOP_CART_ITEMS]',SHOP_CART_IDF+':=:'+CONTRACTOR_IDF+':=:'+CLIN_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','SHOP_CART_IDF:=:CONTRACTOR_IDF:=:CLIN_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SHOP_CARTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SHOP_CARTS_AD]
GO
CREATE TRIGGER [TR_SHOP_CARTS_AD]
ON [dbo].[SHOP_CARTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SHOP_CARTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SHOP_CARTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SHOP_CARTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SHOP_CARTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SHOP_CARTS_AU]
GO

CREATE TRIGGER [TR_SHOP_CARTS_AU]
ON [dbo].[SHOP_CARTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SHOP_CARTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SHOP_CARTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SHOP_CARTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SHOP_CARTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SHOP_CARTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SIMPLE_WORKFLOW_ACTIVITIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_SIMPLE_WORKFLOW_ACTIVITIES_AD]
GO
CREATE TRIGGER [TR_SIMPLE_WORKFLOW_ACTIVITIES_AD]
ON [dbo].[SIMPLE_WORKFLOW_ACTIVITIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SIMPLE_WORKFLOW_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SIMPLE_WORKFLOW_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SIMPLE_WORKFLOW_ACTIVITIES]',ACTIVITY_IDF=+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','ACTIVITY_IDF:=:WORKFLOW_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SIMPLE_WORKFLOW_ACTIVITIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_SIMPLE_WORKFLOW_ACTIVITIES_AU]
GO

CREATE TRIGGER [TR_SIMPLE_WORKFLOW_ACTIVITIES_AU]
ON [dbo].[SIMPLE_WORKFLOW_ACTIVITIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.ACTIVITY_IDF=D.ACTIVITY_IDF AND I.WORKFLOW_IDF=D.WORKFLOW_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SIMPLE_WORKFLOW_ACTIVITIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SIMPLE_WORKFLOW_ACTIVITIES] I INNER JOIN DELETED D on I.ACTIVITY_IDF=D.ACTIVITY_IDF AND I.WORKFLOW_IDF=D.WORKFLOW_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SIMPLE_WORKFLOW_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SIMPLE_WORKFLOW_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SIMPLE_WORKFLOW_ACTIVITIES]',ACTIVITY_IDF=+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','ACTIVITY_IDF:=:WORKFLOW_IDFApplication Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SIMPLE_WORKFLOW_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SIMPLE_WORKFLOW_TASKS_AD]
GO
CREATE TRIGGER [TR_SIMPLE_WORKFLOW_TASKS_AD]
ON [dbo].[SIMPLE_WORKFLOW_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SIMPLE_WORKFLOW_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SIMPLE_WORKFLOW_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SIMPLE_WORKFLOW_TASKS]',TASK_IDF+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SIMPLE_WORKFLOW_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SIMPLE_WORKFLOW_TASKS_AU]
GO

CREATE TRIGGER [TR_SIMPLE_WORKFLOW_TASKS_AU]
ON [dbo].[SIMPLE_WORKFLOW_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.WORKFLOW_IDF = D.WORKFLOW_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SIMPLE_WORKFLOW_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SIMPLE_WORKFLOW_TASKS] I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.WORKFLOW_IDF = D.WORKFLOW_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SIMPLE_WORKFLOW_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SIMPLE_WORKFLOW_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SIMPLE_WORKFLOW_TASKS]',TASK_IDF+':=:'+WORKFLOW_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SP_ORDER_TASKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SP_ORDER_TASKS_AD]
GO
CREATE TRIGGER [TR_SP_ORDER_TASKS_AD]
ON [dbo].[SP_ORDER_TASKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SP_ORDER_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SP_ORDER_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SP_ORDER_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SP_ORDER_TASKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SP_ORDER_TASKS_AU]
GO

CREATE TRIGGER [TR_SP_ORDER_TASKS_AU]
ON [dbo].[SP_ORDER_TASKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SP_ORDER_TASKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SP_ORDER_TASKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SP_ORDER_TASKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SP_ORDER_TASKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SP_ORDER_TASKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SYSTEM_CONFIGURATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_SYSTEM_CONFIGURATIONS_AD]
GO
CREATE TRIGGER [TR_SYSTEM_CONFIGURATIONS_AD]
ON [dbo].[SYSTEM_CONFIGURATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SYSTEM_CONFIGURATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SYSTEM_CONFIGURATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SYSTEM_CONFIGURATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SYSTEM_CONFIGURATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_SYSTEM_CONFIGURATIONS_AU]
GO

CREATE TRIGGER [TR_SYSTEM_CONFIGURATIONS_AU]
ON [dbo].[SYSTEM_CONFIGURATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SYSTEM_CONFIGURATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SYSTEM_CONFIGURATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SYSTEM_CONFIGURATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SYSTEM_CONFIGURATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SYSTEM_CONFIGURATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SYSTEM_MAINTENANCES_AD]','TR') is not NULL
     DROP TRIGGER [TR_SYSTEM_MAINTENANCES_AD]
GO
CREATE TRIGGER [TR_SYSTEM_MAINTENANCES_AD]
ON [dbo].[SYSTEM_MAINTENANCES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[SYSTEM_MAINTENANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SYSTEM_MAINTENANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SYSTEM_MAINTENANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_SYSTEM_MAINTENANCES_AU]','TR') is not NULL
     DROP TRIGGER [TR_SYSTEM_MAINTENANCES_AU]
GO

CREATE TRIGGER [TR_SYSTEM_MAINTENANCES_AU]
ON [dbo].[SYSTEM_MAINTENANCES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[SYSTEM_MAINTENANCES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[SYSTEM_MAINTENANCES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[SYSTEM_MAINTENANCES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[SYSTEM_MAINTENANCES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[SYSTEM_MAINTENANCES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_ACTIVITIES_AD]','TR') is not NULL
     DROP TRIGGER [TR_TASK_ACTIVITIES_AD]
GO
CREATE TRIGGER [TR_TASK_ACTIVITIES_AD]
ON [dbo].[TASK_ACTIVITIES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TASK_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_ACTIVITIES]',TASK_IDF+':=:'+ACTIVITY_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_ACTIVITIES_AU]','TR') is not NULL
     DROP TRIGGER [TR_TASK_ACTIVITIES_AU]
GO

CREATE TRIGGER [TR_TASK_ACTIVITIES_AU]
ON [dbo].[TASK_ACTIVITIES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.ACTIVITY_IDF=D.ACTIVITY_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TASK_ACTIVITIES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TASK_ACTIVITIES] I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.ACTIVITY_IDF=D.ACTIVITY_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TASK_ACTIVITIES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_ACTIVITIES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_ACTIVITIES]',TASK_IDF+':=:'+ACTIVITY_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_DELIVERABLE_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TASK_DELIVERABLE_DETAILS_AD]
GO
CREATE TRIGGER [TR_TASK_DELIVERABLE_DETAILS_AD]
ON [dbo].[TASK_DELIVERABLE_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TASK_DELIVERABLE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_DELIVERABLE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_DELIVERABLE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_DELIVERABLE_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TASK_DELIVERABLE_DETAILS_AU]
GO

CREATE TRIGGER [TR_TASK_DELIVERABLE_DETAILS_AU]
ON [dbo].[TASK_DELIVERABLE_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TASK_DELIVERABLE_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TASK_DELIVERABLE_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TASK_DELIVERABLE_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_DELIVERABLE_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_DELIVERABLE_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_EVENTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TASK_EVENTS_AD]
GO
CREATE TRIGGER [TR_TASK_EVENTS_AD]
ON [dbo].[TASK_EVENTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TASK_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_EVENTS]',TASK_IDF+':=:'+EVENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_EVENTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TASK_EVENTS_AU]
GO

CREATE TRIGGER [TR_TASK_EVENTS_AU]
ON [dbo].[TASK_EVENTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.EVENT_IDF = D.EVENT_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TASK_EVENTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TASK_EVENTS] I INNER JOIN DELETED D on I.TASK_IDF=D.TASK_IDF AND I.EVENT_IDF = D.EVENT_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TASK_EVENTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_EVENTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_EVENTS]',TASK_IDF+':=:'+EVENT_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_MODIFICATIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TASK_MODIFICATIONS_AD]
GO
CREATE TRIGGER [TR_TASK_MODIFICATIONS_AD]
ON [dbo].[TASK_MODIFICATIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TASK_MODIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_MODIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_MODIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TASK_MODIFICATIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TASK_MODIFICATIONS_AU]
GO

CREATE TRIGGER [TR_TASK_MODIFICATIONS_AU]
ON [dbo].[TASK_MODIFICATIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TASK_MODIFICATIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TASK_MODIFICATIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TASK_MODIFICATIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TASK_MODIFICATIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TASK_MODIFICATIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TELECOM_ADDRESSES_AD]','TR') is not NULL
     DROP TRIGGER [TR_TELECOM_ADDRESSES_AD]
GO
CREATE TRIGGER [TR_TELECOM_ADDRESSES_AD]
ON [dbo].[TELECOM_ADDRESSES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TELECOM_ADDRESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TELECOM_ADDRESSES_AU]','TR') is not NULL
     DROP TRIGGER [TR_TELECOM_ADDRESSES_AU]
GO

CREATE TRIGGER [TR_TELECOM_ADDRESSES_AU]
ON [dbo].[TELECOM_ADDRESSES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TELECOM_ADDRESSES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TELECOM_ADDRESSES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TELECOM_ADDRESSES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TELECOM_ADDRESSES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TELECOM_ADDRESSES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKET_DETAILS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TICKET_DETAILS_AD]
GO
CREATE TRIGGER [TR_TICKET_DETAILS_AD]
ON [dbo].[TICKET_DETAILS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TICKET_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKET_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKET_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKET_DETAILS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TICKET_DETAILS_AU]
GO

CREATE TRIGGER [TR_TICKET_DETAILS_AU]
ON [dbo].[TICKET_DETAILS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TICKET_DETAILS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TICKET_DETAILS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TICKET_DETAILS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKET_DETAILS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKET_DETAILS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKET_RESOLUTIONS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TICKET_RESOLUTIONS_AD]
GO
CREATE TRIGGER [TR_TICKET_RESOLUTIONS_AD]
ON [dbo].[TICKET_RESOLUTIONS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TICKET_RESOLUTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKET_RESOLUTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKET_RESOLUTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKET_RESOLUTIONS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TICKET_RESOLUTIONS_AU]
GO

CREATE TRIGGER [TR_TICKET_RESOLUTIONS_AU]
ON [dbo].[TICKET_RESOLUTIONS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TICKET_RESOLUTIONS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TICKET_RESOLUTIONS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TICKET_RESOLUTIONS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKET_RESOLUTIONS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKET_RESOLUTIONS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKETS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TICKETS_AD]
GO
CREATE TRIGGER [TR_TICKETS_AD]
ON [dbo].[TICKETS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TICKETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKETS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TICKETS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TICKETS_AU]
GO

CREATE TRIGGER [TR_TICKETS_AU]
ON [dbo].[TICKETS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TICKETS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TICKETS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TICKETS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TICKETS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TICKETS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TRP_CLIN_REVIEWS_AD]','TR') is not NULL
     DROP TRIGGER [TR_TRP_CLIN_REVIEWS_AD]
GO
CREATE TRIGGER [TR_TRP_CLIN_REVIEWS_AD]
ON [dbo].[TRP_CLIN_REVIEWS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[TRP_CLIN_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TRP_CLIN_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TRP_CLIN_REVIEWS]',CONTRACTOR_CLIN_ID, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_TRP_CLIN_REVIEWS_AU]','TR') is not NULL
     DROP TRIGGER [TR_TRP_CLIN_REVIEWS_AU]
GO

CREATE TRIGGER [TR_TRP_CLIN_REVIEWS_AU]
ON [dbo].[TRP_CLIN_REVIEWS] AFTER UPDATE AS
BEGIN
   if Update(STATUS_CODE)
   BEGIN
       if exists( select * from  INSERTED I INNER JOIN DELETED D on I.CLIN_IDF = D.CLIN_IDF and I.STATUS_CODE <> D.STATUS_CODE)
           UPDATE t Set CLIN_FAILED_COUNT = (SELECT COUNT(*) FROM TRP_CLIN_REVIEWS where t.IDF = TRP_IDF and STATUS_CODE <> 'PASS')
           FROM TRP_UPLOADS t
   END
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.CLIN_IDF = D.CLIN_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[TRP_CLIN_REVIEWS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[TRP_CLIN_REVIEWS] I INNER JOIN DELETED D on I.CLIN_IDF = D.CLIN_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[TRP_CLIN_REVIEWS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[TRP_CLIN_REVIEWS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[TRP_CLIN_REVIEWS]',CONTRACTOR_CLIN_ID, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_APPLICATION_ROLES_AD]','TR') is not NULL
     DROP TRIGGER [TR_USER_APPLICATION_ROLES_AD]
GO
CREATE TRIGGER [TR_USER_APPLICATION_ROLES_AD]
ON [dbo].[USER_APPLICATION_ROLES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[USER_APPLICATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_APPLICATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_APPLICATION_ROLES]',USER_IDF +':=:'+ROLE_IDF+':=:'+APPLICATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','USER_IDF:=:ROLE_IDF:=:APPLICATION_IDF' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_APPLICATION_ROLES_AU]','TR') is not NULL
     DROP TRIGGER [TR_USER_APPLICATION_ROLES_AU]
GO

CREATE TRIGGER [TR_USER_APPLICATION_ROLES_AU]
ON [dbo].[USER_APPLICATION_ROLES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.USER_IDF=D.USER_IDF AND I.ROLE_IDF=D.ROLE_IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[USER_APPLICATION_ROLES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[USER_APPLICATION_ROLES] I INNER JOIN DELETED D on I.USER_IDF=D.USER_IDF AND I.ROLE_IDF=D.ROLE_IDF AND I.APPLICATION_IDF = D.APPLICATION_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[USER_APPLICATION_ROLES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_APPLICATION_ROLES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_APPLICATION_ROLES]',USER_IDF +':=:'+ROLE_IDF+':=:'+APPLICATION_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','USER_IDF:=:ROLE_IDF:=:APPLICATION_IDF Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_FEEDBACKS_AD]','TR') is not NULL
     DROP TRIGGER [TR_USER_FEEDBACKS_AD]
GO
CREATE TRIGGER [TR_USER_FEEDBACKS_AD]
ON [dbo].[USER_FEEDBACKS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[USER_FEEDBACKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_FEEDBACKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_FEEDBACKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_FEEDBACKS_AU]','TR') is not NULL
     DROP TRIGGER [TR_USER_FEEDBACKS_AU]
GO

CREATE TRIGGER [TR_USER_FEEDBACKS_AU]
ON [dbo].[USER_FEEDBACKS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[USER_FEEDBACKS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[USER_FEEDBACKS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[USER_FEEDBACKS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_FEEDBACKS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_FEEDBACKS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_REQUEST_AD]','TR') is not NULL
     DROP TRIGGER [TR_USER_REQUEST_AD]
GO
CREATE TRIGGER [TR_USER_REQUEST_AD]
ON [dbo].[USER_REQUEST] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[USER_REQUEST]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_REQUEST] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_REQUEST]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_REQUEST_AU]','TR') is not NULL
     DROP TRIGGER [TR_USER_REQUEST_AU]
GO

CREATE TRIGGER [TR_USER_REQUEST_AU]
ON [dbo].[USER_REQUEST] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[USER_REQUEST] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[USER_REQUEST] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[USER_REQUEST]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_REQUEST] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_REQUEST]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_SETTINGS_AD]','TR') is not NULL
     DROP TRIGGER [TR_USER_SETTINGS_AD]
GO
CREATE TRIGGER [TR_USER_SETTINGS_AD]
ON [dbo].[USER_SETTINGS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[USER_SETTINGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_SETTINGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_SETTINGS]',USER_IDF+':=:'+GROUP_REFERENCE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USER_SETTINGS_AU]','TR') is not NULL
     DROP TRIGGER [TR_USER_SETTINGS_AU]
GO

CREATE TRIGGER [TR_USER_SETTINGS_AU]
ON [dbo].[USER_SETTINGS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.USER_IDF=D.USER_IDF AND I.GROUP_REFERENCE_IDF = D.GROUP_REFERENCE_IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[USER_SETTINGS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[USER_SETTINGS] I INNER JOIN DELETED D on I.USER_IDF=D.USER_IDF AND I.GROUP_REFERENCE_IDF = D.GROUP_REFERENCE_IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[USER_SETTINGS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USER_SETTINGS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USER_SETTINGS]',USER_IDF+':=:'+GROUP_REFERENCE_IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USERS_AD]','TR') is not NULL
     DROP TRIGGER [TR_USERS_AD]
GO
CREATE TRIGGER [TR_USERS_AD]
ON [dbo].[USERS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_USERS_AI]','TR') is not NULL
     DROP TRIGGER [TR_USERS_AI]
GO
CREATE TRIGGER [TR_USERS_AI]
ON [dbo].[USERS] AFTER INSERT AS
/* CODE unique username */

     if (SELECT COUNT(*) FROM INSERTED I INNER JOIN [dbo].[USERS] U on I.USERNAME = U.USERNAME) > 0
     BEGIN
             Declare @Description as varchar(512);
             exec sp_Log_Error @P_SEVERITY_CODE='C_FATAL',@P_REFERENCE_NAME='TRIGGER: [TR_USERS_AI] on TABLE: [dbo].[USERS]',@P_CATEGORY_CODE='C_ERR_DATABASE', @P_ERR_CODE='C_REC_DUPLICATE', @ReturnValue=@Description OUT
             set @Description += 'C_REC_DUPLICATE: '
             ;THROW 60001, @Description, 1;
     END
     else if (Select count(*)  FROM INSERTED where dbo.fn_isValidIDF(CATEGORY_CODE, IDF) < 0) > 0
          THROW 60000, 'C_ERR_INVALID', 1;
GO

IF OBJECT_ID('[TR_USERS_AU]','TR') is not NULL
     DROP TRIGGER [TR_USERS_AU]
GO

CREATE TRIGGER [TR_USERS_AU]
ON [dbo].[USERS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[USERS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[USERS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   if UPDATE(OWNER_IDF)
   BEGIN
           if (Select count(*)  FROM INSERTED where dbo.fn_isValidIDF(CATEGORY_CODE, IDF) < 0) > 0 THROW 60000, 'C_ERR_INVALID', 1;
   END
   ELSE if UPDATE(EMAIL)
   BEGIN
          IF (SELECT COUNT(*) FROM INSERTED where dbo.fn_IsValidEmail(EMail,TYPE_CODE) < 1) > 0
              THROW 80001, 'C_ERR_EMAIL', 1;
          ELSE
          BEGIN
              UPDATE u SET EMAIL = I.EMAIL
              FROM TELECOM_ADDRESSES u INNER JOIN DELETED D on u.Email = D.Email INNER JOIN INSERTED I on I.IDF = D.IDF
              WHERE I.EMAIL <> D.EMAIL
          END
   END
   IF dbo.fn_IsAuditReady('[USERS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[USERS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[USERS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WHAT_IS_NEW_AD]','TR') is not NULL
     DROP TRIGGER [TR_WHAT_IS_NEW_AD]
GO
CREATE TRIGGER [TR_WHAT_IS_NEW_AD]
ON [dbo].[WHAT_IS_NEW] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[WHAT_IS_NEW]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WHAT_IS_NEW] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WHAT_IS_NEW]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WHAT_IS_NEW_AU]','TR') is not NULL
     DROP TRIGGER [TR_WHAT_IS_NEW_AU]
GO

CREATE TRIGGER [TR_WHAT_IS_NEW_AU]
ON [dbo].[WHAT_IS_NEW] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[WHAT_IS_NEW] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[WHAT_IS_NEW] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[WHAT_IS_NEW]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WHAT_IS_NEW] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WHAT_IS_NEW]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WISH_LIST_ITEMS_AD]','TR') is not NULL
     DROP TRIGGER [TR_WISH_LIST_ITEMS_AD]
GO
CREATE TRIGGER [TR_WISH_LIST_ITEMS_AD]
ON [dbo].[WISH_LIST_ITEMS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[WISH_LIST_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WISH_LIST_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WISH_LIST_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WISH_LIST_ITEMS_AU]','TR') is not NULL
     DROP TRIGGER [TR_WISH_LIST_ITEMS_AU]
GO

CREATE TRIGGER [TR_WISH_LIST_ITEMS_AU]
ON [dbo].[WISH_LIST_ITEMS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[WISH_LIST_ITEMS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[WISH_LIST_ITEMS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[WISH_LIST_ITEMS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WISH_LIST_ITEMS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WISH_LIST_ITEMS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WISH_LISTS_AD]','TR') is not NULL
     DROP TRIGGER [TR_WISH_LISTS_AD]
GO
CREATE TRIGGER [TR_WISH_LISTS_AD]
ON [dbo].[WISH_LISTS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[WISH_LISTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WISH_LISTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WISH_LISTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WISH_LISTS_AU]','TR') is not NULL
     DROP TRIGGER [TR_WISH_LISTS_AU]
GO

CREATE TRIGGER [TR_WISH_LISTS_AU]
ON [dbo].[WISH_LISTS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[WISH_LISTS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[WISH_LISTS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[WISH_LISTS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WISH_LISTS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WISH_LISTS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WORKFLOW_NODE_JOBS_AD]','TR') is not NULL
     DROP TRIGGER [TR_WORKFLOW_NODE_JOBS_AD]
GO
CREATE TRIGGER [TR_WORKFLOW_NODE_JOBS_AD]
ON [dbo].[WORKFLOW_NODE_JOBS] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[WORKFLOW_NODE_JOBS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WORKFLOW_NODE_JOBS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WORKFLOW_NODE_JOBS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','IDF for deletion' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WORKFLOW_NODE_JOBS_AU]','TR') is not NULL
     DROP TRIGGER [TR_WORKFLOW_NODE_JOBS_AU]
GO

CREATE TRIGGER [TR_WORKFLOW_NODE_JOBS_AU]
ON [dbo].[WORKFLOW_NODE_JOBS] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[WORKFLOW_NODE_JOBS] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[WORKFLOW_NODE_JOBS] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[WORKFLOW_NODE_JOBS]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WORKFLOW_NODE_JOBS] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WORKFLOW_NODE_JOBS]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','IDF for Application Level:' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WORKFLOW_NODES_AD]','TR') is not NULL
     DROP TRIGGER [TR_WORKFLOW_NODES_AD]
GO
CREATE TRIGGER [TR_WORKFLOW_NODES_AD]
ON [dbo].[WORKFLOW_NODES] AFTER DELETE AS
BEGIN
   IF dbo.fn_IsAuditReady('[WORKFLOW_NODES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WORKFLOW_NODES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WORKFLOW_NODES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'DELETE', 'DB DELETE','' From DElETED
   END
END
GO

IF OBJECT_ID('[TR_WORKFLOW_NODES_AU]','TR') is not NULL
     DROP TRIGGER [TR_WORKFLOW_NODES_AU]
GO

CREATE TRIGGER [TR_WORKFLOW_NODES_AU]
ON [dbo].[WORKFLOW_NODES] AFTER UPDATE AS
BEGIN
   if EXISTS (SELECT * from INSERTED I INNER JOIN DELETED D on I.IDF = D.IDF where I.UPDATED_COUNT=D.UPDATED_COUNT)
   BEGIN
           UPDATE [dbo].[WORKFLOW_NODES] SET UPDATED_DATE = ISNULL(I.UPDATED_DATE,GetDate()), UPDATED_BY = ISNULL(I.UPDATED_BY,SUSER_NAME()), UPDATED_COUNT=I.UPDATED_COUNT + 1
           FROM [dbo].[WORKFLOW_NODES] I INNER JOIN DELETED D on I.IDF = D.IDF WHERE D.UPDATED_COUNT = I.UPDATED_COUNT
   END
   IF dbo.fn_IsAuditReady('[WORKFLOW_NODES]',1) > 0
   BEGIN
      INSERT NEOSMG_AUDIT.[dbo].[WORKFLOW_NODES] SELECT * FROM DELETED
      INSERT NEOSMG_AUDIT.[dbo].[AUDIT_REPORT](SOURCE, AUDIT_ID, SOURCE_CREATED_BY, SOURCE_CREATED_DATE, SOURCE_UPDATED_BY, SOURCE_UPDATED_DATE, SOURCE_UPDATED_COUNT, [ACTION],[TRANSACTION], COMMENTS)
      SELECT '[dbo].[WORKFLOW_NODES]',IDF, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, UPDATED_COUNT, 'UPDATE', 'DB UPDATE','Application Level' From DElETED
   END
END
GO
